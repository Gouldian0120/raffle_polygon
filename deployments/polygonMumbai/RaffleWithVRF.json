{
  "address": "0x0524374f38B288D82fcd421C10a50Bc166CD0EAB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdtInterface",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyRefunded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DrawExpirationTimeNotReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20TransferFail",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20TransferFromFail",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721TransferFromFail",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientNativeTokensSupplied",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCurrency",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFeeRecipient",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidIndex",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPricingOption",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPrize",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPrizesCount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStatus",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidWinnersCount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaximumEntriesPerParticipantReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaximumEntriesReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAContract",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PrizeAlreadyClaimed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RandomnessRequestAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RandomnessRequestDoesNotExist",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "currencies",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isAllowed",
          "type": "bool"
        }
      ],
      "name": "CurrenciesStatusUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "raffleId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint208",
          "name": "amount",
          "type": "uint208"
        }
      ],
      "name": "EntryRefunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "raffleId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint40",
          "name": "entriesCount",
          "type": "uint40"
        },
        {
          "indexed": false,
          "internalType": "uint208",
          "name": "price",
          "type": "uint208"
        }
      ],
      "name": "EntrySold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint40",
          "name": "feePrice",
          "type": "uint40"
        }
      ],
      "name": "FeePriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeRecipient",
          "type": "address"
        }
      ],
      "name": "FeeRecipientUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "raffleId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FeesClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "raffleId",
          "type": "uint256"
        }
      ],
      "name": "IncreaseRaffleId",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "raffleId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "winnerIndex",
          "type": "uint256[]"
        }
      ],
      "name": "PrizesClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "raffleId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum IRaffleVRF.RaffleStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "RaffleStatusUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "raffleId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requeestId",
          "type": "uint256"
        }
      ],
      "name": "RandomnessRequested",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "KEY_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAXIMUM_NUMBER_OF_PRIZES_PER_RAFFLE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAXIMUM_NUMBER_OF_WINNERS_PER_RAFFLE",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICING_OPTIONS_PER_RAFFLE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REQUEST_CONFIRMATIONS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SELECT_WINNERS_LIMIT",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SUBSCRIPTION_ID",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDTInterface",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VRF_COORDINATOR",
      "outputs": [
        {
          "internalType": "contract VRFCoordinatorV2Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "raffleId",
          "type": "uint256"
        }
      ],
      "name": "claimFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isMinimumEntriesFixed",
              "type": "bool"
            },
            {
              "internalType": "uint40",
              "name": "minimumEntries",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "maximumEntriesPerParticipant",
              "type": "uint40"
            },
            {
              "components": [
                {
                  "internalType": "uint40",
                  "name": "winnersCount",
                  "type": "uint40"
                },
                {
                  "internalType": "uint40",
                  "name": "cumulativeWinnersCount",
                  "type": "uint40"
                },
                {
                  "internalType": "enum IRaffleVRF.TokenType",
                  "name": "prizeType",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "prizeTier",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "prizeAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "prizeId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "prizeAmount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IRaffleVRF.Prize[]",
              "name": "prizes",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint40",
                  "name": "entriesCount",
                  "type": "uint40"
                },
                {
                  "internalType": "uint208",
                  "name": "price",
                  "type": "uint208"
                }
              ],
              "internalType": "struct IRaffleVRF.PricingOption[5]",
              "name": "pricingOptions",
              "type": "tuple[5]"
            }
          ],
          "internalType": "struct IRaffleVRF.CreateRaffleCalldata",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createRaffle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "raffleId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "raffleId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pricingOptionIndex",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRaffleVRF.EntryCalldata[]",
          "name": "entries",
          "type": "tuple[]"
        }
      ],
      "name": "enterRaffles",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feePrice",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "raffleId",
          "type": "uint256"
        }
      ],
      "name": "getEntries",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint40",
              "name": "currentEntryIndex",
              "type": "uint40"
            },
            {
              "internalType": "address",
              "name": "participant",
              "type": "address"
            }
          ],
          "internalType": "struct IRaffleVRF.Entry[]",
          "name": "entries",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "raffleId",
          "type": "uint256"
        }
      ],
      "name": "getPricingOptions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint40",
              "name": "entriesCount",
              "type": "uint40"
            },
            {
              "internalType": "uint208",
              "name": "price",
              "type": "uint208"
            }
          ],
          "internalType": "struct IRaffleVRF.PricingOption[5]",
          "name": "pricingOptions",
          "type": "tuple[5]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "raffleId",
          "type": "uint256"
        }
      ],
      "name": "getPrizes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint40",
              "name": "winnersCount",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "cumulativeWinnersCount",
              "type": "uint40"
            },
            {
              "internalType": "enum IRaffleVRF.TokenType",
              "name": "prizeType",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "prizeTier",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "prizeAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "prizeId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "prizeAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRaffleVRF.Prize[]",
          "name": "prizes",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "raffleId",
          "type": "uint256"
        }
      ],
      "name": "getWinners",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "participant",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "claimed",
              "type": "bool"
            },
            {
              "internalType": "uint8",
              "name": "prizeIndex",
              "type": "uint8"
            },
            {
              "internalType": "uint40",
              "name": "entryIndex",
              "type": "uint40"
            }
          ],
          "internalType": "struct IRaffleVRF.Winner[]",
          "name": "winners",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "raffleId",
          "type": "uint256"
        }
      ],
      "name": "getWinnersCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "winnersCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isCurrencyAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "raffles",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "enum IRaffleVRF.RaffleStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "isMinimumEntriesFixed",
          "type": "bool"
        },
        {
          "internalType": "uint40",
          "name": "drawnAt",
          "type": "uint40"
        },
        {
          "internalType": "uint40",
          "name": "minimumEntries",
          "type": "uint40"
        },
        {
          "internalType": "uint40",
          "name": "maximumEntriesPerParticipant",
          "type": "uint40"
        },
        {
          "internalType": "uint256",
          "name": "selectWinnersStartPosition",
          "type": "uint256"
        },
        {
          "internalType": "uint208",
          "name": "claimableFees",
          "type": "uint208"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rafflesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rafflesParticipantsStats",
      "outputs": [
        {
          "internalType": "uint208",
          "name": "amountPaid",
          "type": "uint208"
        },
        {
          "internalType": "uint40",
          "name": "entriesCount",
          "type": "uint40"
        },
        {
          "internalType": "bool",
          "name": "refunded",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "randomnessRequests",
      "outputs": [
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        },
        {
          "internalType": "uint248",
          "name": "randomWord",
          "type": "uint248"
        },
        {
          "internalType": "uint256",
          "name": "raffleId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "selectWinners",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint40",
          "name": "_feePrice",
          "type": "uint40"
        }
      ],
      "name": "setFeePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        }
      ],
      "name": "setFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "currencies",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "isAllowed",
          "type": "bool"
        }
      ],
      "name": "updateCurrenciesStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd0c0611d59230463c1d762fb3092cf6f0de08b55fff9510b58dfbde7b94bb499",
  "receipt": {
    "to": null,
    "from": "0xf946cE2Fe9f127F83835dB47526b885775727628",
    "contractAddress": "0x0524374f38B288D82fcd421C10a50Bc166CD0EAB",
    "transactionIndex": 4,
    "gasUsed": "2925952",
    "logsBloom": "0x
    "blockHash": "0xa52111a38d28fa3142cc1961191cfb4f1d214969e30ffe1b973f882a2bf3aed7",
    "transactionHash": "0xd0c0611d59230463c1d762fb3092cf6f0de08b55fff9510b58dfbde7b94bb499",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 41054802,
        "transactionHash": "0xd0c0611d59230463c1d762fb3092cf6f0de08b55fff9510b58dfbde7b94bb499",
        "address": "0x0524374f38B288D82fcd421C10a50Bc166CD0EAB",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f946ce2fe9f127f83835db47526b885775727628"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0xa52111a38d28fa3142cc1961191cfb4f1d214969e30ffe1b973f882a2bf3aed7"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 41054802,
        "transactionHash": "0xd0c0611d59230463c1d762fb3092cf6f0de08b55fff9510b58dfbde7b94bb499",
        "address": "0x0524374f38B288D82fcd421C10a50Bc166CD0EAB",
        "topics": [
          "0x7a7b5a0a132f9e0581eb8527f66eae9ee89c2a3e79d4ac7e41a1f1f4d48a7fc2"
        ],
        "data": "0x000000000000000000000000f946ce2fe9f127f83835db47526b885775727628",
        "logIndex": 9,
        "blockHash": "0xa52111a38d28fa3142cc1961191cfb4f1d214969e30ffe1b973f882a2bf3aed7"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 41054802,
        "transactionHash": "0xd0c0611d59230463c1d762fb3092cf6f0de08b55fff9510b58dfbde7b94bb499",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000f946ce2fe9f127f83835db47526b885775727628",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000f97b4f12cd8000000000000000000000000000000000000000000000000002617c7c75edaa83c00000000000000000000000000000000000000000000132a8cddf28baef4e97f000000000000000000000000000000000000000000000000260830126dadd03c00000000000000000000000000000000000000000000132a8ced8a40a021c17f",
        "logIndex": 10,
        "blockHash": "0xa52111a38d28fa3142cc1961191cfb4f1d214969e30ffe1b973f882a2bf3aed7"
      }
    ],
    "blockNumber": 41054802,
    "cumulativeGasUsed": "4607109",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4b09e658ed251bcafeebbc69400383d49f344ace09b9576fe248bb02c003fe9f",
    "6006",
    "0x7a1BaC17Ccc5b313516C5E16fb24f7659aA5ebed",
    "0x1d8CAC74E931F9BabC9D41dB9A2B9C7Ef7D76CbB",
    "0xf946cE2Fe9f127F83835dB47526b885775727628"
  ],
  "numDeployments": 3,
  "solcInputHash": "1fcb9c488f77b01cd9448347e6b15130",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdtInterface\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyRefunded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DrawExpirationTimeNotReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20TransferFail\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20TransferFromFail\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721TransferFromFail\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientNativeTokensSupplied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCurrency\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFeeRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPricingOption\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPrize\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPrizesCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStatus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWinnersCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaximumEntriesPerParticipantReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaximumEntriesReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAContract\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PrizeAlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RandomnessRequestAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RandomnessRequestDoesNotExist\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"currencies\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\"}],\"name\":\"CurrenciesStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint208\",\"name\":\"amount\",\"type\":\"uint208\"}],\"name\":\"EntryRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"entriesCount\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"uint208\",\"name\":\"price\",\"type\":\"uint208\"}],\"name\":\"EntrySold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"feePrice\",\"type\":\"uint40\"}],\"name\":\"FeePriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"FeeRecipientUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeesClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"name\":\"IncreaseRaffleId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"winnerIndex\",\"type\":\"uint256[]\"}],\"name\":\"PrizesClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IRaffleVRF.RaffleStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"RaffleStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requeestId\",\"type\":\"uint256\"}],\"name\":\"RandomnessRequested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"KEY_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_NUMBER_OF_PRIZES_PER_RAFFLE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_NUMBER_OF_WINNERS_PER_RAFFLE\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICING_OPTIONS_PER_RAFFLE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REQUEST_CONFIRMATIONS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SELECT_WINNERS_LIMIT\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUBSCRIPTION_ID\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTInterface\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VRF_COORDINATOR\",\"outputs\":[{\"internalType\":\"contract VRFCoordinatorV2Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"name\":\"claimFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isMinimumEntriesFixed\",\"type\":\"bool\"},{\"internalType\":\"uint40\",\"name\":\"minimumEntries\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"maximumEntriesPerParticipant\",\"type\":\"uint40\"},{\"components\":[{\"internalType\":\"uint40\",\"name\":\"winnersCount\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"cumulativeWinnersCount\",\"type\":\"uint40\"},{\"internalType\":\"enum IRaffleVRF.TokenType\",\"name\":\"prizeType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"prizeTier\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"prizeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"prizeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prizeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IRaffleVRF.Prize[]\",\"name\":\"prizes\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint40\",\"name\":\"entriesCount\",\"type\":\"uint40\"},{\"internalType\":\"uint208\",\"name\":\"price\",\"type\":\"uint208\"}],\"internalType\":\"struct IRaffleVRF.PricingOption[5]\",\"name\":\"pricingOptions\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct IRaffleVRF.CreateRaffleCalldata\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createRaffle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricingOptionIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct IRaffleVRF.EntryCalldata[]\",\"name\":\"entries\",\"type\":\"tuple[]\"}],\"name\":\"enterRaffles\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePrice\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"name\":\"getEntries\",\"outputs\":[{\"components\":[{\"internalType\":\"uint40\",\"name\":\"currentEntryIndex\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"internalType\":\"struct IRaffleVRF.Entry[]\",\"name\":\"entries\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"name\":\"getPricingOptions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint40\",\"name\":\"entriesCount\",\"type\":\"uint40\"},{\"internalType\":\"uint208\",\"name\":\"price\",\"type\":\"uint208\"}],\"internalType\":\"struct IRaffleVRF.PricingOption[5]\",\"name\":\"pricingOptions\",\"type\":\"tuple[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"name\":\"getPrizes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint40\",\"name\":\"winnersCount\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"cumulativeWinnersCount\",\"type\":\"uint40\"},{\"internalType\":\"enum IRaffleVRF.TokenType\",\"name\":\"prizeType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"prizeTier\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"prizeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"prizeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prizeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IRaffleVRF.Prize[]\",\"name\":\"prizes\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"name\":\"getWinners\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"prizeIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint40\",\"name\":\"entryIndex\",\"type\":\"uint40\"}],\"internalType\":\"struct IRaffleVRF.Winner[]\",\"name\":\"winners\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"name\":\"getWinnersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"winnersCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isCurrencyAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"raffles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"enum IRaffleVRF.RaffleStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isMinimumEntriesFixed\",\"type\":\"bool\"},{\"internalType\":\"uint40\",\"name\":\"drawnAt\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"minimumEntries\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"maximumEntriesPerParticipant\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"selectWinnersStartPosition\",\"type\":\"uint256\"},{\"internalType\":\"uint208\",\"name\":\"claimableFees\",\"type\":\"uint208\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rafflesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rafflesParticipantsStats\",\"outputs\":[{\"internalType\":\"uint208\",\"name\":\"amountPaid\",\"type\":\"uint208\"},{\"internalType\":\"uint40\",\"name\":\"entriesCount\",\"type\":\"uint40\"},{\"internalType\":\"bool\",\"name\":\"refunded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"randomnessRequests\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint248\",\"name\":\"randomWord\",\"type\":\"uint248\"},{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"selectWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"_feePrice\",\"type\":\"uint40\"}],\"name\":\"setFeePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"currencies\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\"}],\"name\":\"updateCurrenciesStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimFees(uint256)\":{\"params\":{\"raffleId\":\"The id of the raffle.\"}},\"constructor\":{\"params\":{\"_feeRecipient\":\"The recipient of the fees\",\"_usdtInterface\":\"The USDT address\"}},\"createRaffle((bool,uint40,uint40,(uint40,uint40,uint8,uint8,address,uint256,uint256)[],(uint40,uint208)[5]))\":{\"params\":{\"params\":\"The parameters of the raffle.\"},\"returns\":{\"raffleId\":\"The id of the newly created raffle.\"}},\"enterRaffles((uint256,uint256)[])\":{\"params\":{\"entries\":\"The entries to be made.\"}},\"getEntries(uint256)\":{\"params\":{\"raffleId\":\"The id of the raffle.\"},\"returns\":{\"entries\":\"The entries entered for the raffle.\"}},\"getPricingOptions(uint256)\":{\"params\":{\"raffleId\":\"The id of the raffle.\"},\"returns\":{\"pricingOptions\":\"The pricing options for the raffle.\"}},\"getPrizes(uint256)\":{\"params\":{\"raffleId\":\"The id of the raffle.\"},\"returns\":{\"prizes\":\"The prizes to be distributed.\"}},\"getWinners(uint256)\":{\"params\":{\"raffleId\":\"The id of the raffle.\"},\"returns\":{\"winners\":\"The winners of the raffle.\"}},\"getWinnersCount(uint256)\":{\"params\":{\"raffleId\":\"The id of the raffle.\"},\"returns\":{\"winnersCount\":\"The count of winners.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"selectWinners(uint256)\":{\"params\":{\"requestId\":\"The request id returned by Chainlink.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateCurrenciesStatus(address[],bool)\":{\"details\":\"Only callable by owner.\",\"params\":{\"currencies\":\"Currency addresses (address(0) for ETH)\",\"isAllowed\":\"Whether the currencies should be allowed for trading\"}}},\"stateVariables\":{\"raffles\":{\"details\":\"The key is the raffle ID.\"},\"randomnessRequests\":{\"details\":\"The key is the request ID returned by Chainlink.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"KEY_HASH()\":{\"notice\":\"The key hash of the Chainlink VRF.\"},\"MAXIMUM_NUMBER_OF_PRIZES_PER_RAFFLE()\":{\"notice\":\"The maximum number of prizes per raffle.         Each individual ERC-721 counts as one prize.         Each ETH/ERC-20 with winnersCount > 1 counts as one prize.\"},\"MAXIMUM_NUMBER_OF_WINNERS_PER_RAFFLE()\":{\"notice\":\"The maximum number of winners per raffle.\"},\"PRICING_OPTIONS_PER_RAFFLE()\":{\"notice\":\"The number of pricing options per raffle.\"},\"REQUEST_CONFIRMATIONS()\":{\"notice\":\"A Chainlink node should wait for 3 confirmations before responding.\"},\"SUBSCRIPTION_ID()\":{\"notice\":\"The subscription ID of the Chainlink VRF.\"},\"VRF_COORDINATOR()\":{\"notice\":\"The Chainlink VRF coordinator.\"},\"claimFees(uint256)\":{\"notice\":\"Claims the fees collected for a raffle.\"},\"createRaffle((bool,uint40,uint40,(uint40,uint40,uint8,uint8,address,uint256,uint256)[],(uint40,uint208)[5]))\":{\"notice\":\"Creates a new raffle.\"},\"enterRaffles((uint256,uint256)[])\":{\"notice\":\"Enters a raffle or multiple raffles.\"},\"feeRecipient()\":{\"notice\":\"The fee recipient.\"},\"getEntries(uint256)\":{\"notice\":\"Gets the entries for a raffle.\"},\"getPricingOptions(uint256)\":{\"notice\":\"Gets the pricing options for a raffle.\"},\"getPrizes(uint256)\":{\"notice\":\"Gets the prizes for a raffle.\"},\"getWinners(uint256)\":{\"notice\":\"Gets the winners for a raffle.\"},\"getWinnersCount(uint256)\":{\"notice\":\"Get count of winners.\"},\"isCurrencyAllowed(address)\":{\"notice\":\"It checks whether the currency is allowed.\"},\"raffles(uint256)\":{\"notice\":\"The raffles created.\"},\"rafflesCount()\":{\"notice\":\"The number of raffles created.\"},\"randomnessRequests(uint256)\":{\"notice\":\"The randomness requests.\"},\"selectWinners(uint256)\":{\"notice\":\"Select the winners for a raffle based on the random words returned by Chainlink.\"},\"updateCurrenciesStatus(address[],bool)\":{\"notice\":\"This function allows the owner to update currency statuses.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RaffleVRF.sol\":\"RaffleWithVRF\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"contracts/RaffleVRF.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./interfaces/IRaffleVRF.sol\\\";\\nimport \\\"./interfaces/generic/IERC20.sol\\\";\\nimport \\\"./libraries/Arrays.sol\\\";\\nimport \\\"./libraries/Ownable.sol\\\";\\nimport \\\"./libraries/ReentrancyGuard.sol\\\";\\n\\nimport { VRFConsumerBaseV2 } from \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport { VRFCoordinatorV2Interface } from \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\n\\ncontract RaffleWithVRF is IRaffleVRF, VRFConsumerBaseV2, Ownable, ReentrancyGuard {\\n\\tusing Arrays for uint256[];\\n\\n    IERC20 public USDTInterface;\\n\\n    /**\\n     * @notice The number of raffles created.\\n     */\\n    uint256 public rafflesCount;\\n\\n    /**\\n     * @notice The raffles created.\\n     * @dev The key is the raffle ID.\\n     */\\n    mapping(uint256 => Raffle) public raffles;\\n\\n    mapping(uint256 => mapping(address => ParticipantStats)) public rafflesParticipantsStats;\\n\\n    /**\\n     * @notice It checks whether the currency is allowed.\\n     */\\n    mapping(address => bool) public isCurrencyAllowed;\\n\\n    /**\\n     * @notice The maximum number of prizes per raffle.\\n     *         Each individual ERC-721 counts as one prize.\\n     *         Each ETH/ERC-20 with winnersCount > 1 counts as one prize.\\n     */\\n    uint256 public constant MAXIMUM_NUMBER_OF_PRIZES_PER_RAFFLE = 20;\\n\\n    /**\\n     * @notice The maximum number of winners per raffle.\\n     */\\n    uint40 public constant MAXIMUM_NUMBER_OF_WINNERS_PER_RAFFLE = 2500;\\n\\n    uint40 public constant SELECT_WINNERS_LIMIT = 1000;\\n\\n    /**\\n     * @notice The fee recipient.\\n     */\\n    address public feeRecipient;\\n\\n    uint40 public feePrice = 5e4; // fee is $0.05\\n\\n    /**\\n     * @notice The number of pricing options per raffle.\\n     */\\n    uint256 public constant PRICING_OPTIONS_PER_RAFFLE = 5;\\n\\n    /**\\n     * @notice A Chainlink node should wait for 3 confirmations before responding.\\n     */\\n    uint16 public constant REQUEST_CONFIRMATIONS = 3;\\n\\n    /**\\n     * @notice The key hash of the Chainlink VRF.\\n     */\\n    bytes32 public immutable KEY_HASH;\\n\\n    /**\\n     * @notice The subscription ID of the Chainlink VRF.\\n     */\\n    uint64 public immutable SUBSCRIPTION_ID;\\n\\n    /**\\n     * @notice The Chainlink VRF coordinator.\\n     */\\n    VRFCoordinatorV2Interface public immutable VRF_COORDINATOR;\\n\\n    /**\\n     * @notice The randomness requests.\\n     * @dev The key is the request ID returned by Chainlink.\\n     */\\n    mapping(uint256 => RandomnessRequest) public randomnessRequests;\\n\\n    uint256 private latestRequestId;\\n\\n    /**\\n     * @param _feeRecipient The recipient of the fees\\n     * @param _usdtInterface The USDT address\\n     */\\n    constructor( \\n        bytes32 _keyHash,\\n        uint64 _subscriptionId,\\n        address _vrfCoordinator,\\n        address _usdtInterface, \\n        address _feeRecipient\\n    ) VRFConsumerBaseV2(_vrfCoordinator) {\\n        require(_usdtInterface != address(0), \\\"Zero USDT Interface Address\\\");\\n\\n        if(_feeRecipient == address(0)) {\\n            _setFeeRecipient(msg.sender);\\n        } else {\\n            _setFeeRecipient(_feeRecipient);\\n        }\\n\\n        KEY_HASH = _keyHash;\\n        VRF_COORDINATOR = VRFCoordinatorV2Interface(_vrfCoordinator);\\n        SUBSCRIPTION_ID = _subscriptionId;\\n        USDTInterface = IERC20(_usdtInterface);\\n    }\\n\\n    function createRaffle(CreateRaffleCalldata calldata params) external onlyOwner returns(uint256 raffleId) {\\n        raffleId = ++rafflesCount;\\n\\n        uint256 prizesCount = params.prizes.length;\\n        if (prizesCount == 0 || prizesCount > MAXIMUM_NUMBER_OF_PRIZES_PER_RAFFLE) {\\n            revert InvalidPrizesCount();\\n        }\\n\\n        Raffle storage raffle = raffles[raffleId];\\n\\n        uint40 cumulativeWinnersCount;\\n\\t\\tuint8 currentPrizeTier;\\n\\t\\tfor(uint256 i = 0; i < prizesCount; i ++) {\\n\\t\\t\\tPrize memory prize = params.prizes[i];\\n\\n\\t\\t\\tif(prize.prizeTier < currentPrizeTier) {\\n\\t\\t\\t\\trevert InvalidPrize();\\n\\t\\t\\t}\\n\\t\\t\\t_validatePrize(prize);\\n\\n\\t\\t\\tcumulativeWinnersCount += prize.winnersCount;\\n\\t\\t\\tprize.cumulativeWinnersCount = cumulativeWinnersCount;\\n\\t\\t\\tcurrentPrizeTier = prize.prizeTier;\\n\\n\\t\\t\\traffle.prizes.push(prize);\\n\\t\\t}\\n\\n\\t\\tuint40 minimumEntries = params.minimumEntries;\\n\\t\\tif (cumulativeWinnersCount > minimumEntries || cumulativeWinnersCount > MAXIMUM_NUMBER_OF_WINNERS_PER_RAFFLE) {\\n            revert InvalidWinnersCount();\\n        }\\n\\n        _validateAndSetPricingOptions(raffleId, params.pricingOptions);\\n\\n        raffle.owner = msg.sender;\\n        raffle.isMinimumEntriesFixed = params.isMinimumEntriesFixed;\\n        raffle.minimumEntries = minimumEntries;\\n        raffle.maximumEntriesPerParticipant = params.maximumEntriesPerParticipant;\\n        raffle.selectWinnersStartPosition = 0;\\n\\n        _setRaffleStatus(raffle, raffleId, RaffleStatus.Open);\\n    }\\n\\n    function enterRaffles(EntryCalldata[] calldata entries) external payable nonReentrant {\\n    \\tuint256 entriesCount = entries.length;\\n    \\tuint208 expectedUSDTValue;\\n    \\tuint256 userUSDTBalance = USDTInterface.allowance(msg.sender, address(this));\\n\\n    \\tfor (uint256 i = 0; i < entriesCount; i ++) {\\n    \\t\\tEntryCalldata calldata entry = entries[i];\\n\\n    \\t\\tif (entry.pricingOptionIndex >= PRICING_OPTIONS_PER_RAFFLE) {\\n          revert InvalidIndex();\\n        }\\n\\n        uint256 raffleId = entry.raffleId;\\n        Raffle storage raffle = raffles[raffleId];\\n\\n        _validateRaffleStatus(raffle, RaffleStatus.Open);\\n\\n        PricingOption memory pricingOption = raffle.pricingOptions[entry.pricingOptionIndex];\\n\\n        uint40 newParticipantEntriesCount = rafflesParticipantsStats[raffleId][msg.sender].entriesCount + pricingOption.entriesCount;\\n        if (newParticipantEntriesCount > raffle.maximumEntriesPerParticipant) {\\n            revert MaximumEntriesPerParticipantReached();\\n        }\\n        rafflesParticipantsStats[raffleId][msg.sender].entriesCount = newParticipantEntriesCount;\\n\\n        uint208 price = pricingOption.price;\\n        expectedUSDTValue += price;\\n\\n        if (expectedUSDTValue > userUSDTBalance) {\\n          revert(string(\\\"Insufficient balance\\\"));\\n        }\\n        \\n        uint40 currentEntryIndex;\\n        uint256 raffleEntriesCount = raffle.entries.length;\\n        if (raffleEntriesCount == 0) {\\n            currentEntryIndex = uint40(pricingOption.entriesCount - 1);\\n        } else {\\n            currentEntryIndex = raffle.entries[raffleEntriesCount - 1].currentEntryIndex + pricingOption.entriesCount;\\n        }\\n\\n        if (raffle.isMinimumEntriesFixed) {\\n            if (currentEntryIndex >= raffle.minimumEntries) {\\n                revert MaximumEntriesReached();\\n            }\\n        }\\n\\n        raffle.entries.push(Entry({currentEntryIndex: currentEntryIndex, participant: msg.sender}));\\n        raffle.claimableFees += price;\\n\\n        rafflesParticipantsStats[raffleId][msg.sender].amountPaid += price;\\n\\n        emit EntrySold(raffleId, msg.sender, pricingOption.entriesCount, price);\\n\\n        if (currentEntryIndex >= (raffle.minimumEntries - 1)) {\\n            _drawWinners(raffleId, raffle);\\n        }\\n    \\t}\\n\\n    \\tUSDTInterface.transferFrom(msg.sender, address(this), expectedUSDTValue);\\n    }\\n\\n    /**\\n     * @param _requestId The ID of the request\\n     * @param _randomWords The random words returned by Chainlink\\n     */\\n    function fulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) internal override {\\n        if (randomnessRequests[_requestId].exists && latestRequestId == _requestId) {\\n            uint256 raffleId = randomnessRequests[_requestId].raffleId;\\n            Raffle storage raffle = raffles[raffleId];\\n\\n            if (raffle.status == RaffleStatus.Drawing) {\\n                _setRaffleStatus(raffle, raffleId, RaffleStatus.RandomnessFulfilled);\\n                // We ignore the most significant byte to pack the random word with `exists`\\n                randomnessRequests[_requestId].randomWord = uint248(_randomWords[0]);\\n            }\\n        }\\n    }\\n\\n    function selectWinners(uint256 requestId) external {\\n        RandomnessRequest memory randomnessRequest = randomnessRequests[requestId];\\n        if(!randomnessRequest.exists) {\\n            revert RandomnessRequestDoesNotExist();\\n        }\\n\\n        uint256 raffleId = randomnessRequest.raffleId;\\n        Raffle storage raffle = raffles[raffleId];\\n        _validateRaffleStatus(raffle, RaffleStatus.RandomnessFulfilled);\\n\\n        address raffleOwner = raffle.owner;\\n        if(msg.sender != raffleOwner) {\\n            _validateCaller(owner());\\n        }\\n\\n        Prize[] storage prizes = raffle.prizes;\\n        uint256 prizesCount = prizes.length;\\n        uint256 winnersCount = prizes[prizesCount - 1].cumulativeWinnersCount;\\n\\n        Entry[] memory entries = raffle.entries;\\n        uint256 entriesCount = entries.length;\\n        uint256 currentEntryIndex = uint256(entries[entriesCount - 1].currentEntryIndex);\\n          \\n        uint256[] memory currentEntryIndexArray = new uint256[](entriesCount);\\n        for (uint256 i = 0 ; i < entriesCount ; i ++) {\\n            currentEntryIndexArray[i] = entries[i].currentEntryIndex;\\n        }\\n\\n        uint256[] memory cumulativeWinnersCountArray = new uint256[](prizesCount);\\n        for (uint256 i = 0 ; i < prizesCount; i ++) {\\n            cumulativeWinnersCountArray[i] = prizes[i].cumulativeWinnersCount;\\n        }\\n\\n        uint256 randomWord = randomnessRequest.randomWord;\\n\\n        uint40 cnt;\\n        uint256 j = raffle.selectWinnersStartPosition;\\n\\n        for(j; j < winnersCount && cnt < SELECT_WINNERS_LIMIT; j ++) {\\n            uint256 winningEntry = randomWord % (currentEntryIndex + 1);\\n            raffle.winners.push(\\n                Winner({\\n                    participant: entries[currentEntryIndexArray.findUpperBound(winningEntry)].participant,\\n                    claimed: false,\\n                    prizeIndex: uint8(cumulativeWinnersCountArray.findUpperBound(j + 1)),\\n                    entryIndex: uint40(winningEntry)\\n                })\\n            );\\n            cnt ++;\\n            randomWord = uint256(keccak256(abi.encodePacked(randomWord)));\\n        }\\n\\t\\t\\n        raffle.selectWinnersStartPosition = j;\\n        if(raffle.selectWinnersStartPosition >= winnersCount) {\\n            _setRaffleStatus(raffle, raffleId, RaffleStatus.Drawn);\\n        }\\n\\n        // for(uint256 i; i < winnersCount; i ++) {\\n        //     uint256 winningEntry = randomWord % (currentEntryIndex + 1);\\n        //     raffle.winners.push(\\n        //         Winner({\\n        //             participant: entries[currentEntryIndexArray.findUpperBound(winningEntry)].participant,\\n        //             claimed: false,\\n        //             prizeIndex: uint8(cumulativeWinnersCountArray.findUpperBound(i + 1)),\\n        //             entryIndex: uint40(winningEntry)\\n        //         })\\n        //     );\\n\\n        //     randomWord = uint256(keccak256(abi.encodePacked(randomWord)));\\n        // }\\n\\n\\t\\t// _setRaffleStatus(raffle, raffleId, RaffleStatus.Drawn);\\n    }\\n\\n    function claimFees(uint256 raffleId) external nonReentrant() {\\n        Raffle storage raffle = raffles[raffleId];\\n        _validateRaffleStatus(raffle, RaffleStatus.Drawn);\\n\\n        address raffleOwner = raffle.owner;\\n        if(msg.sender != raffleOwner) {\\n            _validateCaller(owner());\\n        }\\n\\n        Entry[] memory entries = raffle.entries;\\n\\t\\tuint256 entriesCount = entries.length;\\n\\t\\tuint256 currentEntryIndex = uint256(entries[entriesCount - 1].currentEntryIndex);\\n\\n        uint256 cliamableFee = raffle.claimableFees;\\n        uint256 protocolFees = feePrice * (currentEntryIndex + 1);\\n\\n        require(USDTInterface.approve(address(this), cliamableFee), \\\"USDT approve failed\\\");\\n\\n        cliamableFee = cliamableFee - protocolFees;\\n\\n        USDTInterface.transferFrom(address(this), feeRecipient, protocolFees);\\n        USDTInterface.transferFrom(address(this), msg.sender, cliamableFee);\\n\\n        raffle.claimableFees = 0;\\n\\n        _setRaffleStatus(raffle, raffleId, RaffleStatus.Complete);\\n\\n        emit FeesClaimed(raffleId, protocolFees + cliamableFee);\\n    }\\n\\n    function updateCurrenciesStatus(address[] calldata currencies, bool isAllowed) external onlyOwner {\\n        uint256 count = currencies.length;\\n        for (uint256 i = 0 ; i < count; i ++) {\\n            isCurrencyAllowed[currencies[i]] = isAllowed;\\n        }\\n        emit CurrenciesStatusUpdated(currencies, isAllowed);\\n    }\\n    \\n    function setFeeRecipient(address _feeRecipient) external onlyOwner {\\n        _setFeeRecipient(_feeRecipient);\\n    }\\n\\n    function setFeePrice(uint40 _feePrice) external onlyOwner {\\n        _setFeePrice(_feePrice);\\n    }\\n\\n    function getWinners(uint256 raffleId) external view returns (Winner[] memory winners) {\\n        winners = raffles[raffleId].winners;\\n    }\\n\\n    function getPrizes(uint256 raffleId) external view returns (Prize[] memory prizes) {\\n        prizes = raffles[raffleId].prizes;\\n    }\\n\\n    function getEntries(uint256 raffleId) external view returns (Entry[] memory entries) {\\n        entries = raffles[raffleId].entries;\\n    }\\n\\n    function getPricingOptions(uint256 raffleId) external view returns (PricingOption[PRICING_OPTIONS_PER_RAFFLE] memory pricingOptions) {\\n        pricingOptions = raffles[raffleId].pricingOptions;\\n    }\\n\\n    function getLatestRequestId() external view returns (uint256) {\\n      return latestRequestId;\\n    }\\n\\n    function getWinnersCount(uint256 raffleId) external view returns (uint256 winnersCount) {\\n        require(raffleId > 0 && raffleId <= rafflesCount, \\\"Invalid raffle ID\\\");\\n\\n        Raffle memory raffle = raffles[raffleId];\\n        Prize[] memory prizes = raffle.prizes;\\n\\t\\tuint256 prizesCount = prizes.length;\\n\\t\\twinnersCount = prizes[prizesCount - 1].cumulativeWinnersCount;\\n    }\\n\\n    /**\\n     * @param raffleId The ID of the raffle to draw winners for.\\n     * @param raffle The raffle to draw winners for.\\n     */\\n    function _drawWinners(uint256 raffleId, Raffle storage raffle) private {\\n        _setRaffleStatus(raffle, raffleId, RaffleStatus.Drawing);\\n        raffle.drawnAt = uint40(block.timestamp);\\n\\n        uint256 requestId = VRF_COORDINATOR.requestRandomWords(\\n            KEY_HASH,\\n            SUBSCRIPTION_ID,\\n            REQUEST_CONFIRMATIONS,\\n            uint32(500_000),\\n            uint32(1)\\n        );\\n\\n        latestRequestId = requestId;\\n\\n        if (randomnessRequests[requestId].exists) {\\n            revert RandomnessRequestAlreadyExists();\\n        }\\n\\n        randomnessRequests[requestId].exists = true;\\n        randomnessRequests[requestId].raffleId = raffleId;\\n\\n        emit RandomnessRequested(raffleId, requestId);\\n    }\\n\\n    /**\\n     * @param raffleId The ID of the raffle.\\n     * @param pricingOptions The pricing options for the raffle.\\n     */\\n    function _validateAndSetPricingOptions(uint256 raffleId, PricingOption[PRICING_OPTIONS_PER_RAFFLE] calldata pricingOptions) private {\\n        for (uint256 i = 0 ; i < PRICING_OPTIONS_PER_RAFFLE; i ++) {\\n            PricingOption memory pricingOption = pricingOptions[i];\\n\\n            uint40 entriesCount = pricingOption.entriesCount;\\n            uint208 price = pricingOption.price;\\n\\n            if (entriesCount == 0 || price == 0) {\\n                revert InvalidPricingOption();\\n            }\\n\\n            raffles[raffleId].pricingOptions[i] = pricingOption;\\n        }\\n    }\\n\\n    /**\\n     * @param prize The prize.\\n     */\\n    function _validatePrize(Prize memory prize) private view {\\n        if (prize.prizeType == TokenType.ERC721) {\\n            if (prize.prizeAmount != 1 || prize.winnersCount != 1) {\\n                revert InvalidPrize();\\n            }\\n        } else {\\n            if (prize.prizeType == TokenType.ERC20) {\\n                if (!isCurrencyAllowed[prize.prizeAddress]) {\\n                    revert InvalidCurrency();\\n                }\\n            }\\n\\n            if (prize.prizeAmount == 0 || prize.winnersCount == 0) {\\n                revert InvalidPrize();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @param raffle The raffle to check the status of.\\n     * @param status The expected status of the raffle\\n     */\\n    function _validateRaffleStatus(Raffle storage raffle, RaffleStatus status) private view {\\n        if (raffle.status != status) {\\n            revert InvalidStatus();\\n        }\\n    }\\n\\n    /**\\n     * @param caller The expected caller.\\n     */\\n    function _validateCaller(address caller) private view {\\n        if (msg.sender != caller) {\\n            revert InvalidCaller();\\n        }\\n    }\\n\\n    /**\\n     * @param _feeRecipient The new fee recipient address\\n     */\\n    function _setFeeRecipient(address _feeRecipient) private {\\n        if (_feeRecipient == address(0)) {\\n            revert InvalidFeeRecipient();\\n        }\\n        feeRecipient = _feeRecipient;\\n\\n        emit FeeRecipientUpdated(_feeRecipient);\\n    }\\n\\n    function _setFeePrice(uint40 _feePrice) private {\\n        require(_feePrice > 0, \\\"Invalid fee price\\\");\\n\\n        feePrice = _feePrice;\\n\\n        emit FeePriceUpdated(_feePrice);\\n    }\\n\\n    /**\\n     * @param raffle The raffle to set the status of.\\n     * @param raffleId The ID of the raffle to set the status of.\\n     * @param status The status to set.\\n     */\\n    function _setRaffleStatus(Raffle storage raffle, uint256 raffleId, RaffleStatus status) private {\\n        raffle.status = status;\\n        \\n        emit RaffleStatusUpdated(raffleId, status);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xf684f724911eee679ac5a23179f3e0ef9fb6249348cd4e6307c84788dcb52555\",\"license\":\"MIT\"},\"contracts/interfaces/IRaffleVRF.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IRaffleVRF {\\n    enum RaffleStatus {\\n        None,\\n        Open,\\n        Drawing,\\n        RandomnessFulfilled,\\n        Drawn,\\n        Complete\\n    }\\n\\n    enum TokenType {\\n        ERC721,\\n        ERC20\\n    }\\n\\n    /**\\n     * @param entriesCount The number of entries that can be purchased for the given price.\\n     * @param price The price of the entries.\\n     */\\n    struct PricingOption {\\n        uint40 entriesCount;\\n        uint208 price;\\n    }\\n\\n    /**\\n     * @param currentEntryIndex The cumulative number of entries in the raffle.\\n     * @param participant The address of the participant.\\n     */\\n    struct Entry {\\n        uint40 currentEntryIndex;\\n        address participant;\\n    }\\n\\n    /**\\n     * @param participant The address of the winner.\\n     * @param claimed Whether the winner has claimed the prize.\\n     * @param prizeIndex The index of the prize that was won.\\n     * @param entryIndex The index of the entry that won.\\n     */\\n    struct Winner {\\n        address participant;\\n        bool claimed;\\n        uint8 prizeIndex;\\n        uint40 entryIndex;\\n    }\\n\\n    /**\\n     * @param winnersCount The number of winners.\\n     * @param cumulativeWinnersCount The cumulative number of winners in the raffle.\\n     * @param prizeType The type of the prize.\\n     * @param prizeTier The tier of the prize.\\n     * @param prizeAddress The address of the prize.\\n     * @param prizeId The id of the prize.\\n     * @param prizeAmount The amount of the prize.\\n     */\\n    struct Prize {\\n        uint40 winnersCount;\\n        uint40 cumulativeWinnersCount;\\n        TokenType prizeType;\\n        uint8 prizeTier;\\n        address prizeAddress;\\n        uint256 prizeId;\\n        uint256 prizeAmount;\\n    }\\n\\n    /**\\n     * @param owner The address of the raffle owner.\\n     * @param status The status of the raffle.\\n     * @param isMinimumEntriesFixed Whether the minimum number of entries is fixed.\\n     * @param drawnAt The time at which the raffle was drawn.\\n     * @param minimumEntries The minimum number of entries required to draw the raffle.\\n     * @param maximumEntriesPerParticipant The maximum number of entries allowed per participant.\\n     * @param claimableFees The amount of fees collected from selling entries.\\n     * @param pricingOptions The pricing options for the raffle.\\n     * @param prizes The prizes to be distributed.\\n     * @param entries The entries that have been sold.\\n     * @param winners The winners of the raffle.\\n     */\\n    struct Raffle {\\n        address owner;\\n        RaffleStatus status;\\n        bool isMinimumEntriesFixed;\\n        uint40 drawnAt;\\n        uint40 minimumEntries;\\n        uint40 maximumEntriesPerParticipant;\\n        uint256 selectWinnersStartPosition;\\n        uint208 claimableFees;\\n        PricingOption[5] pricingOptions;\\n        Prize[] prizes;\\n        Entry[] entries;\\n        Winner[] winners;\\n    }\\n\\n    /**\\n     * @param amountPaid The amount paid by the participant.\\n     * @param entriesCount The number of entries purchased by the participant.\\n     * @param refunded Whether the participant has been refunded.\\n     */\\n    struct ParticipantStats {\\n        uint208 amountPaid;\\n        uint40 entriesCount;\\n        bool refunded;\\n    }\\n\\n    /**\\n     * @param raffleId The id of the raffle.\\n     * @param pricingOptionIndex The index of the selected pricing option.\\n     */\\n    struct EntryCalldata {\\n        uint256 raffleId;\\n        uint256 pricingOptionIndex;\\n    }\\n\\n    /**\\n     * @param minimumEntries The minimum number of entries required to draw the raffle.\\n     * @param isMinimumEntriesFixed Whether the minimum number of entries is fixed.\\n     * @param maximumEntriesPerParticipant The maximum number of entries allowed per participant.\\n     * @param prizes The prizes to be distributed.\\n     * @param pricingOptions The pricing options for the raffle.\\n     */\\n    struct CreateRaffleCalldata {\\n        bool isMinimumEntriesFixed;\\n        uint40 minimumEntries;\\n        uint40 maximumEntriesPerParticipant;\\n        Prize[] prizes;\\n        PricingOption[5] pricingOptions;\\n    }\\n\\n    struct ClaimPrizesCalldata {\\n        uint256 raffleId;\\n        uint256[] winnerIndices;\\n    }\\n\\n    /**\\n     * @param exists Whether the request exists.\\n     * @param raffleId The id of the raffle.\\n     * @param randomWord The random words returned by Chainlink VRF.\\n     *                   If randomWord == 0, then the request is still pending.\\n     */\\n    struct RandomnessRequest {\\n        bool exists;\\n        uint248 randomWord;\\n        uint256 raffleId;\\n    }\\n\\n    event CurrenciesStatusUpdated(address[] currencies, bool isAllowed);\\n    event EntryRefunded(uint256 raffleId, address buyer, uint208 amount);\\n    event EntrySold(uint256 raffleId, address buyer, uint40 entriesCount, uint208 price);\\n    event FeesClaimed(uint256 raffleId, uint256 amount);\\n    event PrizesClaimed(uint256 raffleId, uint256[] winnerIndex);\\n    event FeeRecipientUpdated(address feeRecipient);\\n    event FeePriceUpdated(uint40 feePrice);\\n    event RaffleStatusUpdated(uint256 raffleId, RaffleStatus status);\\n    event RandomnessRequested(uint256 raffleId, uint256 requeestId);\\n\\n    event IncreaseRaffleId(uint256 raffleId);\\n\\n\\n    error AlreadyRefunded();\\n    error DrawExpirationTimeNotReached();\\n    error InsufficientNativeTokensSupplied();\\n    error InvalidCaller();\\n    error InvalidCurrency();\\n    error InvalidIndex();\\n    error InvalidPricingOption();\\n    error InvalidPrize();\\n    error InvalidPrizesCount();\\n    error InvalidFeeRecipient();\\n    error InvalidStatus();\\n    error InvalidWinnersCount();\\n    error ERC721TransferFromFail();\\n    error ERC20TransferFromFail();\\n    error ERC20TransferFail();\\n    error MaximumEntriesPerParticipantReached();\\n    error MaximumEntriesReached();\\n    error NotAContract();\\n    error PrizeAlreadyClaimed();\\n    error RandomnessRequestDoesNotExist();\\n    error RandomnessRequestAlreadyExists();\\n\\n    /**\\n     * @notice Creates a new raffle.\\n     * @param params The parameters of the raffle.\\n     * @return raffleId The id of the newly created raffle.\\n     */\\n    function createRaffle(CreateRaffleCalldata calldata params) external returns (uint256 raffleId);\\n\\n    /**\\n     * @notice Deposits prizes for a raffle.\\n     * @param raffleId The id of the raffle.\\n     */\\n    // function depositPrizes(uint256 raffleId) external payable;\\n\\n    /**\\n     * @notice Enters a raffle or multiple raffles.\\n     * @param entries The entries to be made.\\n     */\\n    function enterRaffles(EntryCalldata[] calldata entries) external payable;\\n\\n    /**\\n     * @notice Select the winners for a raffle based on the random words returned by Chainlink.\\n     * @param requestId The request id returned by Chainlink.\\n     */\\n    function selectWinners(uint256 requestId) external;\\n\\n    /**\\n     * @notice Claims the prizes for a winner. A winner can claim multiple prizes\\n     *         from multiple raffles in a single transaction.\\n     * @param claimPrizesCalldata The calldata for claiming prizes.\\n     */\\n    // function claimPrizes(ClaimPrizesCalldata[] calldata claimPrizesCalldata) external;\\n\\n    /**\\n     * @notice Claims the fees collected for a raffle.\\n     * @param raffleId The id of the raffle.\\n     */\\n    function claimFees(uint256 raffleId) external;\\n\\n    /**\\n     * @notice Sets the protocol fee recipient. Only callable by contract owner.\\n     * @param protocolFeeRecipient The protocol fee recipient.\\n     */\\n    function setFeeRecipient(address protocolFeeRecipient) external;\\n    \\n    /**\\n     * @notice Sets the fee price. Only callable by contract owner.\\n     * @param feePrice The fee price.\\n     */\\n    function setFeePrice(uint40 feePrice) external;\\n\\n    /**\\n     * @notice This function allows the owner to update currency statuses.\\n     * @param currencies Currency addresses (address(0) for ETH)\\n     * @param isAllowed Whether the currencies should be allowed for trading\\n     * @dev Only callable by owner.\\n     */\\n    function updateCurrenciesStatus(address[] calldata currencies, bool isAllowed) external;\\n\\n    /**\\n     * @notice Gets the winners for a raffle.\\n     * @param raffleId The id of the raffle.\\n     * @return winners The winners of the raffle.\\n     */\\n    function getWinners(uint256 raffleId) external view returns (Winner[] memory);\\n\\n    /**\\n     * @notice Gets the pricing options for a raffle.\\n     * @param raffleId The id of the raffle.\\n     * @return pricingOptions The pricing options for the raffle.\\n     */\\n    function getPricingOptions(uint256 raffleId) external view returns (PricingOption[5] memory);\\n\\n    /**\\n     * @notice Gets the prizes for a raffle.\\n     * @param raffleId The id of the raffle.\\n     * @return prizes The prizes to be distributed.\\n     */\\n    function getPrizes(uint256 raffleId) external view returns (Prize[] memory);\\n\\n    /**\\n     * @notice Gets the entries for a raffle.\\n     * @param raffleId The id of the raffle.\\n     * @return entries The entries entered for the raffle.\\n     */\\n    function getEntries(uint256 raffleId) external view returns (Entry[] memory);\\n\\n    /**\\n     * @notice Get count of winners.\\n     * @param raffleId The id of the raffle.\\n     * @return winnersCount The count of winners.\\n     */\\n    function getWinnersCount(uint256 raffleId) external view returns (uint256 winnersCount);\\n}\\n\",\"keccak256\":\"0x95e59cf361e1e93a7a998fb2cac638f3cf1a6a46584396d6a051251f8f65d4b7\",\"license\":\"MIT\"},\"contracts/interfaces/generic/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IERC20 {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x00de5900712b4cf6d4eb739d325f83aec5a357b25571aaae440aad43eb1e4f05\",\"license\":\"MIT\"},\"contracts/libraries/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n *      Modified from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Arrays.sol\\n */\\nlibrary Arrays {\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] memory array, uint256 element) internal pure returns (uint256) {\\n        if (array.length == 0) {\\n            return 0;\\n        }\\n\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds down (it does integer division with truncation).\\n            if (array[mid] > element) {\\n                high = mid;\\n            } else {\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && array[low - 1] == element) {\\n            unchecked {\\n                return low - 1;\\n            }\\n        } else {\\n            return low;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa14fe4dbe819f18a45cf2fe450e751de97d14ab10f166fecd49832ea6dc21999\",\"license\":\"MIT\"},\"contracts/libraries/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x7c03cdb0bdf0104db4f87451fc7dd8fb4f94f06dbf176dfc06fd616c1b5937e8\",\"license\":\"MIT\"},\"contracts/libraries/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101ee5760003560e01c806367f082b01161010d578063ac68a748116100a0578063db4f160b1161006f578063db4f160b14610751578063e74b981b14610771578063f2fde38b14610791578063f42df132146107b1578063f597573f146107c457600080fd5b8063ac68a748146106c2578063b190d8a3146106e2578063cc307795146106f7578063d3549ebd1461072457600080fd5b80636b1426a4116100dc5780636b1426a4146105d9578063715018a6146106065780638da5cb5b1461061b578063a17be1541461063957600080fd5b806367f082b01461055c578063689869121461058457806369894cf714610599578063699e9771146105b957600080fd5b806346904840116101855780635a195d19116101545780635a195d19146103ff5780635cb6dfff1461043f5780635d4bc0ce146104ac57806365d697f71461054757600080fd5b806346904840146103625780634d2c53cd1461038257806351dc86a5146103a657806354ad9718146103da57600080fd5b806326d1115a116101c157806326d1115a146102d357806331fe74a9146102ff57806339a2eb2a1461032c5780633b6cb1531461034c57600080fd5b8063030932bb146101f357806305f6a924146102455780631e9f1a82146102915780631fe543e3146102b3575b600080fd5b3480156101ff57600080fd5b506102277f000000000000000000000000000000000000000000000000000000000000000081565b60405167ffffffffffffffff90911681526020015b60405180910390f35b34801561025157600080fd5b506102797f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161023c565b34801561029d57600080fd5b506102b16102ac366004612901565b6107e4565b005b3480156102bf57600080fd5b506102b16102ce3660046129ce565b6108a0565b3480156102df57600080fd5b506102e96103e881565b60405164ffffffffff909116815260200161023c565b34801561030b57600080fd5b5061031f61031a366004612a80565b61092d565b60405161023c9190612a99565b34801561033857600080fd5b506102b1610347366004612a80565b6109ac565b34801561035857600080fd5b506102e96109c481565b34801561036e57600080fd5b50600754610279906001600160a01b031681565b34801561038e57600080fd5b5061039860035481565b60405190815260200161023c565b3480156103b257600080fd5b506103987f000000000000000000000000000000000000000000000000000000000000000081565b3480156103e657600080fd5b506007546102e990600160a01b900464ffffffffff1681565b34801561040b57600080fd5b5061042f61041a366004612b03565b60066020526000908152604090205460ff1681565b604051901515815260200161023c565b34801561044b57600080fd5b5061048761045a366004612a80565b6008602052600090815260409020805460019091015460ff82169161010090046001600160f81b03169083565b6040805193151584526001600160f81b0390921660208401529082015260600161023c565b3480156104b857600080fd5b506105336104c7366004612a80565b60046020526000908152604090208054600182015460028301546003909301546001600160a01b0383169360ff600160a01b8504811694600160a81b81049091169364ffffffffff600160b01b8304811694600160d81b9093048116939116916001600160d01b031688565b60405161023c989796959493929190612b48565b34801561055357600080fd5b50610398601481565b34801561056857600080fd5b50610571600381565b60405161ffff909116815260200161023c565b34801561059057600080fd5b50610398600581565b3480156105a557600080fd5b506103986105b4366004612a80565b610e95565b3480156105c557600080fd5b506102b16105d4366004612bc1565b611263565b3480156105e557600080fd5b506105f96105f4366004612a80565b611277565b60405161023c9190612bdc565b34801561061257600080fd5b506102b161131e565b34801561062757600080fd5b506000546001600160a01b0316610279565b34801561064557600080fd5b50610695610654366004612c55565b60056020908152600092835260408084209091529082529020546001600160d01b03811690600160d01b810464ffffffffff1690600160f81b900460ff1683565b604080516001600160d01b03909416845264ffffffffff909216602084015215159082015260600161023c565b3480156106ce57600080fd5b506102b16106dd366004612a80565b611332565b3480156106ee57600080fd5b50600954610398565b34801561070357600080fd5b50610717610712366004612a80565b611699565b60405161023c9190612c81565b34801561073057600080fd5b5061074461073f366004612a80565b611798565b60405161023c9190612d1c565b34801561075d57600080fd5b5061039861076c366004612d6e565b61181d565b34801561077d57600080fd5b506102b161078c366004612b03565b611b15565b34801561079d57600080fd5b506102b16107ac366004612b03565b611b26565b6102b16107bf366004612daa565b611b9c565b3480156107d057600080fd5b50600254610279906001600160a01b031681565b6107ec612094565b8160005b8181101561085e57826006600087878581811061080f5761080f612e1f565b90506020020160208101906108249190612b03565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558061085681612e4b565b9150506107f0565b507fcb2fef16ee9f3ea43e174daf88ffcdc8beee4ad884c7570093d998d71058698784848460405161089293929190612e64565b60405180910390a150505050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461091f5760405163073e64fd60e21b81523360048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660248201526044015b60405180910390fd5b61092982826120ee565b5050565b6109356128ba565b6000828152600460208190526040808320815160a081019092529092910190600590835b828210156109a157604080518082019091528483015464ffffffffff81168252600160281b90046001600160d01b031660208083019190915290825260019092019101610959565b505050509050919050565b6000818152600860209081526040918290208251606081018452815460ff811615158083526101009091046001600160f81b03169382019390935260019091015492810192909252610a11576040516306dc6a1360e21b815260040160405180910390fd5b6040808201516000818152600460205291909120610a308160036121be565b80546001600160a01b0316338114610a5c57610a5c610a576000546001600160a01b031690565b61220b565b600982018054600082610a70600184612ebb565b81548110610a8057610a80612e1f565b906000526020600020906003020160000160059054906101000a900464ffffffffff1664ffffffffff169050600085600a01805480602002602001604051908101604052809291908181526020016000905b82821015610b1f576000848152602090819020604080518082019091529084015464ffffffffff81168252600160281b90046001600160a01b031681830152825260019092019101610ad2565b5050825192935060009150839050610b38600184612ebb565b81518110610b4857610b48612e1f565b60200260200101516000015164ffffffffff16905060008267ffffffffffffffff811115610b7857610b78612987565b604051908082528060200260200182016040528015610ba1578160200160208202803683370190505b50905060005b83811015610c0357848181518110610bc157610bc1612e1f565b60200260200101516000015164ffffffffff16828281518110610be657610be6612e1f565b602090810291909101015280610bfb81612e4b565b915050610ba7565b5060008667ffffffffffffffff811115610c1f57610c1f612987565b604051908082528060200260200182016040528015610c48578160200160208202803683370190505b50905060005b87811015610cc157888181548110610c6857610c68612e1f565b906000526020600020906003020160000160059054906101000a900464ffffffffff1664ffffffffff16828281518110610ca457610ca4612e1f565b602090810291909101015280610cb981612e4b565b915050610c4e565b5060208c015160028b01546001600160f81b03909116906000905b8881108015610cf357506103e864ffffffffff8316105b15610e69576000610d05876001612ece565b610d0f9085612ef7565b90508d600b0160405180608001604052808b610d34858b61223490919063ffffffff16565b81518110610d4457610d44612e1f565b6020026020010151602001516001600160a01b03168152602001600015158152602001610d7e856001610d779190612ece565b8990612234565b60ff908116825264ffffffffff85811660209384015284546001810186556000958652948390208451950180549385015160408601516060909601516001600160a01b039097166001600160a81b031990951694909417600160a01b941515949094029390931765ffffffffffff60a81b1916600160a81b949092169390930264ffffffffff60b01b191617600160b01b939092169290920217905582610e2481612f0b565b93505083604051602001610e3a91815260200190565b6040516020818303038152906040528051906020012060001c9350508080610e6190612e4b565b915050610cdc565b60028d01819055888110610e8357610e838d8f60046122e6565b50505050505050505050505050505050565b60008082118015610ea857506003548211155b610ee85760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081c9859999b19481251607a1b6044820152606401610916565b60008281526004602090815260408083208151610180810190925280546001600160a01b03811683529192909190830190600160a01b900460ff166005811115610f3457610f34612b1e565b6005811115610f4557610f45612b1e565b8152815460ff600160a81b8204161515602083015264ffffffffff600160b01b82048116604080850191909152600160d81b909204811660608401526001840154166080830152600283015460a08084019190915260038401546001600160d01b031660c0840152815190810190915260e0909101906004830160056000835b8282101561100d57604080518082019091528483015464ffffffffff81168252600160281b90046001600160d01b031660208083019190915290825260019092019101610fc5565b50505050815260200160098201805480602002602001604051908101604052809291908181526020016000905b828210156111015760008481526020908190206040805160e08101825260038602909201805464ffffffffff8082168552600160281b82041694840194909452919290830190600160501b900460ff16600181111561109b5761109b612b1e565b60018111156110ac576110ac612b1e565b81528154600160581b810460ff16602080840191909152600160601b9091046001600160a01b03166040830152600180840154606084015260029093015460809092019190915291835292909201910161103a565b505050508152602001600a8201805480602002602001604051908101604052809291908181526020016000905b8282101561117b576000848152602090819020604080518082019091529084015464ffffffffff81168252600160281b90046001600160a01b03168183015282526001909201910161112e565b505050508152602001600b8201805480602002602001604051908101604052809291908181526020016000905b8282101561121757600084815260209081902060408051608081018252918501546001600160a01b038116835260ff600160a01b82048116151584860152600160a81b8204169183019190915264ffffffffff600160b01b9091041660608201528252600190920191016111a8565b5050509152505061012081015180519192509081611236600183612ebb565b8151811061124657611246612e1f565b60200260200101516020015164ffffffffff169350505050919050565b61126b612094565b6112748161234d565b50565b606060046000838152602001908152602001600020600b01805480602002602001604051908101604052809291908181526020016000905b828210156109a157600084815260209081902060408051608081018252918501546001600160a01b038116835260ff600160a01b82048116151584860152600160a81b8204169183019190915264ffffffffff600160b01b9091041660608201528252600190920191016112af565b611326612094565b61133060006123f5565b565b61133a612445565b6000818152600460208190526040909120906113579082906121be565b80546001600160a01b031633811461137e5761137e610a576000546001600160a01b031690565b600082600a01805480602002602001604051908101604052809291908181526020016000905b828210156113f1576000848152602090819020604080518082019091529084015464ffffffffff81168252600160281b90046001600160a01b0316818301528252600190920191016113a4565b505082519293506000915083905061140a600184612ebb565b8151811061141a5761141a612e1f565b602090810291909101015151600386015464ffffffffff90911691506001600160d01b0316600061144c836001612ece565b6007546114679190600160a01b900464ffffffffff16612f2f565b60025460405163095ea7b360e01b8152306004820152602481018590529192506001600160a01b03169063095ea7b3906044016020604051808303816000875af11580156114b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114dd9190612f46565b61151f5760405162461bcd60e51b81526020600482015260136024820152721554d11508185c1c1c9bdd994819985a5b1959606a1b6044820152606401610916565b6115298183612ebb565b6002546007546040516323b872dd60e01b81523060048201526001600160a01b0391821660248201526044810185905292945016906323b872dd906064016020604051808303816000875af1158015611586573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115aa9190612f46565b506002546040516323b872dd60e01b8152306004820152336024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015611602573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116269190612f46565b506003870180546001600160d01b0319169055611645878960056122e6565b7fa1f87f32d0f17fab0242ca800d736293de8988c14b27747e218cf13d5c249f53886116718484612ece565b6040805192835260208301919091520160405180910390a15050505050505061127460018055565b606060046000838152602001908152602001600020600901805480602002602001604051908101604052809291908181526020016000905b828210156109a15760008481526020908190206040805160e08101825260038602909201805464ffffffffff8082168552600160281b82041694840194909452919290830190600160501b900460ff16600181111561173257611732612b1e565b600181111561174357611743612b1e565b81528154600160581b810460ff16602080840191909152600160601b9091046001600160a01b0316604083015260018084015460608401526002909301546080909201919091529183529290920191016116d1565b606060046000838152602001908152602001600020600a01805480602002602001604051908101604052809291908181526020016000905b828210156109a1576000848152602090819020604080518082019091529084015464ffffffffff81168252600160281b90046001600160a01b0316818301528252600190920191016117d0565b6000611827612094565b60036000815461183690612e4b565b91829055509050600061184c6060840184612f63565b91505080158061185c5750601481115b1561187a5760405163ab13062d60e01b815260040160405180910390fd5b60008281526004602052604081209080805b84811015611a0f5760006118a36060890189612f63565b838181106118b3576118b3612e1f565b905060e002018036038101906118c99190612fc4565b90508260ff16816060015160ff1610156118f657604051632f89717760e11b815260040160405180910390fd5b6118ff8161249e565b805161190b908561306f565b64ffffffffff8082166020808501918252606085015160098a018054600181810183556000928352939091208751600390920201805494518616600160281b0269ffffffffffffffffffff199095169190951617929092178084556040860151949850919650849391839160ff60501b1990911690600160501b90849081111561199757611997612b1e565b02179055506060820151815460808401516001600160a01b0316600160601b026bffffffffffffffffffffffff60ff909316600160581b02929092166affffffffffffffffffffff9091161717815560a0820151600182015560c0909101516002909101555080611a0781612e4b565b91505061188c565b506000611a226040880160208901612bc1565b90508064ffffffffff168364ffffffffff161180611a4857506109c464ffffffffff8416115b15611a66576040516340250f0160e11b815260040160405180910390fd5b611a738688608001612585565b83546001600160a01b03191633178455611a906020880188613094565b8454600165ffffffffff0160a81b0316600160a81b911515919091026001600160d81b031617600160d81b64ffffffffff831602178455611ad76060880160408901612bc1565b6001858101805464ffffffffff191664ffffffffff939093169290921790915560006002860155611b0b90859088906122e6565b5050505050919050565b611b1d612094565b61127481612677565b611b2e612094565b6001600160a01b038116611b935760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610916565b611274816123f5565b611ba4612445565b600254604051636eb1769f60e11b8152336004820152306024820152829160009182916001600160a01b03169063dd62ed3e90604401602060405180830381865afa158015611bf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1b91906130b1565b905060005b838110156120035736868683818110611c3b57611c3b612e1f565b90506040020190506005816020013510611c68576040516363df817160e01b815260040160405180910390fd5b80356000818152600460205260409020611c838160016121be565b600081600401846020013560058110611c9e57611c9e612e1f565b604080518082018252919092015464ffffffffff808216808452600160281b9092046001600160d01b031660208085019190915260008881526005825285812033825290915293842054929450611cfc92600160d01b90041661306f565b600184015490915064ffffffffff9081169082161115611d2f5760405163d085f16160e01b815260040160405180910390fd5b60008481526005602090815260408083203384528252909120805464ffffffffff60d01b1916600160d01b64ffffffffff851602179055820151611d73818a6130ca565b985087896001600160d01b03161115611dc8576040805180820182526014815273496e73756666696369656e742062616c616e636560601b6020820152905162461bcd60e51b815261091691906004016130ea565b600a840154600090808203611dec578451611de590600190613138565b9150611e2d565b8451600a8701611dfd600184612ebb565b81548110611e0d57611e0d612e1f565b600091825260209091200154611e2a919064ffffffffff1661306f565b91505b8554600160a81b900460ff1615611e7157855464ffffffffff600160d81b909104811690831610611e71576040516334b3fb3b60e01b815260040160405180910390fd5b6040805180820190915264ffffffffff8084168252336020808401918252600a8a0180546001810182556000918252918120945194909101805492516001600160a01b0316600160281b026001600160c81b03199093169490931693909317179055600387018054859290611ef09084906001600160d01b03166130ca565b82546101009290920a6001600160d01b038181021990931691831602179091556000898152600560209081526040808320338452909152812080548794509092611f3c918591166130ca565b82546101009290920a6001600160d01b038181021990931691831602179091558651604080518b815233602082015264ffffffffff9092169082015290851660608201527fc25cd4cec0cbfb9bc40ad8f59ac733efcddf6ed3b7519369c9b9ceb2ee784601915060800160405180910390a18554611fca90600190600160d81b900464ffffffffff16613138565b64ffffffffff168264ffffffffff1610611fe857611fe887876126ec565b50505050505050508080611ffb90612e4b565b915050611c20565b506002546040516323b872dd60e01b81523360048201523060248201526001600160d01b03841660448201526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015612063573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120879190612f46565b5050505061092960018055565b6000546001600160a01b031633146113305760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610916565b60008281526008602052604090205460ff16801561210d575081600954145b1561092957600082815260086020908152604080832060010154808452600490925290912060028154600160a01b900460ff16600581111561215157612151612b1e565b036121b857612162818360036122e6565b8260008151811061217557612175612e1f565b60200260200101516008600086815260200190815260200160002060000160016101000a8154816001600160f81b0302191690836001600160f81b031602179055505b50505050565b8060058111156121d0576121d0612b1e565b8254600160a01b900460ff1660058111156121ed576121ed612b1e565b14610929576040516307a92f1960e51b815260040160405180910390fd5b336001600160a01b03821614611274576040516348f5c3ed60e01b815260040160405180910390fd5b60008251600003612247575060006122e0565b82516000905b808210156122995760006122618383612898565b90508486828151811061227657612276612e1f565b6020026020010151111561228c57809150612293565b8060010192505b5061224d565b6000821180156122cb575083856122b1600185612ebb565b815181106122c1576122c1612e1f565b6020026020010151145b156122dc57506000190190506122e0565b5090505b92915050565b82548190849060ff60a01b1916600160a01b83600581111561230a5761230a612b1e565b02179055507fc1191e7178b58ad510709587719f39ec315fa79e81ee7ba5c5ef3c894e94a6518282604051612340929190613156565b60405180910390a1505050565b60008164ffffffffff16116123985760405162461bcd60e51b8152602060048201526011602482015270496e76616c69642066656520707269636560781b6044820152606401610916565b6007805464ffffffffff60a01b1916600160a01b64ffffffffff8416908102919091179091556040519081527f27b7f58ff9b5d7747c74d7d1bc186900d393741413f16db047f574afa1249820906020015b60405180910390a150565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6002600154036124975760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610916565b6002600155565b6000816040015160018111156124b6576124b6612b1e565b036124f9578060c0015160011415806124db5750806000015164ffffffffff16600114155b1561127457604051632f89717760e11b815260040160405180910390fd5b60018160400151600181111561251157612511612b1e565b036125535760808101516001600160a01b031660009081526006602052604090205460ff1661255357604051631eb3268560e31b815260040160405180910390fd5b60c081015115806124db5750805164ffffffffff1661127457604051632f89717760e11b815260040160405180910390fd5b60005b60058110156126725760008282600581106125a5576125a5612e1f565b604002018036038101906125b9919061316a565b805160208201519192509064ffffffffff821615806125df57506001600160d01b038116155b156125fc57604051625cba9760e51b815260040160405180910390fd5b6000868152600460208190526040909120849101856005811061262157612621612e1f565b8251910180546020909301516001600160d01b0316600160281b026001600160f81b031990931664ffffffffff909216919091179190911790555082915061266a905081612e4b565b915050612588565b505050565b6001600160a01b03811661269e57604051630ed1b8b360e31b815260040160405180910390fd5b600780546001600160a01b0319166001600160a01b0383169081179091556040519081527f7a7b5a0a132f9e0581eb8527f66eae9ee89c2a3e79d4ac7e41a1f1f4d48a7fc2906020016123ea565b6126f8818360026122e6565b805464ffffffffff60b01b1916600160b01b4264ffffffffff16021781556040516305d3b1d360e41b81527f0000000000000000000000000000000000000000000000000000000000000000600482015267ffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166024820152600360448201526207a1206064820152600160848201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635d3b1d309060a4016020604051808303816000875af11580156127e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061280a91906130b1565b600981905560008181526008602052604090205490915060ff161561284257604051637c80909960e11b815260040160405180910390fd5b600081815260086020908152604091829020805460ff1916600190811782550185905581518581529081018390527f3d94fecedaa4f90b8bd459797adb95f5bb11426025c5541390d9ccc1ad1b60a19101612340565b60006128a760028484186131d3565b6128b390848416612ece565b9392505050565b6040518060a001604052806005905b60408051808201909152600080825260208201528152602001906001900390816128c95790505090565b801515811461127457600080fd5b60008060006040848603121561291657600080fd5b833567ffffffffffffffff8082111561292e57600080fd5b818601915086601f83011261294257600080fd5b81358181111561295157600080fd5b8760208260051b850101111561296657600080fd5b6020928301955093505084013561297c816128f3565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156129c6576129c6612987565b604052919050565b600080604083850312156129e157600080fd5b8235915060208084013567ffffffffffffffff80821115612a0157600080fd5b818601915086601f830112612a1557600080fd5b813581811115612a2757612a27612987565b8060051b9150612a3884830161299d565b8181529183018401918481019089841115612a5257600080fd5b938501935b83851015612a7057843582529385019390850190612a57565b8096505050505050509250929050565b600060208284031215612a9257600080fd5b5035919050565b6101408101818360005b6005811015612ade578151805164ffffffffff1684526020908101516001600160d01b03168185015260409093019290910190600101612aa3565b50505092915050565b80356001600160a01b0381168114612afe57600080fd5b919050565b600060208284031215612b1557600080fd5b6128b382612ae7565b634e487b7160e01b600052602160045260246000fd5b60068110612b4457612b44612b1e565b9052565b6001600160a01b03891681526101008101612b66602083018a612b34565b961515604082015264ffffffffff958616606082015293851660808501529190931660a083015260c08201929092526001600160d01b0390911660e09091015292915050565b803564ffffffffff81168114612afe57600080fd5b600060208284031215612bd357600080fd5b6128b382612bac565b602080825282518282018190526000919060409081850190868401855b82811015612c4857815180516001600160a01b03168552868101511515878601528581015160ff168686015260609081015164ffffffffff169085015260809093019290850190600101612bf9565b5091979650505050505050565b60008060408385031215612c6857600080fd5b82359150612c7860208401612ae7565b90509250929050565b602080825282518282018190526000919060409081850190868401855b82811015612c48578151805164ffffffffff90811686528782015116878601528581015160028110612cd257612cd2612b1e565b8587015260608181015160ff16908601526080808201516001600160a01b03169086015260a0808201519086015260c0908101519085015260e09093019290850190600101612c9e565b602080825282518282018190526000919060409081850190868401855b82811015612c48578151805164ffffffffff1685528601516001600160a01b0316868501529284019290850190600101612d39565b600060208284031215612d8057600080fd5b813567ffffffffffffffff811115612d9757600080fd5b82016101c081850312156128b357600080fd5b60008060208385031215612dbd57600080fd5b823567ffffffffffffffff80821115612dd557600080fd5b818501915085601f830112612de957600080fd5b813581811115612df857600080fd5b8660208260061b8501011115612e0d57600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612e5d57612e5d612e35565b5060010190565b6040808252810183905260008460608301825b86811015612ea5576001600160a01b03612e9084612ae7565b16825260209283019290910190600101612e77565b5080925050508215156020830152949350505050565b818103818111156122e0576122e0612e35565b808201808211156122e0576122e0612e35565b634e487b7160e01b600052601260045260246000fd5b600082612f0657612f06612ee1565b500690565b600064ffffffffff808316818103612f2557612f25612e35565b6001019392505050565b80820281158282048414176122e0576122e0612e35565b600060208284031215612f5857600080fd5b81516128b3816128f3565b6000808335601e19843603018112612f7a57600080fd5b83018035915067ffffffffffffffff821115612f9557600080fd5b602001915060e081023603821315612fac57600080fd5b9250929050565b803560ff81168114612afe57600080fd5b600060e08284031215612fd657600080fd5b60405160e0810181811067ffffffffffffffff82111715612ff957612ff9612987565b60405261300583612bac565b815261301360208401612bac565b602082015260408301356002811061302a57600080fd5b604082015261303b60608401612fb3565b606082015261304c60808401612ae7565b608082015260a083013560a082015260c083013560c08201528091505092915050565b64ffffffffff81811683821601908082111561308d5761308d612e35565b5092915050565b6000602082840312156130a657600080fd5b81356128b3816128f3565b6000602082840312156130c357600080fd5b5051919050565b6001600160d01b0381811683821601908082111561308d5761308d612e35565b600060208083528351808285015260005b81811015613117578581018301518582016040015282016130fb565b506000604082860101526040601f19601f8301168501019250505092915050565b64ffffffffff82811682821603908082111561308d5761308d612e35565b828152604081016128b36020830184612b34565b60006040828403121561317c57600080fd5b6040516040810181811067ffffffffffffffff8211171561319f5761319f612987565b6040526131ab83612bac565b815260208301356001600160d01b03811681146131c757600080fd5b60208201529392505050565b6000826131e2576131e2612ee1565b50049056fea26469706673582212203dd0582e64ef5fc98c5802f039eb947f943cbc9e655415c52f0c01da4fba7be664736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimFees(uint256)": {
        "params": {
          "raffleId": "The id of the raffle."
        }
      },
      "constructor": {
        "params": {
          "_feeRecipient": "The recipient of the fees",
          "_usdtInterface": "The USDT address"
        }
      },
      "createRaffle((bool,uint40,uint40,(uint40,uint40,uint8,uint8,address,uint256,uint256)[],(uint40,uint208)[5]))": {
        "params": {
          "params": "The parameters of the raffle."
        },
        "returns": {
          "raffleId": "The id of the newly created raffle."
        }
      },
      "enterRaffles((uint256,uint256)[])": {
        "params": {
          "entries": "The entries to be made."
        }
      },
      "getEntries(uint256)": {
        "params": {
          "raffleId": "The id of the raffle."
        },
        "returns": {
          "entries": "The entries entered for the raffle."
        }
      },
      "getPricingOptions(uint256)": {
        "params": {
          "raffleId": "The id of the raffle."
        },
        "returns": {
          "pricingOptions": "The pricing options for the raffle."
        }
      },
      "getPrizes(uint256)": {
        "params": {
          "raffleId": "The id of the raffle."
        },
        "returns": {
          "prizes": "The prizes to be distributed."
        }
      },
      "getWinners(uint256)": {
        "params": {
          "raffleId": "The id of the raffle."
        },
        "returns": {
          "winners": "The winners of the raffle."
        }
      },
      "getWinnersCount(uint256)": {
        "params": {
          "raffleId": "The id of the raffle."
        },
        "returns": {
          "winnersCount": "The count of winners."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "selectWinners(uint256)": {
        "params": {
          "requestId": "The request id returned by Chainlink."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateCurrenciesStatus(address[],bool)": {
        "details": "Only callable by owner.",
        "params": {
          "currencies": "Currency addresses (address(0) for ETH)",
          "isAllowed": "Whether the currencies should be allowed for trading"
        }
      }
    },
    "stateVariables": {
      "raffles": {
        "details": "The key is the raffle ID."
      },
      "randomnessRequests": {
        "details": "The key is the request ID returned by Chainlink."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "KEY_HASH()": {
        "notice": "The key hash of the Chainlink VRF."
      },
      "MAXIMUM_NUMBER_OF_PRIZES_PER_RAFFLE()": {
        "notice": "The maximum number of prizes per raffle.         Each individual ERC-721 counts as one prize.         Each ETH/ERC-20 with winnersCount > 1 counts as one prize."
      },
      "MAXIMUM_NUMBER_OF_WINNERS_PER_RAFFLE()": {
        "notice": "The maximum number of winners per raffle."
      },
      "PRICING_OPTIONS_PER_RAFFLE()": {
        "notice": "The number of pricing options per raffle."
      },
      "REQUEST_CONFIRMATIONS()": {
        "notice": "A Chainlink node should wait for 3 confirmations before responding."
      },
      "SUBSCRIPTION_ID()": {
        "notice": "The subscription ID of the Chainlink VRF."
      },
      "VRF_COORDINATOR()": {
        "notice": "The Chainlink VRF coordinator."
      },
      "claimFees(uint256)": {
        "notice": "Claims the fees collected for a raffle."
      },
      "createRaffle((bool,uint40,uint40,(uint40,uint40,uint8,uint8,address,uint256,uint256)[],(uint40,uint208)[5]))": {
        "notice": "Creates a new raffle."
      },
      "enterRaffles((uint256,uint256)[])": {
        "notice": "Enters a raffle or multiple raffles."
      },
      "feeRecipient()": {
        "notice": "The fee recipient."
      },
      "getEntries(uint256)": {
        "notice": "Gets the entries for a raffle."
      },
      "getPricingOptions(uint256)": {
        "notice": "Gets the pricing options for a raffle."
      },
      "getPrizes(uint256)": {
        "notice": "Gets the prizes for a raffle."
      },
      "getWinners(uint256)": {
        "notice": "Gets the winners for a raffle."
      },
      "getWinnersCount(uint256)": {
        "notice": "Get count of winners."
      },
      "isCurrencyAllowed(address)": {
        "notice": "It checks whether the currency is allowed."
      },
      "raffles(uint256)": {
        "notice": "The raffles created."
      },
      "rafflesCount()": {
        "notice": "The number of raffles created."
      },
      "randomnessRequests(uint256)": {
        "notice": "The randomness requests."
      },
      "selectWinners(uint256)": {
        "notice": "Select the winners for a raffle based on the random words returned by Chainlink."
      },
      "updateCurrenciesStatus(address[],bool)": {
        "notice": "This function allows the owner to update currency statuses."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3079,
        "contract": "contracts/RaffleVRF.sol:RaffleWithVRF",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3195,
        "contract": "contracts/RaffleVRF.sol:RaffleWithVRF",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1045,
        "contract": "contracts/RaffleVRF.sol:RaffleWithVRF",
        "label": "USDTInterface",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)2961"
      },
      {
        "astId": 1048,
        "contract": "contracts/RaffleVRF.sol:RaffleWithVRF",
        "label": "rafflesCount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1054,
        "contract": "contracts/RaffleVRF.sol:RaffleWithVRF",
        "label": "raffles",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Raffle)2642_storage)"
      },
      {
        "astId": 1061,
        "contract": "contracts/RaffleVRF.sol:RaffleWithVRF",
        "label": "rafflesParticipantsStats",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(ParticipantStats)2650_storage))"
      },
      {
        "astId": 1066,
        "contract": "contracts/RaffleVRF.sol:RaffleWithVRF",
        "label": "isCurrencyAllowed",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1080,
        "contract": "contracts/RaffleVRF.sol:RaffleWithVRF",
        "label": "feeRecipient",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 1083,
        "contract": "contracts/RaffleVRF.sol:RaffleWithVRF",
        "label": "feePrice",
        "offset": 20,
        "slot": "7",
        "type": "t_uint40"
      },
      {
        "astId": 1107,
        "contract": "contracts/RaffleVRF.sol:RaffleWithVRF",
        "label": "randomnessRequests",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(RandomnessRequest)2687_storage)"
      },
      {
        "astId": 1109,
        "contract": "contracts/RaffleVRF.sol:RaffleWithVRF",
        "label": "latestRequestId",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Entry)2579_storage)dyn_storage": {
        "base": "t_struct(Entry)2579_storage",
        "encoding": "dynamic_array",
        "label": "struct IRaffleVRF.Entry[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PricingOption)2573_storage)5_storage": {
        "base": "t_struct(PricingOption)2573_storage",
        "encoding": "inplace",
        "label": "struct IRaffleVRF.PricingOption[5]",
        "numberOfBytes": "160"
      },
      "t_array(t_struct(Prize)2606_storage)dyn_storage": {
        "base": "t_struct(Prize)2606_storage",
        "encoding": "dynamic_array",
        "label": "struct IRaffleVRF.Prize[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Winner)2589_storage)dyn_storage": {
        "base": "t_struct(Winner)2589_storage",
        "encoding": "dynamic_array",
        "label": "struct IRaffleVRF.Winner[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)2961": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(RaffleStatus)2564": {
        "encoding": "inplace",
        "label": "enum IRaffleVRF.RaffleStatus",
        "numberOfBytes": "1"
      },
      "t_enum(TokenType)2567": {
        "encoding": "inplace",
        "label": "enum IRaffleVRF.TokenType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(ParticipantStats)2650_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IRaffleVRF.ParticipantStats)",
        "numberOfBytes": "32",
        "value": "t_struct(ParticipantStats)2650_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(ParticipantStats)2650_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct IRaffleVRF.ParticipantStats))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(ParticipantStats)2650_storage)"
      },
      "t_mapping(t_uint256,t_struct(Raffle)2642_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IRaffleVRF.Raffle)",
        "numberOfBytes": "32",
        "value": "t_struct(Raffle)2642_storage"
      },
      "t_mapping(t_uint256,t_struct(RandomnessRequest)2687_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IRaffleVRF.RandomnessRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(RandomnessRequest)2687_storage"
      },
      "t_struct(Entry)2579_storage": {
        "encoding": "inplace",
        "label": "struct IRaffleVRF.Entry",
        "members": [
          {
            "astId": 2576,
            "contract": "contracts/RaffleVRF.sol:RaffleWithVRF",
            "label": "currentEntryIndex",
            "offset": 0,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 2578,
            "contract": "contracts/RaffleVRF.sol:RaffleWithVRF",
            "label": "participant",
            "offset": 5,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ParticipantStats)2650_storage": {
        "encoding": "inplace",
        "label": "struct IRaffleVRF.ParticipantStats",
        "members": [
          {
            "astId": 2645,
            "contract": "contracts/RaffleVRF.sol:RaffleWithVRF",
            "label": "amountPaid",
            "offset": 0,
            "slot": "0",
            "type": "t_uint208"
          },
          {
            "astId": 2647,
            "contract": "contracts/RaffleVRF.sol:RaffleWithVRF",
            "label": "entriesCount",
            "offset": 26,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 2649,
            "contract": "contracts/RaffleVRF.sol:RaffleWithVRF",
            "label": "refunded",
            "offset": 31,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PricingOption)2573_storage": {
        "encoding": "inplace",
        "label": "struct IRaffleVRF.PricingOption",
        "members": [
          {
            "astId": 2570,
            "contract": "contracts/RaffleVRF.sol:RaffleWithVRF",
            "label": "entriesCount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 2572,
            "contract": "contracts/RaffleVRF.sol:RaffleWithVRF",
            "label": "price",
            "offset": 5,
            "slot": "0",
            "type": "t_uint208"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Prize)2606_storage": {
        "encoding": "inplace",
        "label": "struct IRaffleVRF.Prize",
        "members": [
          {
            "astId": 2592,
            "contract": "contracts/RaffleVRF.sol:RaffleWithVRF",
            "label": "winnersCount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 2594,
            "contract": "contracts/RaffleVRF.sol:RaffleWithVRF",
            "label": "cumulativeWinnersCount",
            "offset": 5,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 2597,
            "contract": "contracts/RaffleVRF.sol:RaffleWithVRF",
            "label": "prizeType",
            "offset": 10,
            "slot": "0",
            "type": "t_enum(TokenType)2567"
          },
          {
            "astId": 2599,
            "contract": "contracts/RaffleVRF.sol:RaffleWithVRF",
            "label": "prizeTier",
            "offset": 11,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2601,
            "contract": "contracts/RaffleVRF.sol:RaffleWithVRF",
            "label": "prizeAddress",
            "offset": 12,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2603,
            "contract": "contracts/RaffleVRF.sol:RaffleWithVRF",
            "label": "prizeId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2605,
            "contract": "contracts/RaffleVRF.sol:RaffleWithVRF",
            "label": "prizeAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Raffle)2642_storage": {
        "encoding": "inplace",
        "label": "struct IRaffleVRF.Raffle",
        "members": [
          {
            "astId": 2609,
            "contract": "contracts/RaffleVRF.sol:RaffleWithVRF",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2612,
            "contract": "contracts/RaffleVRF.sol:RaffleWithVRF",
            "label": "status",
            "offset": 20,
            "slot": "0",
            "type": "t_enum(RaffleStatus)2564"
          },
          {
            "astId": 2614,
            "contract": "contracts/RaffleVRF.sol:RaffleWithVRF",
            "label": "isMinimumEntriesFixed",
            "offset": 21,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2616,
            "contract": "contracts/RaffleVRF.sol:RaffleWithVRF",
            "label": "drawnAt",
            "offset": 22,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 2618,
            "contract": "contracts/RaffleVRF.sol:RaffleWithVRF",
            "label": "minimumEntries",
            "offset": 27,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 2620,
            "contract": "contracts/RaffleVRF.sol:RaffleWithVRF",
            "label": "maximumEntriesPerParticipant",
            "offset": 0,
            "slot": "1",
            "type": "t_uint40"
          },
          {
            "astId": 2622,
            "contract": "contracts/RaffleVRF.sol:RaffleWithVRF",
            "label": "selectWinnersStartPosition",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2624,
            "contract": "contracts/RaffleVRF.sol:RaffleWithVRF",
            "label": "claimableFees",
            "offset": 0,
            "slot": "3",
            "type": "t_uint208"
          },
          {
            "astId": 2629,
            "contract": "contracts/RaffleVRF.sol:RaffleWithVRF",
            "label": "pricingOptions",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_struct(PricingOption)2573_storage)5_storage"
          },
          {
            "astId": 2633,
            "contract": "contracts/RaffleVRF.sol:RaffleWithVRF",
            "label": "prizes",
            "offset": 0,
            "slot": "9",
            "type": "t_array(t_struct(Prize)2606_storage)dyn_storage"
          },
          {
            "astId": 2637,
            "contract": "contracts/RaffleVRF.sol:RaffleWithVRF",
            "label": "entries",
            "offset": 0,
            "slot": "10",
            "type": "t_array(t_struct(Entry)2579_storage)dyn_storage"
          },
          {
            "astId": 2641,
            "contract": "contracts/RaffleVRF.sol:RaffleWithVRF",
            "label": "winners",
            "offset": 0,
            "slot": "11",
            "type": "t_array(t_struct(Winner)2589_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(RandomnessRequest)2687_storage": {
        "encoding": "inplace",
        "label": "struct IRaffleVRF.RandomnessRequest",
        "members": [
          {
            "astId": 2682,
            "contract": "contracts/RaffleVRF.sol:RaffleWithVRF",
            "label": "exists",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2684,
            "contract": "contracts/RaffleVRF.sol:RaffleWithVRF",
            "label": "randomWord",
            "offset": 1,
            "slot": "0",
            "type": "t_uint248"
          },
          {
            "astId": 2686,
            "contract": "contracts/RaffleVRF.sol:RaffleWithVRF",
            "label": "raffleId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Winner)2589_storage": {
        "encoding": "inplace",
        "label": "struct IRaffleVRF.Winner",
        "members": [
          {
            "astId": 2582,
            "contract": "contracts/RaffleVRF.sol:RaffleWithVRF",
            "label": "participant",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2584,
            "contract": "contracts/RaffleVRF.sol:RaffleWithVRF",
            "label": "claimed",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2586,
            "contract": "contracts/RaffleVRF.sol:RaffleWithVRF",
            "label": "prizeIndex",
            "offset": 21,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2588,
            "contract": "contracts/RaffleVRF.sol:RaffleWithVRF",
            "label": "entryIndex",
            "offset": 22,
            "slot": "0",
            "type": "t_uint40"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint208": {
        "encoding": "inplace",
        "label": "uint208",
        "numberOfBytes": "26"
      },
      "t_uint248": {
        "encoding": "inplace",
        "label": "uint248",
        "numberOfBytes": "31"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}