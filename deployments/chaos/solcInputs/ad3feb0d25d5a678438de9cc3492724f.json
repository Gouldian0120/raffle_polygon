{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/**\n * @notice This is a deprecated interface. Please use AutomationCompatibleInterface directly.\n */\npragma solidity ^0.8.0;\nimport {AutomationCompatibleInterface as KeeperCompatibleInterface} from \"./AutomationCompatibleInterface.sol\";\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface LinkTokenInterface {\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\n\n  function approve(address spender, uint256 value) external returns (bool success);\n\n  function balanceOf(address owner) external view returns (uint256 balance);\n\n  function decimals() external view returns (uint8 decimalPlaces);\n\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\n\n  function increaseApproval(address spender, uint256 subtractedValue) external;\n\n  function name() external view returns (string memory tokenName);\n\n  function symbol() external view returns (string memory tokenSymbol);\n\n  function totalSupply() external view returns (uint256 totalTokensIssued);\n\n  function transfer(address to, uint256 value) external returns (bool success);\n\n  function transferAndCall(\n    address to,\n    uint256 value,\n    bytes calldata data\n  ) external returns (bool success);\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool success);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// A mock for testing code that relies on VRFCoordinatorV2.\npragma solidity ^0.8.4;\n\nimport \"../interfaces/LinkTokenInterface.sol\";\nimport \"../interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"../VRFConsumerBaseV2.sol\";\n\ncontract VRFCoordinatorV2Mock is VRFCoordinatorV2Interface {\n  uint96 public immutable BASE_FEE;\n  uint96 public immutable GAS_PRICE_LINK;\n  uint16 public immutable MAX_CONSUMERS = 100;\n\n  error InvalidSubscription();\n  error InsufficientBalance();\n  error MustBeSubOwner(address owner);\n  error TooManyConsumers();\n  error InvalidConsumer();\n  error InvalidRandomWords();\n\n  event RandomWordsRequested(\n    bytes32 indexed keyHash,\n    uint256 requestId,\n    uint256 preSeed,\n    uint64 indexed subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords,\n    address indexed sender\n  );\n  event RandomWordsFulfilled(uint256 indexed requestId, uint256 outputSeed, uint96 payment, bool success);\n  event SubscriptionCreated(uint64 indexed subId, address owner);\n  event SubscriptionFunded(uint64 indexed subId, uint256 oldBalance, uint256 newBalance);\n  event SubscriptionCanceled(uint64 indexed subId, address to, uint256 amount);\n  event ConsumerAdded(uint64 indexed subId, address consumer);\n  event ConsumerRemoved(uint64 indexed subId, address consumer);\n\n  uint64 s_currentSubId;\n  uint256 s_nextRequestId = 1;\n  uint256 s_nextPreSeed = 100;\n  struct Subscription {\n    address owner;\n    uint96 balance;\n  }\n  mapping(uint64 => Subscription) s_subscriptions; /* subId */ /* subscription */\n  mapping(uint64 => address[]) s_consumers; /* subId */ /* consumers */\n\n  struct Request {\n    uint64 subId;\n    uint32 callbackGasLimit;\n    uint32 numWords;\n  }\n  mapping(uint256 => Request) s_requests; /* requestId */ /* request */\n\n  constructor(uint96 _baseFee, uint96 _gasPriceLink) {\n    BASE_FEE = _baseFee;\n    GAS_PRICE_LINK = _gasPriceLink;\n  }\n\n  function consumerIsAdded(uint64 _subId, address _consumer) public view returns (bool) {\n    address[] memory consumers = s_consumers[_subId];\n    for (uint256 i = 0; i < consumers.length; i++) {\n      if (consumers[i] == _consumer) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  modifier onlyValidConsumer(uint64 _subId, address _consumer) {\n    if (!consumerIsAdded(_subId, _consumer)) {\n      revert InvalidConsumer();\n    }\n    _;\n  }\n\n  /**\n   * @notice fulfillRandomWords fulfills the given request, sending the random words to the supplied\n   * @notice consumer.\n   *\n   * @dev This mock uses a simplified formula for calculating payment amount and gas usage, and does\n   * @dev not account for all edge cases handled in the real VRF coordinator. When making requests\n   * @dev against the real coordinator a small amount of additional LINK is required.\n   *\n   * @param _requestId the request to fulfill\n   * @param _consumer the VRF randomness consumer to send the result to\n   */\n  function fulfillRandomWords(uint256 _requestId, address _consumer) external {\n    fulfillRandomWordsWithOverride(_requestId, _consumer, new uint256[](0));\n  }\n\n  /**\n   * @notice fulfillRandomWordsWithOverride allows the user to pass in their own random words.\n   *\n   * @param _requestId the request to fulfill\n   * @param _consumer the VRF randomness consumer to send the result to\n   * @param _words user-provided random words\n   */\n  function fulfillRandomWordsWithOverride(\n    uint256 _requestId,\n    address _consumer,\n    uint256[] memory _words\n  ) public {\n    uint256 startGas = gasleft();\n    if (s_requests[_requestId].subId == 0) {\n      revert(\"nonexistent request\");\n    }\n    Request memory req = s_requests[_requestId];\n\n    if (_words.length == 0) {\n      _words = new uint256[](req.numWords);\n      for (uint256 i = 0; i < req.numWords; i++) {\n        _words[i] = uint256(keccak256(abi.encode(_requestId, i)));\n      }\n    } else if (_words.length != req.numWords) {\n      revert InvalidRandomWords();\n    }\n\n    VRFConsumerBaseV2 v;\n    bytes memory callReq = abi.encodeWithSelector(v.rawFulfillRandomWords.selector, _requestId, _words);\n    (bool success, ) = _consumer.call{gas: req.callbackGasLimit}(callReq);\n\n    uint96 payment = uint96(BASE_FEE + ((startGas - gasleft()) * GAS_PRICE_LINK));\n    if (s_subscriptions[req.subId].balance < payment) {\n      revert InsufficientBalance();\n    }\n    s_subscriptions[req.subId].balance -= payment;\n    delete (s_requests[_requestId]);\n    emit RandomWordsFulfilled(_requestId, _requestId, payment, success);\n  }\n\n  /**\n   * @notice fundSubscription allows funding a subscription with an arbitrary amount for testing.\n   *\n   * @param _subId the subscription to fund\n   * @param _amount the amount to fund\n   */\n  function fundSubscription(uint64 _subId, uint96 _amount) public {\n    if (s_subscriptions[_subId].owner == address(0)) {\n      revert InvalidSubscription();\n    }\n    uint96 oldBalance = s_subscriptions[_subId].balance;\n    s_subscriptions[_subId].balance += _amount;\n    emit SubscriptionFunded(_subId, oldBalance, oldBalance + _amount);\n  }\n\n  function requestRandomWords(\n    bytes32 _keyHash,\n    uint64 _subId,\n    uint16 _minimumRequestConfirmations,\n    uint32 _callbackGasLimit,\n    uint32 _numWords\n  ) external override onlyValidConsumer(_subId, msg.sender) returns (uint256) {\n    if (s_subscriptions[_subId].owner == address(0)) {\n      revert InvalidSubscription();\n    }\n\n    uint256 requestId = s_nextRequestId++;\n    uint256 preSeed = s_nextPreSeed++;\n\n    s_requests[requestId] = Request({subId: _subId, callbackGasLimit: _callbackGasLimit, numWords: _numWords});\n\n    emit RandomWordsRequested(\n      _keyHash,\n      requestId,\n      preSeed,\n      _subId,\n      _minimumRequestConfirmations,\n      _callbackGasLimit,\n      _numWords,\n      msg.sender\n    );\n    return requestId;\n  }\n\n  function createSubscription() external override returns (uint64 _subId) {\n    s_currentSubId++;\n    s_subscriptions[s_currentSubId] = Subscription({owner: msg.sender, balance: 0});\n    emit SubscriptionCreated(s_currentSubId, msg.sender);\n    return s_currentSubId;\n  }\n\n  function getSubscription(uint64 _subId)\n    external\n    view\n    override\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    )\n  {\n    if (s_subscriptions[_subId].owner == address(0)) {\n      revert InvalidSubscription();\n    }\n    return (s_subscriptions[_subId].balance, 0, s_subscriptions[_subId].owner, s_consumers[_subId]);\n  }\n\n  function cancelSubscription(uint64 _subId, address _to) external override onlySubOwner(_subId) {\n    emit SubscriptionCanceled(_subId, _to, s_subscriptions[_subId].balance);\n    delete (s_subscriptions[_subId]);\n  }\n\n  modifier onlySubOwner(uint64 _subId) {\n    address owner = s_subscriptions[_subId].owner;\n    if (owner == address(0)) {\n      revert InvalidSubscription();\n    }\n    if (msg.sender != owner) {\n      revert MustBeSubOwner(owner);\n    }\n    _;\n  }\n\n  function getRequestConfig()\n    external\n    pure\n    override\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    )\n  {\n    return (3, 2000000, new bytes32[](0));\n  }\n\n  function addConsumer(uint64 _subId, address _consumer) external override onlySubOwner(_subId) {\n    if (s_consumers[_subId].length == MAX_CONSUMERS) {\n      revert TooManyConsumers();\n    }\n\n    if (consumerIsAdded(_subId, _consumer)) {\n      return;\n    }\n\n    s_consumers[_subId].push(_consumer);\n    emit ConsumerAdded(_subId, _consumer);\n  }\n\n  function removeConsumer(uint64 _subId, address _consumer)\n    external\n    override\n    onlySubOwner(_subId)\n    onlyValidConsumer(_subId, _consumer)\n  {\n    address[] storage consumers = s_consumers[_subId];\n    for (uint256 i = 0; i < consumers.length; i++) {\n      if (consumers[i] == _consumer) {\n        address last = consumers[consumers.length - 1];\n        consumers[i] = last;\n        consumers.pop();\n        break;\n      }\n    }\n\n    emit ConsumerRemoved(_subId, _consumer);\n  }\n\n  function getConfig()\n    external\n    view\n    returns (\n      uint16 minimumRequestConfirmations,\n      uint32 maxGasLimit,\n      uint32 stalenessSeconds,\n      uint32 gasAfterPaymentCalculation\n    )\n  {\n    return (4, 2_500_000, 2_700, 33285);\n  }\n\n  function getFeeConfig()\n    external\n    view\n    returns (\n      uint32 fulfillmentFlatFeeLinkPPMTier1,\n      uint32 fulfillmentFlatFeeLinkPPMTier2,\n      uint32 fulfillmentFlatFeeLinkPPMTier3,\n      uint32 fulfillmentFlatFeeLinkPPMTier4,\n      uint32 fulfillmentFlatFeeLinkPPMTier5,\n      uint24 reqsForTier2,\n      uint24 reqsForTier3,\n      uint24 reqsForTier4,\n      uint24 reqsForTier5\n    )\n  {\n    return (\n      100000, // 0.1 LINK\n      100000, // 0.1 LINK\n      100000, // 0.1 LINK\n      100000, // 0.1 LINK\n      100000, // 0.1 LINK\n      0,\n      0,\n      0,\n      0\n    );\n  }\n\n  function getFallbackWeiPerUnitLink() external view returns (int256) {\n    return 4000000000000000; // 0.004 Ether\n  }\n\n  function requestSubscriptionOwnerTransfer(uint64 _subId, address _newOwner) external pure override {\n    revert(\"not implemented\");\n  }\n\n  function acceptSubscriptionOwnerTransfer(uint64 _subId) external pure override {\n    revert(\"not implemented\");\n  }\n\n  function pendingRequestExists(uint64 subId) public view override returns (bool) {\n    revert(\"not implemented\");\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"
    },
    "@dirtroad/skale-rng/contracts/RNG.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\n/**\n * RNG Endpoint Code for Function getRandomBytes() is taken from the SKALE Network Documentation here: https://docs.skale.network/tools/skale-specific/random-number-generator\n */\ncontract RNG {\n\n    /**\n     * @dev Read here for how it works: https://docs.skale.network/tools/skale-specific/random-number-generator\n     */\n    function getRandomBytes() public view returns (bytes32 addr) {\n        assembly {\n            let freemem := mload(0x40)\n            let start_addr := add(freemem, 0)\n            if iszero(staticcall(gas(), 0x18, 0, 0, start_addr, 32)) {\n              invalid()\n            }\n            addr := mload(freemem)\n        }\n    }\n    \n    /**\n     * @return The randon number\n     */\n\tfunction getRandomNumber() public view returns (uint256) {\n\t\treturn uint256(getRandomBytes());\n\t}\n    \n    /**\n     * @param nextIndex The nextIndex to interate the RNG value by\n     * @return The randon number with an additional index iteration. This shold be used for multiple values in the same block\n     */\n\tfunction getNextRandomNumber(uint256 nextIndex) public view returns (uint256) {\n\t\treturn uint256(keccak256(abi.encode(getRandomNumber() | nextIndex)));\n\t}\n\n\n    /**\n     * @param nextIndex The nextIndex to interate the RNG value by\n     * @param max The maximum number the random number should be inclusive\n     * @return Random number between 0 & max\n     */\n\tfunction getNextRandomRange(uint256 nextIndex, uint256 max) public view returns (uint256) {\n\t\treturn uint256(keccak256(abi.encode(getRandomNumber() | nextIndex))) % max;\n\t}\n    \n    /**\n     * @param max The maximum number the random number should be inclusive\n     * @return Random number between 0 & max\n     */\n\tfunction getRandomRange(uint256 max) public view returns (uint256) {\n\t\treturn getRandomNumber() % max;\n\t}\n}\n"
    },
    "@looksrare/contracts-libs/contracts/errors/GenericErrors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n/**\n * @notice It is emitted if the call recipient is not a contract.\n */\nerror NotAContract();\n"
    },
    "@looksrare/contracts-libs/contracts/errors/LowLevelErrors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n/**\n * @notice It is emitted if the ETH transfer fails.\n */\nerror ETHTransferFail();\n\n/**\n * @notice It is emitted if the ERC20 approval fails.\n */\nerror ERC20ApprovalFail();\n\n/**\n * @notice It is emitted if the ERC20 transfer fails.\n */\nerror ERC20TransferFail();\n\n/**\n * @notice It is emitted if the ERC20 transferFrom fails.\n */\nerror ERC20TransferFromFail();\n\n/**\n * @notice It is emitted if the ERC721 transferFrom fails.\n */\nerror ERC721TransferFromFail();\n\n/**\n * @notice It is emitted if the ERC1155 safeTransferFrom fails.\n */\nerror ERC1155SafeTransferFromFail();\n\n/**\n * @notice It is emitted if the ERC1155 safeBatchTransferFrom fails.\n */\nerror ERC1155SafeBatchTransferFromFail();\n"
    },
    "@looksrare/contracts-libs/contracts/interfaces/generic/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ninterface IERC20 {\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@looksrare/contracts-libs/contracts/interfaces/generic/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function transfer(address dst, uint256 wad) external returns (bool);\n\n    function withdraw(uint256 wad) external;\n}\n"
    },
    "@looksrare/contracts-libs/contracts/lowLevelCallers/LowLevelERC20Transfer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n// Interfaces\nimport {IERC20} from \"../interfaces/generic/IERC20.sol\";\n\n// Errors\nimport {ERC20TransferFail, ERC20TransferFromFail} from \"../errors/LowLevelErrors.sol\";\nimport {NotAContract} from \"../errors/GenericErrors.sol\";\n\n/**\n * @title LowLevelERC20Transfer\n * @notice This contract contains low-level calls to transfer ERC20 tokens.\n * @author LooksRare protocol team (👀,💎)\n */\ncontract LowLevelERC20Transfer {\n    /**\n     * @notice Execute ERC20 transferFrom\n     * @param currency Currency address\n     * @param from Sender address\n     * @param to Recipient address\n     * @param amount Amount to transfer\n     */\n    function _executeERC20TransferFrom(address currency, address from, address to, uint256 amount) internal {\n        if (currency.code.length == 0) {\n            revert NotAContract();\n        }\n\n        (bool status, bytes memory data) = currency.call(abi.encodeCall(IERC20.transferFrom, (from, to, amount)));\n\n        if (!status) {\n            revert ERC20TransferFromFail();\n        }\n\n        if (data.length > 0) {\n            if (!abi.decode(data, (bool))) {\n                revert ERC20TransferFromFail();\n            }\n        }\n    }\n\n    /**\n     * @notice Execute ERC20 (direct) transfer\n     * @param currency Currency address\n     * @param to Recipient address\n     * @param amount Amount to transfer\n     */\n    function _executeERC20DirectTransfer(address currency, address to, uint256 amount) internal {\n        if (currency.code.length == 0) {\n            revert NotAContract();\n        }\n\n        (bool status, bytes memory data) = currency.call(abi.encodeCall(IERC20.transfer, (to, amount)));\n\n        if (!status) {\n            revert ERC20TransferFail();\n        }\n\n        if (data.length > 0) {\n            if (!abi.decode(data, (bool))) {\n                revert ERC20TransferFail();\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\n     * that `ownerOf(tokenId)` is `a`.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\n        _balances[account] += amount;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/errors/GenericErrors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n/**\n * @notice It is emitted if the call recipient is not a contract.\n */\nerror NotAContract();\n"
    },
    "contracts/errors/LowLevelErrors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n/**\n * @notice It is emitted if the ETH transfer fails.\n */\nerror ETHTransferFail();\n\n/**\n * @notice It is emitted if the ERC20 approval fails.\n */\nerror ERC20ApprovalFail();\n\n/**\n * @notice It is emitted if the ERC20 transfer fails.\n */\nerror ERC20TransferFail();\n\n/**\n * @notice It is emitted if the ERC20 transferFrom fails.\n */\nerror ERC20TransferFromFail();\n\n/**\n * @notice It is emitted if the ERC721 transferFrom fails.\n */\nerror ERC721TransferFromFail();\n\n/**\n * @notice It is emitted if the ERC1155 safeTransferFrom fails.\n */\nerror ERC1155SafeTransferFromFail();\n\n/**\n * @notice It is emitted if the ERC1155 safeBatchTransferFrom fails.\n */\nerror ERC1155SafeBatchTransferFromFail();\n"
    },
    "contracts/errors/SharedErrors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\n/**\n * @notice It is returned if the amount is invalid.\n *         For ERC20, if amount is 0.\n *         For ERC721, any number that is not 1.\n *         For ERC1155, if amount is 0.\n */\nerror AmountInvalid();\n\n/**\n * @notice It is returned if there is either a mismatch or an error in the length of the array(s).\n */\nerror LengthsInvalid();\n"
    },
    "contracts/errors/SignatureCheckerErrors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n/**\n * @notice It is emitted if the signer is null.\n */\nerror NullSignerAddress();\n\n/**\n * @notice It is emitted if the signature is invalid for an EOA (the address recovered is not the expected one).\n */\nerror SignatureEOAInvalid();\n\n/**\n * @notice It is emitted if the signature is invalid for a ERC1271 contract signer.\n */\nerror SignatureERC1271Invalid();\n\n/**\n * @notice It is emitted if the signature's length is neither 64 nor 65 bytes.\n */\nerror SignatureLengthInvalid(uint256 length);\n\n/**\n * @notice It is emitted if the signature is invalid due to S parameter.\n */\nerror SignatureParameterSInvalid();\n\n/**\n * @notice It is emitted if the signature is invalid due to V parameter.\n */\nerror SignatureParameterVInvalid(uint8 v);\n"
    },
    "contracts/interfaces/generic/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ninterface IERC1155 {\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    event URI(string value, uint256 indexed id);\n\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    function setApprovalForAll(address operator, bool approved) external;\n\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "contracts/interfaces/generic/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ninterface IERC1271 {\n    function isValidSignature(bytes32 hash, bytes calldata signature) external view returns (bytes4 magicValue);\n}\n"
    },
    "contracts/interfaces/generic/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ninterface IERC165 {\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/generic/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ninterface IERC20 {\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "contracts/interfaces/generic/IERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n// Interfaces\nimport {IERC165} from \"./IERC165.sol\";\n\ninterface IERC2981 is IERC165 {\n    function royaltyInfo(\n        uint256 tokenId,\n        uint256 salePrice\n    ) external view returns (address receiver, uint256 royaltyAmount);\n}\n"
    },
    "contracts/interfaces/generic/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ninterface IERC721 {\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    function approve(address to, uint256 tokenId) external;\n\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/generic/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function transfer(address dst, uint256 wad) external returns (bool);\n\n    function withdraw(uint256 wad) external;\n}\n"
    },
    "contracts/interfaces/IImmutableCreate2Factory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface IImmutableCreate2Factory {\n    function safeCreate2(bytes32 salt, bytes calldata initializationCode)\n        external\n        payable\n        returns (address deploymentAddress);\n}\n"
    },
    "contracts/interfaces/ILasmRaffle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface ILasmRaffle {\n    enum RaffleStatus {\n        None,\n        Created,\n        Open,\n        Drawing,\n        Drawn,\n        Complete\n    }\n\n    enum TokenType {\n        ERC721,\n        ERC20\n    }\n\n    /**\n     * @param entriesCount The number of entries that can be purchased for the given price.\n     * @param price The price of the entries.\n     */\n    struct PricingOption {\n        uint40 entriesCount;\n        uint208 price;\n    }\n\n    /**\n     * @param currentEntryIndex The cumulative number of entries in the raffle.\n     * @param participant The address of the participant.\n     */\n    struct Entry {\n        uint40 currentEntryIndex;\n        address participant;\n    }\n\n    /**\n     * @param participant The address of the winner.\n     * @param claimed Whether the winner has claimed the prize.\n     * @param prizeIndex The index of the prize that was won.\n     * @param entryIndex The index of the entry that won.\n     */\n    struct Winner {\n        address participant;\n        bool claimed;\n        uint8 prizeIndex;\n        uint40 entryIndex;\n    }\n\n    /**\n     * @param winnersCount The number of winners.\n     * @param cumulativeWinnersCount The cumulative number of winners in the raffle.\n     * @param prizeType The type of the prize.\n     * @param prizeTier The tier of the prize.\n     * @param prizeAddress The address of the prize.\n     * @param prizeId The id of the prize.\n     * @param prizeAmount The amount of the prize.\n     */\n    struct Prize {\n        uint40 winnersCount;\n        uint40 cumulativeWinnersCount;\n        TokenType prizeType;\n        uint8 prizeTier;\n        address prizeAddress;\n        uint256 prizeId;\n        uint256 prizeAmount;\n    }\n\n    /**\n     * @param owner The address of the raffle owner.\n     * @param status The status of the raffle.\n     * @param isMinimumEntriesFixed Whether the minimum number of entries is fixed.\n     * @param drawnAt The time at which the raffle was drawn. It is still pending Chainlink to fulfill the randomness request.\n     * @param minimumEntries The minimum number of entries required to draw the raffle.\n     * @param maximumEntriesPerParticipant The maximum number of entries allowed per participant.\n     * @param claimableFees The amount of fees collected from selling entries.\n     * @param pricingOptions The pricing options for the raffle.\n     * @param prizes The prizes to be distributed.\n     * @param entries The entries that have been sold.\n     * @param winners The winners of the raffle.\n     */\n    struct Raffle {\n        address owner;\n        RaffleStatus status;\n        bool isMinimumEntriesFixed;\n        uint40 drawnAt;\n        uint40 minimumEntries;\n        uint40 maximumEntriesPerParticipant;\n        uint208 claimableFees;\n        PricingOption[5] pricingOptions;\n        Prize[] prizes;\n        Entry[] entries;\n        Winner[] winners;\n    }\n\n    /**\n     * @param amountPaid The amount paid by the participant.\n     * @param entriesCount The number of entries purchased by the participant.\n     * @param refunded Whether the participant has been refunded.\n     */\n    struct ParticipantStats {\n        uint208 amountPaid;\n        uint40 entriesCount;\n        bool refunded;\n    }\n\n    /**\n     * @param raffleId The id of the raffle.\n     * @param pricingOptionIndex The index of the selected pricing option.\n     */\n    struct EntryCalldata {\n        uint256 raffleId;\n        uint256 pricingOptionIndex;\n    }\n\n    /**\n     * @param minimumEntries The minimum number of entries required to draw the raffle.\n     * @param isMinimumEntriesFixed Whether the minimum number of entries is fixed.\n     * @param maximumEntriesPerParticipant The maximum number of entries allowed per participant.\n     * @param prizes The prizes to be distributed.\n     * @param pricingOptions The pricing options for the raffle.\n     */\n    struct CreateRaffleCalldata {\n        bool isMinimumEntriesFixed;\n        uint40 minimumEntries;\n        uint40 maximumEntriesPerParticipant;\n        Prize[] prizes;\n        PricingOption[5] pricingOptions;\n    }\n\n    struct ClaimPrizesCalldata {\n        uint256 raffleId;\n        uint256[] winnerIndices;\n    }\n\n    event CurrenciesStatusUpdated(address[] currencies, bool isAllowed);\n    event EntryRefunded(uint256 raffleId, address buyer, uint208 amount);\n    event EntrySold(uint256 raffleId, address buyer, uint40 entriesCount, uint208 price);\n    event FeesClaimed(uint256 raffleId, uint256 amount);\n    event PrizesClaimed(uint256 raffleId, uint256[] winnerIndex);\n    event FeeRecipientUpdated(address protocolFeeRecipient);\n    event RaffleStatusUpdated(uint256 raffleId, RaffleStatus status);\n\n    error AlreadyRefunded();\n    error DrawExpirationTimeNotReached();\n    error InsufficientNativeTokensSupplied();\n    error InvalidCaller();\n    error InvalidCurrency();\n    error InvalidIndex();\n    error InvalidPricingOption();\n    error InvalidPrize();\n    error InvalidPrizesCount();\n    error InvalidFeeRecipient();\n    error InvalidStatus();\n    error InvalidWinnersCount();\n    error ERC721TransferFromFail();\n    error ERC20TransferFromFail();\n    error ERC20TransferFail();\n    error MaximumEntriesPerParticipantReached();\n    error MaximumEntriesReached();\n    error NotAContract();\n    error PrizeAlreadyClaimed();\n\n    /**\n     * @notice Creates a new raffle.\n     * @param params The parameters of the raffle.\n     * @return raffleId The id of the newly created raffle.\n     */\n    function createRaffle(CreateRaffleCalldata calldata params) external returns (uint256 raffleId);\n\n    /**\n     * @notice Deposits prizes for a raffle.\n     * @param raffleId The id of the raffle.\n     */\n    function depositPrizes(uint256 raffleId) external payable;\n\n    /**\n     * @notice Enters a raffle or multiple raffles.\n     * @param entries The entries to be made.\n     */\n    function enterRaffles(EntryCalldata[] calldata entries) external payable;\n\n    /**\n     * @notice Select the winners for a raffle based on the random words returned by Chainlink.\n     * @param requestId The request id returned by Chainlink.\n     */\n    function selectWinners(uint256 requestId) external;\n\n    /**\n     * @notice Claims the prizes for a winner. A winner can claim multiple prizes\n     *         from multiple raffles in a single transaction.\n     * @param claimPrizesCalldata The calldata for claiming prizes.\n     */\n    function claimPrizes(ClaimPrizesCalldata[] calldata claimPrizesCalldata) external;\n\n    /**\n     * @notice Claims the fees collected for a raffle.\n     * @param raffleId The id of the raffle.\n     */\n    function claimFees(uint256 raffleId) external;\n\n    /**\n     * @notice Sets the protocol fee recipient. Only callable by contract owner.\n     * @param protocolFeeRecipient The protocol fee recipient.\n     */\n    function setFeeRecipient(address protocolFeeRecipient) external;\n\n    /**\n     * @notice This function allows the owner to update currency statuses.\n     * @param currencies Currency addresses (address(0) for ETH)\n     * @param isAllowed Whether the currencies should be allowed for trading\n     * @dev Only callable by owner.\n     */\n    function updateCurrenciesStatus(address[] calldata currencies, bool isAllowed) external;\n\n    /**\n     * @notice Gets the winners for a raffle.\n     * @param raffleId The id of the raffle.\n     * @return winners The winners of the raffle.\n     */\n    function getWinners(uint256 raffleId) external view returns (Winner[] memory);\n\n    /**\n     * @notice Gets the pricing options for a raffle.\n     * @param raffleId The id of the raffle.\n     * @return pricingOptions The pricing options for the raffle.\n     */\n    function getPricingOptions(uint256 raffleId) external view returns (PricingOption[5] memory);\n\n    /**\n     * @notice Gets the prizes for a raffle.\n     * @param raffleId The id of the raffle.\n     * @return prizes The prizes to be distributed.\n     */\n    function getPrizes(uint256 raffleId) external view returns (Prize[] memory);\n\n    /**\n     * @notice Gets the entries for a raffle.\n     * @param raffleId The id of the raffle.\n     * @return entries The entries entered for the raffle.\n     */\n    function getEntries(uint256 raffleId) external view returns (Entry[] memory);\n}\n"
    },
    "contracts/interfaces/IOwnableTwoSteps.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n/**\n * @title IOwnableTwoSteps\n * @author LooksRare protocol team (👀,💎)\n */\ninterface IOwnableTwoSteps {\n    /**\n     * @notice This enum keeps track of the ownership status.\n     * @param NoOngoingTransfer The default status when the owner is set\n     * @param TransferInProgress The status when a transfer to a new owner is initialized\n     * @param RenouncementInProgress The status when a transfer to address(0) is initialized\n     */\n    enum Status {\n        NoOngoingTransfer,\n        TransferInProgress,\n        RenouncementInProgress\n    }\n\n    /**\n     * @notice This is returned when there is no transfer of ownership in progress.\n     */\n    error NoOngoingTransferInProgress();\n\n    /**\n     * @notice This is returned when the caller is not the owner.\n     */\n    error NotOwner();\n\n    /**\n     * @notice This is returned when there is no renouncement in progress but\n     *         the owner tries to validate the ownership renouncement.\n     */\n    error RenouncementNotInProgress();\n\n    /**\n     * @notice This is returned when the transfer is already in progress but the owner tries\n     *         initiate a new ownership transfer.\n     */\n    error TransferAlreadyInProgress();\n\n    /**\n     * @notice This is returned when there is no ownership transfer in progress but the\n     *         ownership change tries to be approved.\n     */\n    error TransferNotInProgress();\n\n    /**\n     * @notice This is returned when the ownership transfer is attempted to be validated by the\n     *         a caller that is not the potential owner.\n     */\n    error WrongPotentialOwner();\n\n    /**\n     * @notice This is emitted if the ownership transfer is cancelled.\n     */\n    event CancelOwnershipTransfer();\n\n    /**\n     * @notice This is emitted if the ownership renouncement is initiated.\n     */\n    event InitiateOwnershipRenouncement();\n\n    /**\n     * @notice This is emitted if the ownership transfer is initiated.\n     * @param previousOwner Previous/current owner\n     * @param potentialOwner Potential/future owner\n     */\n    event InitiateOwnershipTransfer(address previousOwner, address potentialOwner);\n\n    /**\n     * @notice This is emitted when there is a new owner.\n     */\n    event NewOwner(address newOwner);\n}\n"
    },
    "contracts/interfaces/IRaffle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface IRaffle {\n    enum RaffleStatus {\n        None,\n        Created,\n        Open,\n        Drawing,\n        RandomnessFulfilled,\n        Drawn,\n        Complete,\n        Refundable,\n        Cancelled\n    }\n\n    enum TokenType {\n        ERC721,\n        ERC1155,\n        ETH,\n        ERC20\n    }\n\n    /**\n     * @param entriesCount The number of entries that can be purchased for the given price.\n     * @param price The price of the entries.\n     */\n    struct PricingOption {\n        uint40 entriesCount;\n        uint208 price;\n    }\n\n    /**\n     * @param currentEntryIndex The cumulative number of entries in the raffle.\n     * @param participant The address of the participant.\n     */\n    struct Entry {\n        uint40 currentEntryIndex;\n        address participant;\n    }\n\n    /**\n     * @param participant The address of the winner.\n     * @param claimed Whether the winner has claimed the prize.\n     * @param prizeIndex The index of the prize that was won.\n     * @param entryIndex The index of the entry that won.\n     */\n    struct Winner {\n        address participant;\n        bool claimed;\n        uint8 prizeIndex;\n        uint40 entryIndex;\n    }\n\n    /**\n     * @param winnersCount The number of winners.\n     * @param cumulativeWinnersCount The cumulative number of winners in the raffle.\n     * @param prizeType The type of the prize.\n     * @param prizeTier The tier of the prize.\n     * @param prizeAddress The address of the prize.\n     * @param prizeId The id of the prize.\n     * @param prizeAmount The amount of the prize.\n     */\n    struct Prize {\n        uint40 winnersCount;\n        uint40 cumulativeWinnersCount;\n        TokenType prizeType;\n        uint8 prizeTier;\n        address prizeAddress;\n        uint256 prizeId;\n        uint256 prizeAmount;\n    }\n\n    /**\n     * @param owner The address of the raffle owner.\n     * @param status The status of the raffle.\n     * @param isMinimumEntriesFixed Whether the minimum number of entries is fixed.\n     * @param cutoffTime The time after which the raffle cannot be entered.\n     * @param drawnAt The time at which the raffle was drawn. It is still pending Chainlink to fulfill the randomness request.\n     * @param minimumEntries The minimum number of entries required to draw the raffle.\n     * @param maximumEntriesPerParticipant The maximum number of entries allowed per participant.\n     * @param feeTokenAddress The address of the token to be used as a fee. If the fee token type is ETH, then this address is ignored.\n     * @param protocolFeeBp The protocol fee in basis points. It must be equal to the protocol fee basis points when the raffle was created.\n     * @param claimableFees The amount of fees collected from selling entries.\n     * @param pricingOptions The pricing options for the raffle.\n     * @param prizes The prizes to be distributed.\n     * @param entries The entries that have been sold.\n     * @param winners The winners of the raffle.\n     */\n    struct Raffle {\n        address owner;\n        RaffleStatus status;\n        bool isMinimumEntriesFixed;\n        uint40 cutoffTime;\n        uint40 drawnAt;\n        uint40 minimumEntries;\n        uint40 maximumEntriesPerParticipant;\n        address feeTokenAddress;\n        uint16 protocolFeeBp;\n        uint208 claimableFees;\n        PricingOption[5] pricingOptions;\n        Prize[] prizes;\n        Entry[] entries;\n        Winner[] winners;\n    }\n\n    /**\n     * @param amountPaid The amount paid by the participant.\n     * @param entriesCount The number of entries purchased by the participant.\n     * @param refunded Whether the participant has been refunded.\n     */\n    struct ParticipantStats {\n        uint208 amountPaid;\n        uint40 entriesCount;\n        bool refunded;\n    }\n\n    /**\n     * @param raffleId The id of the raffle.\n     * @param pricingOptionIndex The index of the selected pricing option.\n     */\n    struct EntryCalldata {\n        uint256 raffleId;\n        uint256 pricingOptionIndex;\n    }\n\n    /**\n     * @param cutoffTime The time at which the raffle will be closed.\n     * @param minimumEntries The minimum number of entries required to draw the raffle.\n     * @param isMinimumEntriesFixed Whether the minimum number of entries is fixed.\n     * @param maximumEntriesPerParticipant The maximum number of entries allowed per participant.\n     * @param protocolFeeBp The protocol fee in basis points. It must be equal to the protocol fee basis points when the raffle was created.\n     * @param feeTokenAddress The address of the token to be used as a fee. If the fee token type is ETH, then this address is ignored.\n     * @param prizes The prizes to be distributed.\n     * @param pricingOptions The pricing options for the raffle.\n     */\n    struct CreateRaffleCalldata {\n        uint40 cutoffTime;\n        bool isMinimumEntriesFixed;\n        uint40 minimumEntries;\n        uint40 maximumEntriesPerParticipant;\n        uint16 protocolFeeBp;\n        address feeTokenAddress;\n        Prize[] prizes;\n        PricingOption[5] pricingOptions;\n    }\n\n    struct ClaimPrizesCalldata {\n        uint256 raffleId;\n        uint256[] winnerIndices;\n    }\n\n    /**\n     * @param exists Whether the request exists.\n     * @param raffleId The id of the raffle.\n     * @param randomWord The random words returned by Chainlink VRF.\n     *                   If randomWord == 0, then the request is still pending.\n     */\n    struct RandomnessRequest {\n        bool exists;\n        uint248 randomWord;\n        uint256 raffleId;\n    }\n\n    event CurrenciesStatusUpdated(address[] currencies, bool isAllowed);\n    event EntryRefunded(uint256 raffleId, address buyer, uint208 amount);\n    event EntrySold(uint256 raffleId, address buyer, uint40 entriesCount, uint208 price);\n    event FeesClaimed(uint256 raffleId, uint256 amount);\n    event PrizesClaimed(uint256 raffleId, uint256[] winnerIndex);\n    event ProtocolFeeBpUpdated(uint16 protocolFeeBp);\n    event ProtocolFeeRecipientUpdated(address protocolFeeRecipient);\n    event RaffleStatusUpdated(uint256 raffleId, RaffleStatus status);\n    event RandomnessRequested(uint256 raffleId, uint256 requestId);\n\n    error AlreadyRefunded();\n    error CutoffTimeNotReached();\n    error CutoffTimeReached();\n    error DrawExpirationTimeNotReached();\n    error InsufficientNativeTokensSupplied();\n    error InvalidCaller();\n    error InvalidCurrency();\n    error InvalidCutoffTime();\n    error InvalidIndex();\n    error InvalidPricingOption();\n    error InvalidPrize();\n    error InvalidPrizesCount();\n    error InvalidProtocolFeeBp();\n    error InvalidProtocolFeeRecipient();\n    error InvalidStatus();\n    error InvalidWinnersCount();\n    error MaximumEntriesPerParticipantReached();\n    error MaximumEntriesReached();\n    error PrizeAlreadyClaimed();\n    error RandomnessRequestAlreadyExists();\n    error RandomnessRequestDoesNotExist();\n\n    /**\n     * @notice Creates a new raffle.\n     * @param params The parameters of the raffle.\n     * @return raffleId The id of the newly created raffle.\n     */\n    function createRaffle(CreateRaffleCalldata calldata params) external returns (uint256 raffleId);\n\n    /**\n     * @notice Deposits prizes for a raffle.\n     * @param raffleId The id of the raffle.\n     */\n    function depositPrizes(uint256 raffleId) external payable;\n\n    /**\n     * @notice Enters a raffle or multiple raffles.\n     * @param entries The entries to be made.\n     */\n    function enterRaffles(EntryCalldata[] calldata entries) external payable;\n\n    /**\n     * @notice Select the winners for a raffle based on the random words returned by Chainlink.\n     * @param requestId The request id returned by Chainlink.\n     */\n    function selectWinners(uint256 requestId) external;\n\n    /**\n     * @notice Claims the prizes for a winner. A winner can claim multiple prizes\n     *         from multiple raffles in a single transaction.\n     * @param claimPrizesCalldata The calldata for claiming prizes.\n     */\n    function claimPrizes(ClaimPrizesCalldata[] calldata claimPrizesCalldata) external;\n\n    /**\n     * @notice Claims the fees collected for a raffle.\n     * @param raffleId The id of the raffle.\n     */\n    function claimFees(uint256 raffleId) external;\n\n    /**\n     * @notice Cancels a raffle beyond cut-off time without meeting minimum entries.\n     * @param raffleId The id of the raffle.\n     */\n    function cancel(uint256 raffleId) external;\n\n    /**\n     * @notice Cancels a raffle after randomness request if the randomness request\n     *         does not arrive after a certain amount of time.\n     *         Only callable by contract owner.\n     * @param raffleId The id of the raffle.\n     */\n    function cancelAfterRandomnessRequest(uint256 raffleId) external;\n\n    /**\n     * @notice Withdraws the prizes for a raffle after it has been marked as refundable.\n     * @param raffleId The id of the raffle.\n     */\n    function withdrawPrizes(uint256 raffleId) external;\n\n    /**\n     * @notice Claims the refund for a cancelled raffle.\n     * @param raffleIds The ids of the raffles.\n     */\n    function claimRefund(uint256[] calldata raffleIds) external;\n\n    /**\n     * @notice Claims the protocol fees collected for a raffle.\n     * @param currency The currency of the fees to be claimed.\n     */\n    function claimProtocolFees(address currency) external;\n\n    /**\n     * @notice Sets the protocol fee in basis points. Only callable by contract owner.\n     * @param protocolFeeBp The protocol fee in basis points.\n     */\n    function setProtocolFeeBp(uint16 protocolFeeBp) external;\n\n    /**\n     * @notice Sets the protocol fee recipient. Only callable by contract owner.\n     * @param protocolFeeRecipient The protocol fee recipient.\n     */\n    function setProtocolFeeRecipient(address protocolFeeRecipient) external;\n\n    /**\n     * @notice This function allows the owner to update currency statuses.\n     * @param currencies Currency addresses (address(0) for ETH)\n     * @param isAllowed Whether the currencies should be allowed for trading\n     * @dev Only callable by owner.\n     */\n    function updateCurrenciesStatus(address[] calldata currencies, bool isAllowed) external;\n\n    /**\n     * @notice Toggle the contract's paused status. Only callable by contract owner.\n     */\n    function togglePaused() external;\n\n    /**\n     * @notice Gets the winners for a raffle.\n     * @param raffleId The id of the raffle.\n     * @return winners The winners of the raffle.\n     */\n    function getWinners(uint256 raffleId) external view returns (Winner[] memory);\n\n    /**\n     * @notice Gets the pricing options for a raffle.\n     * @param raffleId The id of the raffle.\n     * @return pricingOptions The pricing options for the raffle.\n     */\n    function getPricingOptions(uint256 raffleId) external view returns (PricingOption[5] memory);\n\n    /**\n     * @notice Gets the prizes for a raffle.\n     * @param raffleId The id of the raffle.\n     * @return prizes The prizes to be distributed.\n     */\n    function getPrizes(uint256 raffleId) external view returns (Prize[] memory);\n\n    /**\n     * @notice Gets the entries for a raffle.\n     * @param raffleId The id of the raffle.\n     * @return entries The entries entered for the raffle.\n     */\n    function getEntries(uint256 raffleId) external view returns (Entry[] memory);\n}\n"
    },
    "contracts/interfaces/IRaffleV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface IRaffleV2 {\n    enum RaffleStatus {\n        None,\n        Open,\n        Drawing,\n        RandomnessFulfilled,\n        Drawn,\n        Complete,\n        Refundable,\n        Cancelled\n    }\n\n    enum TokenType {\n        ERC721,\n        ERC1155,\n        ETH,\n        ERC20\n    }\n\n    /**\n     * @param entriesCount The number of entries that can be purchased for the given price.\n     * @param price The price of the entries.\n     */\n    struct PricingOption {\n        uint40 entriesCount;\n        uint208 price;\n    }\n\n    /**\n     * @param currentEntryIndex The cumulative number of entries in the raffle minus one.\n     * @param participant The address of the participant.\n     */\n    struct Entry {\n        uint40 currentEntryIndex;\n        address participant;\n    }\n\n    /**\n     * @param participant The address of the winner.\n     * @param claimed Whether the winner has claimed the prize.\n     * @param prizeIndex The index of the prize that was won.\n     * @param entryIndex The index of the entry that won.\n     */\n    struct Winner {\n        address participant;\n        bool claimed;\n        uint8 prizeIndex;\n        uint40 entryIndex;\n    }\n\n    /**\n     * @param winnersCount The number of winners.\n     * @param cumulativeWinnersCount The cumulative number of winners in the raffle.\n     * @param prizeType The type of the prize.\n     * @param prizeTier The tier of the prize.\n     * @param prizeAddress The address of the prize.\n     * @param prizeId The id of the prize.\n     * @param prizeAmount The amount of the prize.\n     */\n    struct Prize {\n        uint40 winnersCount;\n        uint40 cumulativeWinnersCount;\n        TokenType prizeType;\n        uint8 prizeTier;\n        address prizeAddress;\n        uint256 prizeId;\n        uint256 prizeAmount;\n    }\n\n    /**\n     * @param owner The address of the raffle owner.\n     * @param status The status of the raffle.\n     * @param isMinimumEntriesFixed Whether the minimum number of entries is fixed.\n     * @param cutoffTime The time after which the raffle cannot be entered.\n     * @param drawnAt The time at which the raffle was drawn. It is still pending Chainlink to fulfill the randomness request.\n     * @param minimumEntries The minimum number of entries required to draw the raffle.\n     * @param maximumEntriesPerParticipant The maximum number of entries allowed per participant.\n     * @param feeTokenAddress The address of the token to be used as a fee. If the fee token type is ETH, then this address is ignored.\n     * @param protocolFeeBp The protocol fee in basis points. It must be equal to the protocol fee basis points when the raffle was created.\n     * @param claimableFees The amount of fees collected from selling entries.\n     * @param pricingOptions The pricing options for the raffle.\n     * @param prizes The prizes to be distributed.\n     * @param entries The entries that have been sold.\n     * @param winners The winners of the raffle.\n     */\n    struct Raffle {\n        address owner;\n        RaffleStatus status;\n        bool isMinimumEntriesFixed;\n        uint40 cutoffTime;\n        uint40 drawnAt;\n        uint40 minimumEntries;\n        uint40 maximumEntriesPerParticipant;\n        address feeTokenAddress;\n        uint16 protocolFeeBp;\n        uint208 claimableFees;\n        PricingOption[] pricingOptions;\n        Prize[] prizes;\n        Entry[] entries;\n        Winner[] winners;\n    }\n\n    /**\n     * @param amountPaid The amount paid by the participant.\n     * @param entriesCount The number of entries purchased by the participant.\n     * @param refunded Whether the participant has been refunded.\n     */\n    struct ParticipantStats {\n        uint208 amountPaid;\n        uint40 entriesCount;\n        bool refunded;\n    }\n\n    /**\n     * @param raffleId The id of the raffle.\n     * @param pricingOptionIndex The index of the selected pricing option.\n     * @param count The number of entries to be purchased.\n     * @param recipient The recipient of the entries.\n     */\n    struct EntryCalldata {\n        uint256 raffleId;\n        uint256 pricingOptionIndex;\n        uint40 count;\n        address recipient;\n    }\n\n    /**\n     * @param cutoffTime The time at which the raffle will be closed.\n     * @param minimumEntries The minimum number of entries required to draw the raffle.\n     * @param isMinimumEntriesFixed Whether the minimum number of entries is fixed.\n     * @param maximumEntriesPerParticipant The maximum number of entries allowed per participant.\n     * @param protocolFeeBp The protocol fee in basis points. It must be equal to the protocol fee basis points when the raffle was created.\n     * @param feeTokenAddress The address of the token to be used as a fee. If the fee token type is ETH, then this address is ignored.\n     * @param prizes The prizes to be distributed.\n     * @param pricingOptions The pricing options for the raffle.\n     */\n    struct CreateRaffleCalldata {\n        uint40 cutoffTime;\n        bool isMinimumEntriesFixed;\n        uint40 minimumEntries;\n        uint40 maximumEntriesPerParticipant;\n        uint16 protocolFeeBp;\n        address feeTokenAddress;\n        Prize[] prizes;\n        PricingOption[] pricingOptions;\n    }\n\n    /**\n     * @param raffleId The id of the raffle.\n     * @param winnerIndices The indices of the winners to be claimed.\n     */\n    struct ClaimPrizesCalldata {\n        uint256 raffleId;\n        uint256[] winnerIndices;\n    }\n\n    /**\n     * @param exists Whether the request exists.\n     * @param randomWord The random words returned by Chainlink VRF.\n     *                   If randomWord == 0, then the request is still pending.\n     * @param raffleId The id of the raffle.\n     */\n    struct RandomnessRequest {\n        bool exists;\n        uint80 raffleId;\n        uint256 randomWord;\n    }\n\n    /**\n     * @notice This is used to accumulate the amount of tokens to be transferred.\n     * @param tokenAddress The address of the token.\n     * @param amount The amount of tokens accumulated.\n     */\n    struct TransferAccumulator {\n        address tokenAddress;\n        uint256 amount;\n    }\n\n    event CurrenciesStatusUpdated(address[] currencies, bool isAllowed);\n    event EntryRefunded(uint256 raffleId, address buyer, uint208 amount);\n    event EntrySold(uint256 raffleId, address buyer, address recipient, uint40 entriesCount, uint208 price);\n    event FeesClaimed(uint256 raffleId, uint256 amount);\n    event PrizeClaimed(uint256 raffleId, uint256 winnerIndex);\n    event PrizesClaimed(uint256 raffleId, uint256[] winnerIndex);\n    event ProtocolFeeBpUpdated(uint16 protocolFeeBp);\n    event ProtocolFeeRecipientUpdated(address protocolFeeRecipient);\n    event RaffleStatusUpdated(uint256 raffleId, RaffleStatus status);\n    event RandomnessRequested(uint256 raffleId, uint256 requestId);\n\n    error CutoffTimeNotReached();\n    error CutoffTimeReached();\n    error DrawExpirationTimeNotReached();\n    error InsufficientNativeTokensSupplied();\n    error InvalidCaller();\n    error InvalidCount();\n    error InvalidCurrency();\n    error InvalidCutoffTime();\n    error InvalidIndex();\n    error InvalidPricingOption();\n    error InvalidPricingOptionsCount();\n    error InvalidPrize();\n    error InvalidPrizesCount();\n    error InvalidProtocolFeeBp();\n    error InvalidProtocolFeeRecipient();\n    error InvalidRequestId();\n    error InvalidStatus();\n    error InvalidWinnersCount();\n    error MaximumEntriesPerParticipantReached();\n    error MaximumEntriesReached();\n    error NothingToClaim();\n    error NotEnoughEntries();\n    error RandomnessRequestAlreadyExists();\n    error RandomnessRequestDoesNotExist();\n\n    /**\n     * @notice Creates a new raffle.\n     * @param params The parameters of the raffle.\n     * @return raffleId The id of the newly created raffle.\n     */\n    function createRaffle(CreateRaffleCalldata calldata params) external payable returns (uint256 raffleId);\n\n    /**\n     * @notice Enters a raffle or multiple raffles.\n     * @param entries The entries to be made.\n     */\n    function enterRaffles(EntryCalldata[] calldata entries) external payable;\n\n    /**\n     * @notice Select the winners for a raffle based on the random words returned by Chainlink.\n     * @param requestId The request id returned by Chainlink.\n     */\n    function selectWinners(uint256 requestId) external;\n\n    /**\n     * @notice Claims a single prize for a winner.\n     * @param raffleId The id of the raffle.\n     * @param winnerIndex The index of the winner.\n     */\n    function claimPrize(uint256 raffleId, uint256 winnerIndex) external;\n\n    /**\n     * @notice Claims the prizes for a winner. A winner can claim multiple prizes\n     *         from multiple raffles in a single transaction.\n     * @param claimPrizesCalldata The calldata for claiming prizes.\n     */\n    function claimPrizes(ClaimPrizesCalldata[] calldata claimPrizesCalldata) external;\n\n    /**\n     * @notice Claims the fees collected for a raffle.\n     * @param raffleId The id of the raffle.\n     */\n    function claimFees(uint256 raffleId) external;\n\n    /**\n     * @notice Cancels a raffle beyond cut-off time without meeting minimum entries.\n     * @param raffleId The id of the raffle.\n     */\n    function cancel(uint256 raffleId) external;\n\n    /**\n     * @notice Draws winners for a raffle beyond cut-off time without meeting minimum entries.\n     * @param raffleId The id of the raffle.\n     */\n    function drawWinners(uint256 raffleId) external;\n\n    /**\n     * @notice Cancels a raffle after randomness request if the randomness request\n     *         does not arrive after a certain amount of time.\n     *         Only callable by contract owner.\n     * @param raffleId The id of the raffle.\n     */\n    function cancelAfterRandomnessRequest(uint256 raffleId) external;\n\n    /**\n     * @notice Withdraws the prizes for a raffle after it has been marked as refundable.\n     * @param raffleId The id of the raffle.\n     */\n    function withdrawPrizes(uint256 raffleId) external;\n\n    /**\n     * @notice Rollover entries from cancelled raffles to open raffles.\n     * @param refundableRaffleIds The ids of the refundable raffles.\n     * @param entries The entries to be made.\n     */\n    function rollover(uint256[] calldata refundableRaffleIds, EntryCalldata[] calldata entries) external payable;\n\n    /**\n     * @notice Claims the refund for a cancelled raffle.\n     * @param raffleIds The ids of the raffles.\n     */\n    function claimRefund(uint256[] calldata raffleIds) external;\n\n    /**\n     * @notice Sets the protocol fee in basis points. Only callable by contract owner.\n     * @param protocolFeeBp The protocol fee in basis points.\n     */\n    function setProtocolFeeBp(uint16 protocolFeeBp) external;\n\n    /**\n     * @notice Sets the protocol fee recipient. Only callable by contract owner.\n     * @param protocolFeeRecipient The protocol fee recipient.\n     */\n    function setProtocolFeeRecipient(address protocolFeeRecipient) external;\n\n    /**\n     * @notice This function allows the owner to update currency statuses.\n     * @param currencies Currency addresses (address(0) for ETH)\n     * @param isAllowed Whether the currencies should be allowed for trading\n     * @dev Only callable by owner.\n     */\n    function updateCurrenciesStatus(address[] calldata currencies, bool isAllowed) external;\n\n    /**\n     * @notice Toggle the contract's paused status. Only callable by contract owner.\n     */\n    function togglePaused() external;\n\n    /**\n     * @notice Gets the winners for a raffle.\n     * @param raffleId The id of the raffle.\n     * @return winners The winners of the raffle.\n     */\n    function getWinners(uint256 raffleId) external view returns (Winner[] memory);\n\n    /**\n     * @notice Gets the pricing options for a raffle.\n     * @param raffleId The id of the raffle.\n     * @return pricingOptions The pricing options for the raffle.\n     */\n    function getPricingOptions(uint256 raffleId) external view returns (PricingOption[] memory);\n\n    /**\n     * @notice Gets the prizes for a raffle.\n     * @param raffleId The id of the raffle.\n     * @return prizes The prizes to be distributed.\n     */\n    function getPrizes(uint256 raffleId) external view returns (Prize[] memory);\n\n    /**\n     * @notice Gets the entries for a raffle.\n     * @param raffleId The id of the raffle.\n     * @return entries The entries entered for the raffle.\n     */\n    function getEntries(uint256 raffleId) external view returns (Entry[] memory);\n}\n"
    },
    "contracts/interfaces/IReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n/**\n * @title IReentrancyGuard\n * @author LooksRare protocol team (👀,💎)\n */\ninterface IReentrancyGuard {\n    /**\n     * @notice This is returned when there is a reentrant call.\n     */\n    error ReentrancyFail();\n}\n"
    },
    "contracts/interfaces/ITransferManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\n// Enums\nimport {TokenType} from \"../TokenType.sol\";\n\n/**\n * @title ITransferManager\n * @author LooksRare protocol team (👀,💎)\n */\ninterface ITransferManager {\n    /**\n     * @notice This struct is only used for transferBatchItemsAcrossCollections.\n     * @param tokenAddress Token address\n     * @param tokenType 0 for ERC721, 1 for ERC1155\n     * @param itemIds Array of item ids to transfer\n     * @param amounts Array of amounts to transfer\n     */\n    struct BatchTransferItem {\n        address tokenAddress;\n        TokenType tokenType;\n        uint256[] itemIds;\n        uint256[] amounts;\n    }\n\n    /**\n     * @notice It is emitted if operators' approvals to transfer NFTs are granted by a user.\n     * @param user Address of the user\n     * @param operators Array of operator addresses\n     */\n    event ApprovalsGranted(address user, address[] operators);\n\n    /**\n     * @notice It is emitted if operators' approvals to transfer NFTs are revoked by a user.\n     * @param user Address of the user\n     * @param operators Array of operator addresses\n     */\n    event ApprovalsRemoved(address user, address[] operators);\n\n    /**\n     * @notice It is emitted if a new operator is added to the global allowlist.\n     * @param operator Operator address\n     */\n    event OperatorAllowed(address operator);\n\n    /**\n     * @notice It is emitted if an operator is removed from the global allowlist.\n     * @param operator Operator address\n     */\n    event OperatorRemoved(address operator);\n\n    /**\n     * @notice It is returned if the operator to approve has already been approved by the user.\n     */\n    error OperatorAlreadyApprovedByUser();\n\n    /**\n     * @notice It is returned if the operator to revoke has not been previously approved by the user.\n     */\n    error OperatorNotApprovedByUser();\n\n    /**\n     * @notice It is returned if the transfer caller is already allowed by the owner.\n     * @dev This error can only be returned for owner operations.\n     */\n    error OperatorAlreadyAllowed();\n\n    /**\n     * @notice It is returned if the operator to approve is not in the global allowlist defined by the owner.\n     * @dev This error can be returned if the user tries to grant approval to an operator address not in the\n     *      allowlist or if the owner tries to remove the operator from the global allowlist.\n     */\n    error OperatorNotAllowed();\n\n    /**\n     * @notice It is returned if the transfer caller is invalid.\n     *         For a transfer called to be valid, the operator must be in the global allowlist and\n     *         approved by the 'from' user.\n     */\n    error TransferCallerInvalid();\n\n    /**\n     * @notice This function transfers ERC20 tokens.\n     * @param tokenAddress Token address\n     * @param from Sender address\n     * @param to Recipient address\n     * @param amount amount\n     */\n    function transferERC20(\n        address tokenAddress,\n        address from,\n        address to,\n        uint256 amount\n    ) external;\n\n    /**\n     * @notice This function transfers a single item for a single ERC721 collection.\n     * @param tokenAddress Token address\n     * @param from Sender address\n     * @param to Recipient address\n     * @param itemId Item ID\n     */\n    function transferItemERC721(\n        address tokenAddress,\n        address from,\n        address to,\n        uint256 itemId\n    ) external;\n\n    /**\n     * @notice This function transfers items for a single ERC721 collection.\n     * @param tokenAddress Token address\n     * @param from Sender address\n     * @param to Recipient address\n     * @param itemIds Array of itemIds\n     * @param amounts Array of amounts\n     */\n    function transferItemsERC721(\n        address tokenAddress,\n        address from,\n        address to,\n        uint256[] calldata itemIds,\n        uint256[] calldata amounts\n    ) external;\n\n    /**\n     * @notice This function transfers a single item for a single ERC1155 collection.\n     * @param tokenAddress Token address\n     * @param from Sender address\n     * @param to Recipient address\n     * @param itemId Item ID\n     * @param amount Amount\n     */\n    function transferItemERC1155(\n        address tokenAddress,\n        address from,\n        address to,\n        uint256 itemId,\n        uint256 amount\n    ) external;\n\n    /**\n     * @notice This function transfers items for a single ERC1155 collection.\n     * @param tokenAddress Token address\n     * @param from Sender address\n     * @param to Recipient address\n     * @param itemIds Array of itemIds\n     * @param amounts Array of amounts\n     * @dev It does not allow batch transferring if from = msg.sender since native function should be used.\n     */\n    function transferItemsERC1155(\n        address tokenAddress,\n        address from,\n        address to,\n        uint256[] calldata itemIds,\n        uint256[] calldata amounts\n    ) external;\n\n    /**\n     * @notice This function transfers items across an array of tokens that can be ERC20, ERC721 and ERC1155.\n     * @param items Array of BatchTransferItem\n     * @param from Sender address\n     * @param to Recipient address\n     */\n    function transferBatchItemsAcrossCollections(\n        BatchTransferItem[] calldata items,\n        address from,\n        address to\n    ) external;\n\n    /**\n     * @notice This function allows a user to grant approvals for an array of operators.\n     *         Users cannot grant approvals if the operator is not allowed by this contract's owner.\n     * @param operators Array of operator addresses\n     * @dev Each operator address must be globally allowed to be approved.\n     */\n    function grantApprovals(address[] calldata operators) external;\n\n    /**\n     * @notice This function allows a user to revoke existing approvals for an array of operators.\n     * @param operators Array of operator addresses\n     * @dev Each operator address must be approved at the user level to be revoked.\n     */\n    function revokeApprovals(address[] calldata operators) external;\n\n    /**\n     * @notice This function allows an operator to be added for the shared transfer system.\n     *         Once the operator is allowed, users can grant NFT approvals to this operator.\n     * @param operator Operator address to allow\n     * @dev Only callable by owner.\n     */\n    function allowOperator(address operator) external;\n\n    /**\n     * @notice This function allows the user to remove an operator for the shared transfer system.\n     * @param operator Operator address to remove\n     * @dev Only callable by owner.\n     */\n    function removeOperator(address operator) external;\n}\n"
    },
    "contracts/LasmRaffle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport \"@dirtroad/skale-rng/contracts/RNG.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"./interfaces/ILasmRaffle.sol\";\nimport \"./interfaces/generic/IERC721.sol\";\nimport \"./interfaces/generic/IERC20.sol\";\nimport \"./libraries/Arrays.sol\";\n\ncontract LasmRaffle is ILasmRaffle, RNG, Ownable, ReentrancyGuard {\n\tusing Arrays for uint256[];\n\n    IERC20 public USDTInterface;\n\n    /**\n     * @notice 100% in basis points.\n     */\n    uint256 public constant ONE_HUNDRED_PERCENT_BP = 10_000;\n\n    /**\n     * @notice The number of raffles created.\n     */\n    uint256 public rafflesCount;\n\n    /**\n     * @notice The raffles created.\n     * @dev The key is the raffle ID.\n     */\n    mapping(uint256 => Raffle) public raffles;\n\n    mapping(uint256 => mapping(address => ParticipantStats)) public rafflesParticipantsStats;\n\n    /**\n     * @notice It checks whether the currency is allowed.\n     */\n    mapping(address => bool) public isCurrencyAllowed;\n\n    /**\n     * @notice The maximum number of prizes per raffle.\n     *         Each individual ERC-721 counts as one prize.\n     *         Each ETH/ERC-20 with winnersCount > 1 counts as one prize.\n     */\n    uint256 public constant MAXIMUM_NUMBER_OF_PRIZES_PER_RAFFLE = 20;\n\n    /**\n     * @notice The maximum number of winners per raffle.\n     */\n    uint40 public constant MAXIMUM_NUMBER_OF_WINNERS_PER_RAFFLE = 250;\n\n    /**\n     * @notice The fee recipient.\n     */\n    address public feeRecipient;\n\n    uint40 public constant FEE_PRICE = 5e3;\n\n    /**\n     * @notice The number of pricing options per raffle.\n     */\n    uint256 public constant PRICING_OPTIONS_PER_RAFFLE = 5;\n\n    /**\n     * @param _feeRecipient The recipient of the fees\n     * @param _usdtInterface The USDT address\n     */\n    constructor( address _usdtInterface, address _feeRecipient) {\n        require(_usdtInterface != address(0), \"Zero USDT Interface Address\");\n\n        if(_feeRecipient == address(0)) {\n            _setFeeRecipient(msg.sender);\n        } else {\n            _setFeeRecipient(_feeRecipient);\n        }\n\n        USDTInterface = IERC20(_usdtInterface);\n    }\n\n    function createRaffle(CreateRaffleCalldata calldata params) external returns(uint256 raffleId) {\n    \tunchecked {\n            raffleId = ++rafflesCount;\n        }\n\n        uint256 prizesCount = params.prizes.length;\n        if (prizesCount == 0 || prizesCount > MAXIMUM_NUMBER_OF_PRIZES_PER_RAFFLE) {\n            revert InvalidPrizesCount();\n        }\n\n        Raffle storage raffle = raffles[raffleId];\n\n        uint40 cumulativeWinnersCount;\n\t\tuint8 currentPrizeTier;\n\t\tfor(uint256 i; i < prizesCount; ) {\n\t\t\tPrize memory prize = params.prizes[i];\n\t\t\tif(prize.prizeTier < currentPrizeTier) {\n\t\t\t\trevert InvalidPrize();\n\t\t\t}\n\t\t\t_validatePrize(prize);\n\n\t\t\tcumulativeWinnersCount += prize.winnersCount;\n\t\t\tprize.cumulativeWinnersCount = cumulativeWinnersCount;\n\t\t\tcurrentPrizeTier = prize.prizeTier;\n\t\t\traffle.prizes.push(prize);\n\n\t\t\tunchecked {\n                ++i;\n            }\n\t\t}\n\n\t\tuint40 minimumEntries = params.minimumEntries;\n\t\tif (cumulativeWinnersCount > minimumEntries || cumulativeWinnersCount > MAXIMUM_NUMBER_OF_WINNERS_PER_RAFFLE) {\n            // revert InvalidWinnersCount();\n        }\n        _validateAndSetPricingOptions(raffleId, params.pricingOptions);\n\n        raffle.owner = msg.sender;\n        raffle.isMinimumEntriesFixed = params.isMinimumEntriesFixed;\n        raffle.minimumEntries = minimumEntries;\n        raffle.maximumEntriesPerParticipant = params.maximumEntriesPerParticipant;\n\n        _setRaffleStatus(raffle, raffleId, RaffleStatus.Created);\n    }\n\n    function depositPrizes(uint256 raffleId) external payable nonReentrant {\n    \tRaffle storage raffle = raffles[raffleId];\n\n    \t_validateRaffleStatus(raffle, RaffleStatus.Created);\n        _validateCaller(raffle.owner);\n\n        Prize[] storage prizes = raffle.prizes;\n        uint256 prizesCount = prizes.length;\n        for (uint256 i; i < prizesCount; ) {\n            Prize storage prize = prizes[i];\n            TokenType prizeType = prize.prizeType;\n            if (prizeType == TokenType.ERC721) {\n                _executeERC721TransferFrom(prize.prizeAddress, msg.sender, address(this), prize.prizeId);\n            } else if (prizeType == TokenType.ERC20) {\n                _executeERC20TransferFrom(\n                    prize.prizeAddress,\n                    msg.sender,\n                    address(this),\n                    prize.prizeAmount * prize.winnersCount\n                );\n            } else {\n            \trevert InvalidPrize();\n            }\n            unchecked {\n                ++i;\n            }\n        }\n\n        _setRaffleStatus(raffle, raffleId, RaffleStatus.Open);\n    }\n\n    function enterRaffles(EntryCalldata[] calldata entries) external payable nonReentrant {\n    \tuint256 entriesCount = entries.length;\n    \tuint208 expectedUSDTValue;\n    \tuint256 userUSDTBalance = USDTInterface.allowance(msg.sender, address(this));\n\n    \tfor (uint256 i; i < entriesCount; ) {\n    \t\tEntryCalldata calldata entry = entries[i];\n\n    \t\tif (entry.pricingOptionIndex >= PRICING_OPTIONS_PER_RAFFLE) {\n                revert InvalidIndex();\n            }\n\n            uint256 raffleId = entry.raffleId;\n            Raffle storage raffle = raffles[raffleId];\n\n            _validateRaffleStatus(raffle, RaffleStatus.Open);\n\n            PricingOption memory pricingOption = raffle.pricingOptions[entry.pricingOptionIndex];\n\n            uint40 newParticipantEntriesCount = rafflesParticipantsStats[raffleId][msg.sender].entriesCount + pricingOption.entriesCount;\n            if (newParticipantEntriesCount > raffle.maximumEntriesPerParticipant) {\n                revert MaximumEntriesPerParticipantReached();\n            }\n\t\t\trafflesParticipantsStats[raffleId][msg.sender].entriesCount = newParticipantEntriesCount;\n\n\t\t\tuint208 price = pricingOption.price;\n\t\t\texpectedUSDTValue += price;\n\n\t\t\tif (expectedUSDTValue > userUSDTBalance) {\n\t\t\t\trevert(string(\"insufficient balance\"));\n\t\t\t}\n\t\t\t\n\t\t\tuint40 currentEntryIndex;\n\t\t\tuint256 raffleEntriesCount = raffle.entries.length;\n\t\t\tif (raffleEntriesCount == 0) {\n                currentEntryIndex = uint40(_unsafeSubtract(pricingOption.entriesCount, 1));\n            } else {\n                currentEntryIndex = raffle.entries[_unsafeSubtract(raffleEntriesCount, 1)].currentEntryIndex + pricingOption.entriesCount;\n            }\n\n            if (raffle.isMinimumEntriesFixed) {\n                if (currentEntryIndex >= raffle.minimumEntries) {\n                    revert MaximumEntriesReached();\n                }\n            }\n\n            raffle.entries.push(Entry({currentEntryIndex: currentEntryIndex, participant: msg.sender}));\n            raffle.claimableFees += price;\n\n            rafflesParticipantsStats[raffleId][msg.sender].amountPaid += price;\n\n            emit EntrySold(raffleId, msg.sender, pricingOption.entriesCount, price);\n\n            if (currentEntryIndex >= _unsafeSubtract(raffle.minimumEntries, 1)) {\n                _drawWinners(raffleId, raffle);\n            }\n\n            unchecked {\n                ++i;\n            }\n    \t}\n\n    \tUSDTInterface.transferFrom(msg.sender, address(this), expectedUSDTValue);\n    }\n\n    function selectWinners(uint256 raffleId) external {\n\t\tRaffle storage raffle = raffles[raffleId];\n\t\t_validateRaffleStatus(raffle, RaffleStatus.Drawing);\n\n        address raffleOwner = raffle.owner;\n        if(msg.sender != raffleOwner) {\n            _validateCaller(owner());\n        }\n\n\t\tPrize[] storage prizes = raffle.prizes;\n\t\tuint256 prizesCount = prizes.length;\n\t\tuint256 winnersCount = prizes[prizesCount - 1].cumulativeWinnersCount;\n\n\t\tEntry[] memory entries = raffle.entries;\n\t\tuint256 entriesCount = entries.length;\n\t\tuint256 currentEntryIndex = uint256(entries[entriesCount - 1].currentEntryIndex);\n        \n        uint256[] memory currentEntryIndexArray = new uint256[](entriesCount);\n\t\tfor (uint256 i; i < entriesCount; ) {\n            currentEntryIndexArray[i] = entries[i].currentEntryIndex;\n            unchecked {\n                ++i;\n            }\n        }\n\n        uint256[] memory cumulativeWinnersCountArray = new uint256[](prizesCount);\n        for (uint256 i; i < prizesCount; ) {\n            cumulativeWinnersCountArray[i] = prizes[i].cumulativeWinnersCount;\n            unchecked {\n                ++i;\n            }\n        }\n\n\t\tfor(uint256 i; i < winnersCount; ) {\n\t\t\tuint256 winningEntry = getNextRandomRange(0, currentEntryIndex);\n\t\t\traffle.winners.push(\n\t\t\t\tWinner({\n\t\t\t\t\tparticipant: entries[currentEntryIndexArray.findUpperBound(winningEntry)].participant,\n\t\t\t\t\tclaimed: false,\n\t\t\t\t\tprizeIndex: uint8(cumulativeWinnersCountArray.findUpperBound(_unsafeAdd(i, 1))),\n\t\t\t\t\tentryIndex: uint40(winningEntry)\n\t\t\t\t})\n\t\t\t);\n\n            unchecked {\n                ++i;\n            }\n\t\t}\n\n\t\t_setRaffleStatus(raffle, raffleId, RaffleStatus.Drawn);\n    }\n\n    /**\n     * @param raffleId The ID of the raffle to draw winners for.\n     * @param raffle The raffle to draw winners for.\n     */\n    function _drawWinners(uint256 raffleId, Raffle storage raffle) private {\n        _setRaffleStatus(raffle, raffleId, RaffleStatus.Drawing);\n        raffle.drawnAt = uint40(block.timestamp);\n    }\n\n    function claimPrizes(ClaimPrizesCalldata[] calldata claimPrizesCalldata) external nonReentrant {\n        uint256 claimsCount = claimPrizesCalldata.length;\n        for (uint256 i; i < claimsCount; ) {\n            _claimPrizesPerRaffle(claimPrizesCalldata[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function claimFees(uint256 raffleId) external nonReentrant() {\n        Raffle storage raffle = raffles[raffleId];\n        _validateRaffleStatus(raffle, RaffleStatus.Drawn);\n\n        address raffleOwner = raffle.owner;\n        if(msg.sender != raffleOwner) {\n            _validateCaller(owner());\n        }\n\n        Entry[] memory entries = raffle.entries;\n\t\tuint256 entriesCount = entries.length;\n\t\tuint256 currentEntryIndex = uint256(entries[entriesCount - 1].currentEntryIndex);\n\n        uint256 cliamableFee = raffle.claimableFees;\n        uint256 protocolFees = FEE_PRICE * currentEntryIndex;\n\n        require(USDTInterface.approve(address(this), cliamableFee), \"USDT approve failed\");\n\n        unchecked {\n            cliamableFee -= protocolFees;\n        }\n\n        USDTInterface.transferFrom(address(this), feeRecipient, protocolFees);\n        USDTInterface.transferFrom(address(this), msg.sender, cliamableFee);\n\n        raffle.claimableFees = 0;\n\n        _setRaffleStatus(raffle, raffleId, RaffleStatus.Complete);\n\n        emit FeesClaimed(raffleId, protocolFees + cliamableFee);\n    }\n\n    function updateCurrenciesStatus(address[] calldata currencies, bool isAllowed) external onlyOwner {\n        uint256 count = currencies.length;\n        for (uint256 i; i < count; ) {\n            isCurrencyAllowed[currencies[i]] = isAllowed;\n            unchecked {\n                ++i;\n            }\n        }\n        emit CurrenciesStatusUpdated(currencies, isAllowed);\n    }\n    \n    function setFeeRecipient(address _feeRecipient) external onlyOwner {\n        _setFeeRecipient(_feeRecipient);\n    }\n\n    function getWinners(uint256 raffleId) external view returns (Winner[] memory winners) {\n        winners = raffles[raffleId].winners;\n    }\n\n    function getPrizes(uint256 raffleId) external view returns (Prize[] memory prizes) {\n        prizes = raffles[raffleId].prizes;\n    }\n\n    function getEntries(uint256 raffleId) external view returns (Entry[] memory entries) {\n        entries = raffles[raffleId].entries;\n    }\n\n    function getPricingOptions(uint256 raffleId) external view returns (PricingOption[PRICING_OPTIONS_PER_RAFFLE] memory pricingOptions) {\n        pricingOptions = raffles[raffleId].pricingOptions;\n    }\n\n    /**\n     * @param claimPrizesCalldata The calldata for claiming prizes.\n     */\n    function _claimPrizesPerRaffle(ClaimPrizesCalldata calldata claimPrizesCalldata) private {\n        uint256 raffleId = claimPrizesCalldata.raffleId;\n        Raffle storage raffle = raffles[raffleId];\n        RaffleStatus status = raffle.status;\n        if (status != RaffleStatus.Drawn) {\n            _validateRaffleStatus(raffle, RaffleStatus.Complete);\n        }\n\n        Winner[] storage winners = raffle.winners;\n        uint256[] calldata winnerIndices = claimPrizesCalldata.winnerIndices;\n        uint256 winnersCount = winners.length;\n        uint256 claimsCount = winnerIndices.length;\n        for (uint256 i; i < claimsCount; ) {\n            uint256 winnerIndex = winnerIndices[i];\n\n            if (winnerIndex >= winnersCount) {\n                revert InvalidIndex();\n            }\n\n            Winner storage winner = winners[winnerIndex];\n            if (winner.claimed) {\n                revert PrizeAlreadyClaimed();\n            }\n            _validateCaller(winner.participant);\n            winner.claimed = true;\n\n            Prize storage prize = raffle.prizes[winner.prizeIndex];\n            _transferPrize({prize: prize, recipient: msg.sender, multiplier: 1});\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        emit PrizesClaimed(raffleId, winnerIndices);\n    }\n\n    /**\n     * @param prize The prize to transfer.\n     * @param recipient The recipient of the prize.\n     * @param multiplier The multiplier to apply to the prize amount.\n     */\n    function _transferPrize(Prize storage prize, address recipient, uint256 multiplier) private {\n        TokenType prizeType = prize.prizeType;\n        address prizeAddress = prize.prizeAddress;\n        if (prizeType == TokenType.ERC721) {\n            _executeERC721TransferFrom(prizeAddress, address(this), recipient, prize.prizeId);\n        } else {\n            _executeERC20DirectTransfer(prizeAddress, recipient, prize.prizeAmount * multiplier);\n        }\n    }\n\n    /**\n     * @notice Execute ERC721 transferFrom\n     * @param collection Address of the collection\n     * @param from Address of the sender\n     * @param to Address of the recipient\n     * @param tokenId tokenId to transfer\n     */\n    function _executeERC721TransferFrom(address collection, address from, address to, uint256 tokenId) internal {\n        if (collection.code.length == 0) {\n            revert NotAContract();\n        }\n\n        (bool status, ) = collection.call(abi.encodeCall(IERC721.transferFrom, (from, to, tokenId)));\n\n        if (!status) {\n            revert ERC721TransferFromFail();\n        }\n    }\n\n\t/**\n     * @notice Execute ERC20 transferFrom\n     * @param currency Currency address\n     * @param from Sender address\n     * @param to Recipient address\n     * @param amount Amount to transfer\n     */\n    function _executeERC20TransferFrom(address currency, address from, address to, uint256 amount) internal {\n        if (currency.code.length == 0) {\n            revert NotAContract();\n        }\n\n        uint256 fromBalance = (IERC20)(currency).balanceOf(from);\n\n        if(amount > fromBalance) {\n            revert(string(\"insufficient balance\"));\n        }\n\n        (bool status, bytes memory data) = currency.call(abi.encodeCall(IERC20.transferFrom, (from, to, amount)));\n\n        if (!status) {\n            revert ERC20TransferFromFail();\n        }\n\n        if (data.length > 0) {\n            if (!abi.decode(data, (bool))) {\n                revert ERC20TransferFromFail();\n            }\n        }\n    }\n\n    /**\n     * @notice Execute ERC20 (direct) transfer\n     * @param currency Currency address\n     * @param to Recipient address\n     * @param amount Amount to transfer\n     */\n    function _executeERC20DirectTransfer(address currency, address to, uint256 amount) internal {\n        if (currency.code.length == 0) {\n            revert NotAContract();\n        }\n\n        (bool status, bytes memory data) = currency.call(abi.encodeCall(IERC20.transfer, (to, amount)));\n\n        if (!status) {\n            revert ERC20TransferFail();\n        }\n\n        if (data.length > 0) {\n            if (!abi.decode(data, (bool))) {\n                revert ERC20TransferFail();\n            }\n        }\n    }\n\n    /**\n     * @param raffleId The ID of the raffle.\n     * @param pricingOptions The pricing options for the raffle.\n     */\n    function _validateAndSetPricingOptions(uint256 raffleId, PricingOption[PRICING_OPTIONS_PER_RAFFLE] calldata pricingOptions) private {\n        for (uint256 i; i < PRICING_OPTIONS_PER_RAFFLE; ) {\n            PricingOption memory pricingOption = pricingOptions[i];\n\n            uint40 entriesCount = pricingOption.entriesCount;\n            uint208 price = pricingOption.price;\n\n            if (i == 0) {\n                if (entriesCount != 1 || price == 0) {\n                    revert InvalidPricingOption();\n                }\n            } else {\n                PricingOption memory lastPricingOption = pricingOptions[_unsafeSubtract(i, 1)];\n                uint208 lastPrice = lastPricingOption.price;\n                uint40 lastEntriesCount = lastPricingOption.entriesCount;\n\n                if (\n                    price % entriesCount != 0 ||\n                    entriesCount <= lastEntriesCount ||\n                    price <= lastPrice ||\n                    price / entriesCount > lastPrice / lastEntriesCount\n                ) {\n                    revert InvalidPricingOption();\n                }\n            }\n\n            raffles[raffleId].pricingOptions[i] = pricingOption;\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @param prize The prize.\n     */\n    function _validatePrize(Prize memory prize) private view {\n        if (prize.prizeType == TokenType.ERC721) {\n            if (prize.prizeAmount != 1 || prize.winnersCount != 1) {\n                revert InvalidPrize();\n            }\n        } else {\n            if (prize.prizeType == TokenType.ERC20) {\n                if (!isCurrencyAllowed[prize.prizeAddress]) {\n                    revert InvalidCurrency();\n                }\n            }\n\n            if (prize.prizeAmount == 0 || prize.winnersCount == 0) {\n                revert InvalidPrize();\n            }\n        }\n    }\n\n    /**\n     * @param raffle The raffle to check the status of.\n     * @param status The expected status of the raffle\n     */\n    function _validateRaffleStatus(Raffle storage raffle, RaffleStatus status) private view {\n        if (raffle.status != status) {\n            revert InvalidStatus();\n        }\n    }\n\n    /**\n     * @param caller The expected caller.\n     */\n    function _validateCaller(address caller) private view {\n        if (msg.sender != caller) {\n            revert InvalidCaller();\n        }\n    }\n\n    /**\n     * @param _feeRecipient The new fee recipient address\n     */\n    function _setFeeRecipient(address _feeRecipient) private {\n        if (_feeRecipient == address(0)) {\n            revert InvalidFeeRecipient();\n        }\n        feeRecipient = _feeRecipient;\n        emit FeeRecipientUpdated(_feeRecipient);\n    }\n\n    /**\n     * @param raffle The raffle to set the status of.\n     * @param raffleId The ID of the raffle to set the status of.\n     * @param status The status to set.\n     */\n    function _setRaffleStatus(Raffle storage raffle, uint256 raffleId, RaffleStatus status) private {\n        raffle.status = status;\n        emit RaffleStatusUpdated(raffleId, status);\n    }\n\n    function _unsafeAdd(uint256 a, uint256 b) private pure returns (uint256) {\n        unchecked {\n            return a + b;\n        }\n    }\n\n    function _unsafeSubtract(uint256 a, uint256 b) private pure returns (uint256) {\n        unchecked {\n            return a - b;\n        }\n    }\n\n}\n"
    },
    "contracts/libraries/Arrays.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\n\n/**\n * @dev Collection of functions related to array types.\n *      Modified from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Arrays.sol\n */\nlibrary Arrays {\n    /**\n     * @dev Searches a sorted `array` and returns the first index that contains\n     * a value greater or equal to `element`. If no such index exists (i.e. all\n     * values in the array are strictly less than `element`), the array length is\n     * returned. Time complexity O(log n).\n     *\n     * `array` is expected to be sorted in ascending order, and to contain no\n     * repeated elements.\n     */\n    function findUpperBound(uint256[] memory array, uint256 element) internal pure returns (uint256) {\n        if (array.length == 0) {\n            return 0;\n        }\n\n        uint256 low = 0;\n        uint256 high = array.length;\n\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n            // because Math.average rounds down (it does integer division with truncation).\n            if (array[mid] > element) {\n                high = mid;\n            } else {\n                unchecked {\n                    low = mid + 1;\n                }\n            }\n        }\n\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\n        if (low > 0 && array[low - 1] == element) {\n            unchecked {\n                return low - 1;\n            }\n        } else {\n            return low;\n        }\n    }\n}\n"
    },
    "contracts/libraries/LowLevelERC1155Transfer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n// Interfaces\nimport {IERC1155} from \"../interfaces/generic/IERC1155.sol\";\n\n// Errors\nimport {ERC1155SafeTransferFromFail, ERC1155SafeBatchTransferFromFail} from \"../errors/LowLevelErrors.sol\";\nimport {NotAContract} from \"../errors/GenericErrors.sol\";\n\n/**\n * @title LowLevelERC1155Transfer\n * @notice This contract contains low-level calls to transfer ERC1155 tokens.\n * @author LooksRare protocol team (👀,💎)\n */\ncontract LowLevelERC1155Transfer {\n    /**\n     * @notice Execute ERC1155 safeTransferFrom\n     * @param collection Address of the collection\n     * @param from Address of the sender\n     * @param to Address of the recipient\n     * @param tokenId tokenId to transfer\n     * @param amount Amount to transfer\n     */\n    function _executeERC1155SafeTransferFrom(\n        address collection,\n        address from,\n        address to,\n        uint256 tokenId,\n        uint256 amount\n    ) internal {\n        if (collection.code.length == 0) {\n            revert NotAContract();\n        }\n\n        (bool status, ) = collection.call(abi.encodeCall(IERC1155.safeTransferFrom, (from, to, tokenId, amount, \"\")));\n\n        if (!status) {\n            revert ERC1155SafeTransferFromFail();\n        }\n    }\n\n    /**\n     * @notice Execute ERC1155 safeBatchTransferFrom\n     * @param collection Address of the collection\n     * @param from Address of the sender\n     * @param to Address of the recipient\n     * @param tokenIds Array of tokenIds to transfer\n     * @param amounts Array of amounts to transfer\n     */\n    function _executeERC1155SafeBatchTransferFrom(\n        address collection,\n        address from,\n        address to,\n        uint256[] calldata tokenIds,\n        uint256[] calldata amounts\n    ) internal {\n        if (collection.code.length == 0) {\n            revert NotAContract();\n        }\n\n        (bool status, ) = collection.call(\n            abi.encodeCall(IERC1155.safeBatchTransferFrom, (from, to, tokenIds, amounts, \"\"))\n        );\n\n        if (!status) {\n            revert ERC1155SafeBatchTransferFromFail();\n        }\n    }\n}\n"
    },
    "contracts/libraries/LowLevelERC20Transfer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n// Interfaces\nimport {IERC20} from \"../interfaces/generic/IERC20.sol\";\n\n// Errors\nimport {ERC20TransferFail, ERC20TransferFromFail} from \"../errors/LowLevelErrors.sol\";\nimport {NotAContract} from \"../errors/GenericErrors.sol\";\n\n/**\n * @title LowLevelERC20Transfer\n * @notice This contract contains low-level calls to transfer ERC20 tokens.\n * @author LooksRare protocol team (👀,💎)\n */\ncontract LowLevelERC20Transfer {\n    /**\n     * @notice Execute ERC20 transferFrom\n     * @param currency Currency address\n     * @param from Sender address\n     * @param to Recipient address\n     * @param amount Amount to transfer\n     */\n    function _executeERC20TransferFrom(address currency, address from, address to, uint256 amount) internal {\n        if (currency.code.length == 0) {\n            revert NotAContract();\n        }\n\n        uint256 fromBalance = (IERC20)(currency).balanceOf(from);\n\n        if(amount > fromBalance) {\n            revert(string(\"insufficient balance\"));\n        }\n\n        (bool status, bytes memory data) = currency.call(abi.encodeCall(IERC20.transferFrom, (from, to, amount)));\n\n        if (!status) {\n            revert ERC20TransferFromFail();\n        }\n\n        if (data.length > 0) {\n            if (!abi.decode(data, (bool))) {\n                revert ERC20TransferFromFail();\n            }\n        }\n    }\n\n    /**\n     * @notice Execute ERC20 (direct) transfer\n     * @param currency Currency address\n     * @param to Recipient address\n     * @param amount Amount to transfer\n     */\n    function _executeERC20DirectTransfer(address currency, address to, uint256 amount) internal {\n        if (currency.code.length == 0) {\n            revert NotAContract();\n        }\n\n        (bool status, bytes memory data) = currency.call(abi.encodeCall(IERC20.transfer, (to, amount)));\n\n        if (!status) {\n            revert ERC20TransferFail();\n        }\n\n        if (data.length > 0) {\n            if (!abi.decode(data, (bool))) {\n                revert ERC20TransferFail();\n            }\n        }\n    }\n}\n"
    },
    "contracts/libraries/LowLevelERC721Transfer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n// Interfaces\nimport {IERC721} from \"../interfaces/generic/IERC721.sol\";\n\n// Errors\nimport {ERC721TransferFromFail} from \"../errors/LowLevelErrors.sol\";\nimport {NotAContract} from \"../errors/GenericErrors.sol\";\n\n/**\n * @title LowLevelERC721Transfer\n * @notice This contract contains low-level calls to transfer ERC721 tokens.\n * @author LooksRare protocol team (👀,💎)\n */\ncontract LowLevelERC721Transfer {\n    /**\n     * @notice Execute ERC721 transferFrom\n     * @param collection Address of the collection\n     * @param from Address of the sender\n     * @param to Address of the recipient\n     * @param tokenId tokenId to transfer\n     */\n    function _executeERC721TransferFrom(address collection, address from, address to, uint256 tokenId) internal {\n        if (collection.code.length == 0) {\n            revert NotAContract();\n        }\n\n        (bool status, ) = collection.call(abi.encodeCall(IERC721.transferFrom, (from, to, tokenId)));\n\n        if (!status) {\n            revert ERC721TransferFromFail();\n        }\n    }\n}\n"
    },
    "contracts/libraries/LowLevelWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n// Interfaces\nimport {IWETH} from \"../interfaces/generic/IWETH.sol\";\n\n/**\n * @title LowLevelWETH\n * @notice This contract contains a function to transfer ETH with an option to wrap to WETH.\n *         If the ETH transfer fails within a gas limit, the amount in ETH is wrapped to WETH and then transferred.\n * @author LooksRare protocol team (👀,💎)\n */\ncontract LowLevelWETH {\n    /**\n     * @notice It transfers ETH to a recipient with a specified gas limit.\n     *         If the original transfers fails, it wraps to WETH and transfers the WETH to recipient.\n     * @param _WETH WETH address\n     * @param _to Recipient address\n     * @param _amount Amount to transfer\n     * @param _gasLimit Gas limit to perform the ETH transfer\n     */\n    function _transferETHAndWrapIfFailWithGasLimit(\n        address _WETH,\n        address _to,\n        uint256 _amount,\n        uint256 _gasLimit\n    ) internal {\n        bool status;\n\n        assembly {\n            status := call(_gasLimit, _to, _amount, 0, 0, 0, 0)\n        }\n\n        if (!status) {\n            IWETH(_WETH).deposit{value: _amount}();\n            IWETH(_WETH).transfer(_to, _amount);\n        }\n    }\n}\n"
    },
    "contracts/libraries/OwnableTwoSteps.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n// Interfaces\nimport {IOwnableTwoSteps} from \"../interfaces/IOwnableTwoSteps.sol\";\n\n/**\n * @title OwnableTwoSteps\n * @notice This contract offers transfer of ownership in two steps with potential owner\n *         having to confirm the transaction to become the owner.\n *         Renouncement of the ownership is also a two-step process since the next potential owner is the address(0).\n * @author LooksRare protocol team (👀,💎)\n */\nabstract contract OwnableTwoSteps is IOwnableTwoSteps {\n    /**\n     * @notice Address of the current owner.\n     */\n    address public owner;\n\n    /**\n     * @notice Address of the potential owner.\n     */\n    address public potentialOwner;\n\n    /**\n     * @notice Ownership status.\n     */\n    Status public ownershipStatus;\n\n    /**\n     * @notice Modifier to wrap functions for contracts that inherit this contract.\n     */\n    modifier onlyOwner() {\n        _onlyOwner();\n        _;\n    }\n\n    /**\n     * @notice Constructor\n     * @param _owner The contract's owner\n     */\n    constructor(address _owner) {\n        owner = _owner;\n        emit NewOwner(_owner);\n    }\n\n    /**\n     * @notice This function is used to cancel the ownership transfer.\n     * @dev This function can be used for both cancelling a transfer to a new owner and\n     *      cancelling the renouncement of the ownership.\n     */\n    function cancelOwnershipTransfer() external onlyOwner {\n        Status _ownershipStatus = ownershipStatus;\n        if (_ownershipStatus == Status.NoOngoingTransfer) {\n            revert NoOngoingTransferInProgress();\n        }\n\n        if (_ownershipStatus == Status.TransferInProgress) {\n            delete potentialOwner;\n        }\n\n        delete ownershipStatus;\n\n        emit CancelOwnershipTransfer();\n    }\n\n    /**\n     * @notice This function is used to confirm the ownership renouncement.\n     */\n    function confirmOwnershipRenouncement() external onlyOwner {\n        if (ownershipStatus != Status.RenouncementInProgress) {\n            revert RenouncementNotInProgress();\n        }\n\n        delete owner;\n        delete ownershipStatus;\n\n        emit NewOwner(address(0));\n    }\n\n    /**\n     * @notice This function is used to confirm the ownership transfer.\n     * @dev This function can only be called by the current potential owner.\n     */\n    function confirmOwnershipTransfer() external {\n        if (ownershipStatus != Status.TransferInProgress) {\n            revert TransferNotInProgress();\n        }\n\n        if (msg.sender != potentialOwner) {\n            revert WrongPotentialOwner();\n        }\n\n        owner = msg.sender;\n        delete ownershipStatus;\n        delete potentialOwner;\n\n        emit NewOwner(msg.sender);\n    }\n\n    /**\n     * @notice This function is used to initiate the transfer of ownership to a new owner.\n     * @param newPotentialOwner New potential owner address\n     */\n    function initiateOwnershipTransfer(address newPotentialOwner) external onlyOwner {\n        if (ownershipStatus != Status.NoOngoingTransfer) {\n            revert TransferAlreadyInProgress();\n        }\n\n        ownershipStatus = Status.TransferInProgress;\n        potentialOwner = newPotentialOwner;\n\n        /**\n         * @dev This function can only be called by the owner, so msg.sender is the owner.\n         *      We don't have to SLOAD the owner again.\n         */\n        emit InitiateOwnershipTransfer(msg.sender, newPotentialOwner);\n    }\n\n    /**\n     * @notice This function is used to initiate the ownership renouncement.\n     */\n    function initiateOwnershipRenouncement() external onlyOwner {\n        if (ownershipStatus != Status.NoOngoingTransfer) {\n            revert TransferAlreadyInProgress();\n        }\n\n        ownershipStatus = Status.RenouncementInProgress;\n\n        emit InitiateOwnershipRenouncement();\n    }\n\n    function _onlyOwner() private view {\n        if (msg.sender != owner) revert NotOwner();\n    }\n}\n"
    },
    "contracts/libraries/PackableReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n// Interfaces\nimport {IReentrancyGuard} from \"../interfaces/IReentrancyGuard.sol\";\n\n/**\n * @title PackableReentrancyGuard\n * @notice This contract protects against reentrancy attacks.\n *         It is adjusted from OpenZeppelin.\n *         The only difference between this contract and ReentrancyGuard\n *         is that _status is uint8 instead of uint256 so that it can be\n *         packed with other contracts' storage variables.\n * @author LooksRare protocol team (👀,💎)\n */\nabstract contract PackableReentrancyGuard is IReentrancyGuard {\n    uint8 private _status;\n\n    /**\n     * @notice Modifier to wrap functions to prevent reentrancy calls.\n     */\n    modifier nonReentrant() {\n        if (_status == 2) {\n            revert ReentrancyFail();\n        }\n\n        _status = 2;\n        _;\n        _status = 1;\n    }\n\n    constructor() {\n        _status = 1;\n    }\n}\n"
    },
    "contracts/libraries/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n/**\n * @title Pausable\n * @notice This contract makes it possible to pause the contract.\n *         It is adjusted from OpenZeppelin.\n * @author LooksRare protocol team (👀,💎)\n */\nabstract contract Pausable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    error IsPaused();\n    error NotPaused();\n\n    bool private _paused;\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert IsPaused();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert NotPaused();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n"
    },
    "contracts/Lottery.sol": {
      "content": "// Lottery contract\n\n// ennter lottery anonymously\n// buy ticket with usdt\n// generate random ticket id by normal random function\n// pick a random winning ticket id (VRF Chainlink Oracle) verifiable random function\n// automatic every interval  -> automatic make\n\n// random pick -> chainlink oracle -> verifiable random function\n// automation -> chainlink keepers -> smart contract\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Imports\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\";\n\n// Errors -> gas efficient way to revert\nerror Lottery__NotEnoughETHTrasferred();\nerror Lottery__TrasferFailed();\nerror Lottery__NotOpen();\nerror Lottery__UpkeepNotNeeded(\n    uint256 balance,\n    uint256 lotteryState,\n    uint256 playerCount\n);\n\n/**\n * @title Lottery Contract\n * @author Gouldian\n * @dev This implements Chainlink VRF v2 and Chainlink Keepers\n */\ncontract Lottery is VRFConsumerBaseV2, KeeperCompatibleInterface, Ownable {\n    IERC20 public USDTInterface;\n\n    // Enum declaration here\n    enum LotteryState {\n        PENDING,\n        OPEN,\n        CLOSED,\n        DONE\n    } // enum -> list of values uint256 0 , 1\n\n    // State variables\n    address payable private a_feeCollector;\n    uint256 private s_ticketSupply;\n    uint256 private s_ticketRemaining;\n    uint256 private s_ticketPrice;\n    // uint256 private s_ticketFee;\n\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\n    bytes32 private immutable i_gasLane_keyHash;\n    uint64 private immutable i_subscriptionId;\n    uint32 private immutable i_callbackGasLimit;\n\n    uint16 private constant REQUEST_CONFIRMATIONS = 5; // 5 blocks for confirmation\n    uint16 private constant NUM_WORDS = 1; // 1 word\n    \n    mapping(uint => uint) private assignOrders;\n\n    // Lottery variables\n    uint256 private s_lotteryId;\n    uint256 private s_lotteryWinningId;\n    uint256 private s_latestRequestId;\n    address payable private s_lotteryWinner;\n    uint256 private s_lastLotteryTime;\n    uint256 private immutable i_lotteryInterval;\n    \n    LotteryState private s_lotteryState;    \n    address[] private s_players;\n    mapping(uint256 => mapping(address => uint256[])) playerInfos;\n    mapping(uint256 => mapping(uint256 => address payable)) ticketInfos;\n\n    // Constants\n    // uint256 private constant TICKET_SUPPLY = 1_000_000;\n    uint256 private constant TICKET_SUPPLY = 50;\n    uint256 private constant TICKET_LIMIT = 1000;\n    uint256 private constant TICKET_PRICE = 4e6;    // 4 USDT\n    uint256 private constant TICKET_FEE = 500;      // Fee is 5% (0.2 USDT) per each ticket\n    address private zeroAddress = address(0x0000000000000000000000000000);\n\n    // Events\n    event lotteryOpen_event();\n    event lotteryClose_event();\n    event lottery_event(address indexed player);\n    event buyTicket_event(address indexed player, uint256 amount);\n    event RequestLotteryWinner(uint256 indexed requestId);\n    event WinnerPicked(address indexed winner, uint256 winningTicketId);\n    event withdrawPrize_event(address indexed winner, uint256 prize);\n\n    // constructor\n    constructor(\n        address vrfCoordinatorV2,\n        bytes32 gasLane,\n        uint64 subscriptionId,\n        uint32 callbackGasLimit,\n        uint256 lotteryInterval,\n        address usdtInterface\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\n        require(usdtInterface != address(0), \"Zero USDT Interface Address\");\n\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\n        i_gasLane_keyHash = gasLane;\n        i_subscriptionId = subscriptionId;\n        i_callbackGasLimit = callbackGasLimit;\n        i_lotteryInterval = lotteryInterval;\n\n        s_lotteryState = LotteryState.PENDING;\n        s_ticketSupply = TICKET_SUPPLY;\n        s_ticketPrice = TICKET_PRICE;\n        // s_ticketFee = TICKET_PRICE * TICKET_FEE / 10000; // 0.05% of price is 2 USDT\n        \n        s_lotteryId = 0;\n\n        USDTInterface = IERC20(usdtInterface);\n        a_feeCollector = payable(msg.sender);\n    }\n\n    function startLottery() external onlyOwner {\n        require(s_lotteryState == LotteryState.DONE || s_lotteryState == LotteryState.PENDING, \"Lottery Not Closed\");\n\n        s_ticketRemaining = TICKET_SUPPLY;\n        s_lotteryState = LotteryState.OPEN;\n        s_lastLotteryTime = block.timestamp;\n        s_players = new address[](0);\n\n        emit lotteryOpen_event();\n    }\n\n    function closeLottery() external onlyOwner {\n        _closeLottery();\n    }\n\n    function _closeLottery() internal {\n        require(s_lotteryState == LotteryState.OPEN, \"Lottery Not Opened\");\n\n        getRandomNumber();\n\n        emit lotteryClose_event();\n    }\n\n\n    // Functions\n    function buyTicket(uint64 _amountOfTickets) public {\n        // 1. check if the lottery is open and ticket amount is available\n        require(s_lotteryState == LotteryState.OPEN, \"Lottery Not Opened\");\n        require(_amountOfTickets <= s_ticketRemaining, 'Not enough tickets remaining');\n        require(playerInfos[s_lotteryId][msg.sender].length + _amountOfTickets <= TICKET_LIMIT, 'Exceed ticket max limit');\n\n        // 2. check if the player has enough usdt\n        uint256 usdtAmount = s_ticketPrice * _amountOfTickets;\n        uint256 fee = usdtAmount * TICKET_FEE / 10000;\n\n        require(usdtAmount + fee <= USDTInterface.allowance(msg.sender, address(this)), \"Not enough USDT\");\n\n        // 3. send usdt to contract\n        USDTInterface.transferFrom(msg.sender, address(this), usdtAmount);\n        USDTInterface.transferFrom(msg.sender, a_feeCollector, fee);\n\n        // 4. buy tickets with random numbers\n        for(uint8 i = 0 ; i < _amountOfTickets ; i ++) {\n            randomBuyTicket();\n        }\n\n        s_players.push(msg.sender);\n\n        emit buyTicket_event(msg.sender, _amountOfTickets);\n    }\n\n    function getRandomNumber() internal {\n        s_lotteryState = LotteryState.CLOSED;\n\n        s_latestRequestId = i_vrfCoordinator.requestRandomWords(\n            i_gasLane_keyHash, // gase lane keyHash -> max gas price willing to pay for a requeist in wei : ID for off -chain VRF job\n            i_subscriptionId, // subscriptionId\n            REQUEST_CONFIRMATIONS,\n            i_callbackGasLimit, // gas limit for the callback\n            NUM_WORDS // number of random words to return 1 word\n        );\n        emit RequestLotteryWinner(s_latestRequestId);\n    }\n\n    /**\n     * @dev This is the function that the Chainlink Keeper will call to check if upkeep is needed.\n     * @dev they look for 'upkeepNeeded' to be true\n     * if condition match then returns true:\n     * 1. lottery -> open state\n     * 2. all ticket is sold out\n     */\n    function checkUpkeep(\n        bytes memory /* checkData */\n    )\n        public\n        view\n        override\n        returns (bool upkeepNeeded, bytes memory /* performData */)\n    {\n        bool isOpen = (s_lotteryState == LotteryState.OPEN);\n        bool enoughTime = ((block.timestamp - s_lastLotteryTime) > i_lotteryInterval);\n        upkeepNeeded = (isOpen && enoughTime && s_ticketRemaining == 0);\n    }\n\n    function performUpkeep(bytes calldata /* performData */) external override {\n        // validate if the upkeep is needed\n        (bool upkeepNeeded, ) = checkUpkeep(\"\");\n        if (!upkeepNeeded) {\n            revert Lottery__UpkeepNotNeeded(\n                address(this).balance,\n                uint256(s_lotteryState),\n                getPlayerCount()\n            );\n        }\n        _closeLottery();\n    }\n\n    function fulfillRandomWords(\n        uint256 requestId,\n        uint256[] memory randomWords\n    ) internal override {\n        require(s_latestRequestId == requestId, \"Wrong requestId\");\n\n        s_lotteryWinningId = randomWords[0] % s_ticketSupply;\n        address payable winner = ticketInfos[s_lotteryId][s_lotteryWinningId];\n        s_lotteryWinner = winner;\n\n        s_players = new address[](0);\n        s_lotteryState = LotteryState.DONE;\n        s_lastLotteryTime = block.timestamp;\n        s_lotteryId = s_lotteryId + 1;\n\n        emit WinnerPicked(winner, s_lotteryWinningId); // to get a history of winners using events\n    }\n\n    function randomBuyTicket() internal {\n        uint randIndex = _random() % s_ticketRemaining;\n        uint ticketId = _fillAssignOrder(--s_ticketRemaining, randIndex) + 1;\n\n        playerInfos[s_lotteryId][msg.sender].push(ticketId);\n        ticketInfos[s_lotteryId][ticketId] = payable(msg.sender);\n    }\n\n    /**\n     * @dev Generated the random ticket number.\n     */\n    function _random() internal view returns(uint) {\n        return uint(\n            keccak256(\n                abi.encodePacked(block.timestamp + block.prevrandao\n                    + ((uint(keccak256(abi.encodePacked(block.coinbase)))) / block.timestamp)\n                    + block.gaslimit + ((uint(keccak256(abi.encodePacked(msg.sender)))) / block.timestamp)\n                    + block.number)\n            )\n        ) / s_ticketRemaining;\n    }\n\n    /**\n     * @dev Check and regenerated the random ticket number.\n     */\n    function _fillAssignOrder(uint orderA, uint orderB) internal returns(uint) {\n        uint temp = orderA;\n        if (assignOrders[orderA] != 0) temp = assignOrders[orderA];\n        assignOrders[orderA] = orderB;\n        if (assignOrders[orderB] != 0) assignOrders[orderA] = assignOrders[orderB];\n        assignOrders[orderB] = temp;\n        return assignOrders[orderA];\n    }\n\n    // Set function\n    function setUSDTInterface(address _usdtInterface) external onlyOwner {\n        require(_usdtInterface != address(0), \"Zero USDT Interface Address\");\n\n        USDTInterface = IERC20( _usdtInterface);\n    }\n\n    function setFeeCollector(address payable _feeCollector) external onlyOwner {\n        require(_feeCollector != address(0));\n        a_feeCollector = _feeCollector;\n    }\n\n    function getFeeCollector() public view returns(address) {\n        return a_feeCollector;\n    }\n\n    function getTicketPrice() public view returns (uint256) {\n        return s_ticketPrice;\n    }\n\n    function getTicketFee() public view returns (uint256) {\n        return TICKET_PRICE * TICKET_FEE / 10000;\n    }\n\n    function getPlayerCount() public view returns (uint256) {\n        return s_players.length;\n    }\n\n    function getPlayer(uint256 index) public view returns (address) {\n        return s_players[index];\n    }\n\n    function getPlayerInfo(address _player) public view returns(uint256[] memory) {\n        return playerInfos[s_lotteryId][_player];\n    }\n\n    function getWinner() public view returns (address) {\n        return s_lotteryWinner;\n    }\n\n    function getWinningId() public view returns (uint256) {\n        return s_lotteryWinningId;\n    }\n\n    function getLotteryState() public view returns (LotteryState) {\n        return s_lotteryState;\n    }\n\n    function getCurrentLotteryID() public view returns (uint256) {\n        return s_lotteryId;\n    }\n\n    function getNumWord() public pure returns (uint256) {\n        return NUM_WORDS;\n    }\n\n    function getLastTimeStemp() public view returns (uint256) {\n        return s_lastLotteryTime;\n    }\n\n    function getRequestConfirmations() public pure returns (uint16) {\n        return REQUEST_CONFIRMATIONS; // number of confirmations to wait for before calling the callback\n    }\n\n    function getLotteryInterval() public view returns (uint256) {\n        return i_lotteryInterval;\n    }\n\n    function getRemainingTicketAmount() public view returns (uint256) {\n        return s_ticketRemaining;\n    }\n\n    function withdrawPrize() public {\n        require(s_lotteryWinner != address(0), \"No picked winner yet\");\n        require(msg.sender == s_lotteryWinner, \"Not a winner\");\n\n        uint256 usdtBalance = USDTInterface.balanceOf(address(this));\n        require(USDTInterface.approve(address(this), usdtBalance), \"USDT approve failed\");\n        \n        USDTInterface.transferFrom(address(this), msg.sender, usdtBalance);\n\n        // address zeroAddress = new address(0);\n        s_lotteryWinner = payable(zeroAddress);\n\n        emit withdrawPrize_event(s_lotteryWinner, usdtBalance);\n    }\n}\n"
    },
    "contracts/mock/ERC721Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport {ERC721} from \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\ncontract ERC721Mock is ERC721(\"MockERC721\", \"MockERC721\") {\n    uint256 public totalSupply;\n\n    function mint(address to, uint256 tokenId) public {\n        _mint(to, tokenId);\n        totalSupply += 1;\n    }\n\n    function batchMint(\n        address to,\n        uint256 fromTokenId,\n        uint256 count\n    ) public {\n        for (uint256 i; i < count; i++) {\n            _mint(to, fromTokenId + i);\n        }\n        totalSupply += count;\n    }\n}\n"
    },
    "contracts/mock/ProtocolFeeRecipient.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\n// LooksRare unopinionated libraries\nimport {LowLevelERC20Transfer} from \"@looksrare/contracts-libs/contracts/lowLevelCallers/LowLevelERC20Transfer.sol\";\nimport {IWETH} from \"@looksrare/contracts-libs/contracts/interfaces/generic/IWETH.sol\";\nimport {IERC20} from \"@looksrare/contracts-libs/contracts/interfaces/generic/IERC20.sol\";\n\n/**\n * @title ProtocolFeeRecipient\n * @notice This contract is used to receive protocol fees and transfer them to the fee sharing setter.\n *         Fee sharing setter cannot receive ETH directly, so we need to use this contract as a middleman\n *         to convert ETH into WETH before sending it.\n * @dev The code is the same as @looksrare/contracts-exchange-v2/contracts/ProtocolFeeRecipient.sol, except the Solidity\n *      version is 0.8.20 here.\n * @author LooksRare protocol team (👀,💎)\n */\ncontract ProtocolFeeRecipient is LowLevelERC20Transfer {\n    address public immutable FEE_SHARING_SETTER;\n    IWETH public immutable WETH;\n\n    error NothingToTransfer();\n\n    constructor(address _feeSharingSetter, address _weth) {\n        FEE_SHARING_SETTER = _feeSharingSetter;\n        WETH = IWETH(_weth);\n    }\n\n    function transferETH() external {\n        uint256 ethBalance = address(this).balance;\n\n        if (ethBalance != 0) {\n            WETH.deposit{value: ethBalance}();\n        }\n\n        uint256 wethBalance = IERC20(address(WETH)).balanceOf(address(this));\n\n        if (wethBalance == 0) {\n            revert NothingToTransfer();\n        }\n        _executeERC20DirectTransfer(address(WETH), FEE_SHARING_SETTER, wethBalance);\n    }\n\n    /**\n     * @param currency ERC20 currency address\n     */\n    function transferERC20(address currency) external {\n        uint256 balance = IERC20(currency).balanceOf(address(this));\n        if (balance == 0) {\n            revert NothingToTransfer();\n        }\n        _executeERC20DirectTransfer(currency, FEE_SHARING_SETTER, balance);\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts/mock/VRFCoordinatorV2Mock.sol": {
      "content": "//SPDX-Licence-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol\";\n"
    },
    "contracts/mock/WETHMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ncontract WETHMock {\n    string public name = \"Wrapped Ether\";\n    string public symbol = \"WETH\";\n    uint8 public decimals = 18;\n\n    event Approval(address indexed src, address indexed guy, uint256 wad);\n    event Transfer(address indexed src, address indexed dst, uint256 wad);\n    event Deposit(address indexed dst, uint256 wad);\n    event Withdrawal(address indexed src, uint256 wad);\n\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    receive() external payable {\n        deposit();\n    }\n\n    function deposit() public payable {\n        balanceOf[msg.sender] += msg.value;\n        emit Deposit(msg.sender, msg.value);\n    }\n\n    function withdraw(uint256 wad) public {\n        require(balanceOf[msg.sender] >= wad);\n        balanceOf[msg.sender] -= wad;\n        payable(msg.sender).transfer(wad);\n        emit Withdrawal(msg.sender, wad);\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return address(this).balance;\n    }\n\n    function approve(address guy, uint256 wad) public returns (bool) {\n        allowance[msg.sender][guy] = wad;\n        emit Approval(msg.sender, guy, wad);\n        return true;\n    }\n\n    function transfer(address dst, uint256 wad) public returns (bool) {\n        return transferFrom(msg.sender, dst, wad);\n    }\n\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 wad\n    ) public returns (bool) {\n        require(balanceOf[src] >= wad);\n\n        if (src != msg.sender && allowance[src][msg.sender] != type(uint256).max) {\n            require(allowance[src][msg.sender] >= wad);\n            allowance[src][msg.sender] -= wad;\n        }\n\n        balanceOf[src] -= wad;\n        balanceOf[dst] += wad;\n\n        emit Transfer(src, dst, wad);\n\n        return true;\n    }\n}\n"
    },
    "contracts/RaffleV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport {LowLevelWETH} from \"./libraries/LowLevelWETH.sol\";\nimport {LowLevelERC20Transfer} from \"./libraries/LowLevelERC20Transfer.sol\";\nimport {LowLevelERC721Transfer} from \"./libraries/LowLevelERC721Transfer.sol\";\nimport {LowLevelERC1155Transfer} from \"./libraries/LowLevelERC1155Transfer.sol\";\nimport {OwnableTwoSteps} from \"./libraries/OwnableTwoSteps.sol\";\nimport {PackableReentrancyGuard} from \"./libraries/PackableReentrancyGuard.sol\";\nimport {Pausable} from \"./libraries/Pausable.sol\";\nimport {Arrays} from \"./libraries/Arrays.sol\";\n\nimport {VRFConsumerBaseV2} from \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\nimport {VRFCoordinatorV2Interface} from \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\n\nimport \"./interfaces/IRaffle.sol\";\nimport {WinningEntrySearchLogic} from \"./WinningEntrySearchLogic.sol\";\n\nimport \"hardhat/console.sol\";\n\n/**\n * @title Raffle\n */\ncontract RaffleV1 is\n    IRaffle,\n    LowLevelWETH,\n    LowLevelERC20Transfer,\n    LowLevelERC721Transfer,\n    LowLevelERC1155Transfer,\n    VRFConsumerBaseV2,\n    OwnableTwoSteps,\n    PackableReentrancyGuard,\n    Pausable,\n    WinningEntrySearchLogic\n{\n    using Arrays for uint256[];\n\n    address public immutable WETH;\n\n    uint256 public constant ONE_DAY = 86_400 seconds;\n    uint256 public constant ONE_WEEK = 604_800 seconds;\n\n    /**\n     * @notice 100% in basis points.\n     */\n    uint256 public constant ONE_HUNDRED_PERCENT_BP = 10_000;\n\n    /**\n     * @notice The number of raffles created.\n     */\n    uint256 public rafflesCount;\n\n    /**\n     * @notice The raffles created.\n     * @dev The key is the raffle ID.\n     */\n    mapping(uint256 => Raffle) public raffles;\n\n    /**\n     * @notice The participants stats of the raffles.\n     * @dev The key is the raffle ID and the nested key is the participant address.\n     */\n    mapping(uint256 => mapping(address => ParticipantStats)) public rafflesParticipantsStats;\n\n    /**\n     * @notice It checks whether the currency is allowed.\n     */\n    mapping(address => bool) public isCurrencyAllowed;\n\n    /**\n     * @notice The maximum number of prizes per raffle.\n     *         Each individual ERC-721 counts as one prize.\n     *         Each ETH/ERC-20 with winnersCount > 1 counts as one prize.\n     */\n    uint256 public constant MAXIMUM_NUMBER_OF_PRIZES_PER_RAFFLE = 20;\n\n    /**\n     * @notice The maximum number of winners per raffle.\n     */\n    uint40 public constant MAXIMUM_NUMBER_OF_WINNERS_PER_RAFFLE = 250;\n\n    /**\n     * @notice A Chainlink node should wait for 3 confirmations before responding.\n     */\n    uint16 public constant REQUEST_CONFIRMATIONS = 3;\n\n    /**\n     * @notice The key hash of the Chainlink VRF.\n     */\n    bytes32 public immutable KEY_HASH;\n\n    /**\n     * @notice The subscription ID of the Chainlink VRF.\n     */\n    uint64 public immutable SUBSCRIPTION_ID;\n\n    /**\n     * @notice The Chainlink VRF coordinator.\n     */\n    VRFCoordinatorV2Interface public immutable VRF_COORDINATOR;\n\n    /**\n     * @notice The randomness requests.\n     * @dev The key is the request ID returned by Chainlink.\n     */\n    mapping(uint256 => RandomnessRequest) public randomnessRequests;\n\n    uint256 private latestRequestId;\n\n    /**\n     * @notice The maximum protocol fee in basis points, which is 25%.\n     */\n    uint16 public constant MAXIMUM_PROTOCOL_FEE_BP = 2_500;\n\n    /**\n     * @notice The protocol fee recipient.\n     */\n    address public protocolFeeRecipient;\n\n    /**\n     * @notice The protocol fee in basis points.\n     */\n    uint16 public protocolFeeBp;\n\n    /**\n     * @notice The claimable fees of the protocol fee recipient.\n     * @dev The key is the currency address.\n     */\n    mapping(address => uint256) public protocolFeeRecipientClaimableFees;\n\n    /**\n     * @notice The number of pricing options per raffle.\n     */\n    uint256 public constant PRICING_OPTIONS_PER_RAFFLE = 5;\n\n    /**\n     * @param _weth The WETH address\n     * @param _keyHash Chainlink VRF key hash\n     * @param _subscriptionId Chainlink VRF subscription ID\n     * @param _vrfCoordinator Chainlink VRF coordinator address\n     * @param _owner The owner of the contract\n     * @param _protocolFeeRecipient The recipient of the protocol fees\n     * @param _protocolFeeBp The protocol fee in basis points\n     */\n    constructor(\n        address _weth,\n        bytes32 _keyHash,\n        uint64 _subscriptionId,\n        address _vrfCoordinator,\n        address _owner,\n        address _protocolFeeRecipient,\n        uint16 _protocolFeeBp\n    ) VRFConsumerBaseV2(_vrfCoordinator) OwnableTwoSteps(_owner) {\n        _setProtocolFeeBp(_protocolFeeBp);\n        _setProtocolFeeRecipient(_protocolFeeRecipient);\n\n        WETH = _weth;\n        KEY_HASH = _keyHash;\n        VRF_COORDINATOR = VRFCoordinatorV2Interface(_vrfCoordinator);\n        SUBSCRIPTION_ID = _subscriptionId;\n    }\n\n    /**\n     * @inheritdoc IRaffle\n     * @dev This function can still be called when the contract is paused because the raffle creator\n     *      would not be able to deposit prizes and open the raffle anyway. The restriction to disallow\n     *      raffles creation when the contract is paused will be enforced in the frontend.\n     */\n    function createRaffle(CreateRaffleCalldata calldata params) external returns (uint256 raffleId) {\n        uint40 cutoffTime = params.cutoffTime;\n        if (_unsafeAdd(block.timestamp, ONE_DAY) > cutoffTime || cutoffTime > _unsafeAdd(block.timestamp, ONE_WEEK)) {\n            revert InvalidCutoffTime();\n        }\n\n        uint16 agreedProtocolFeeBp = params.protocolFeeBp;\n        if (agreedProtocolFeeBp != protocolFeeBp) {\n            revert InvalidProtocolFeeBp();\n        }\n\n        address feeTokenAddress = params.feeTokenAddress;\n        if (feeTokenAddress != address(0)) {\n            if (!isCurrencyAllowed[feeTokenAddress]) {\n                revert InvalidCurrency();\n            }\n        }\n\n        unchecked {\n            raffleId = ++rafflesCount;\n        }\n\n        uint256 prizesCount = params.prizes.length;\n        if (prizesCount == 0 || prizesCount > MAXIMUM_NUMBER_OF_PRIZES_PER_RAFFLE) {\n            revert InvalidPrizesCount();\n        }\n\n        Raffle storage raffle = raffles[raffleId];\n        uint40 cumulativeWinnersCount;\n        uint8 currentPrizeTier;\n        for (uint256 i; i < prizesCount; ) {\n            Prize memory prize = params.prizes[i];\n            if (prize.prizeTier < currentPrizeTier) {\n                revert InvalidPrize();\n            }\n            _validatePrize(prize);\n\n            cumulativeWinnersCount += prize.winnersCount;\n            prize.cumulativeWinnersCount = cumulativeWinnersCount;\n            currentPrizeTier = prize.prizeTier;\n            raffle.prizes.push(prize);\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        uint40 minimumEntries = params.minimumEntries;\n        if (cumulativeWinnersCount > minimumEntries || cumulativeWinnersCount > MAXIMUM_NUMBER_OF_WINNERS_PER_RAFFLE) {\n            revert InvalidWinnersCount();\n        }\n\n        _validateAndSetPricingOptions(raffleId, params.pricingOptions);\n\n        raffle.owner = msg.sender;\n        raffle.isMinimumEntriesFixed = params.isMinimumEntriesFixed;\n        raffle.cutoffTime = cutoffTime;\n        raffle.minimumEntries = minimumEntries;\n        raffle.maximumEntriesPerParticipant = params.maximumEntriesPerParticipant;\n        raffle.protocolFeeBp = agreedProtocolFeeBp;\n        raffle.feeTokenAddress = feeTokenAddress;\n        _setRaffleStatus(raffle, raffleId, RaffleStatus.Created);\n    }\n\n    /**\n     * @inheritdoc IRaffle\n     */\n    function depositPrizes(uint256 raffleId) external payable nonReentrant whenNotPaused {\n        Raffle storage raffle = raffles[raffleId];\n\n        _validateRaffleStatus(raffle, RaffleStatus.Created);\n        _validateCaller(raffle.owner);\n\n        Prize[] storage prizes = raffle.prizes;\n        uint256 prizesCount = prizes.length;\n        uint256 expectedEthValue;\n        for (uint256 i; i < prizesCount; ) {\n            Prize storage prize = prizes[i];\n            TokenType prizeType = prize.prizeType;\n            if (prizeType == TokenType.ERC721) {\n                _executeERC721TransferFrom(prize.prizeAddress, msg.sender, address(this), prize.prizeId);\n            } else if (prizeType == TokenType.ERC20) {\n                _executeERC20TransferFrom(\n                    prize.prizeAddress,\n                    msg.sender,\n                    address(this),\n                    prize.prizeAmount * prize.winnersCount\n                );\n            } else if (prizeType == TokenType.ETH) {\n                expectedEthValue += (prize.prizeAmount * prize.winnersCount);\n            } else {\n                _executeERC1155SafeTransferFrom(\n                    prize.prizeAddress,\n                    msg.sender,\n                    address(this),\n                    prize.prizeId,\n                    prize.prizeAmount * prize.winnersCount\n                );\n            }\n            unchecked {\n                ++i;\n            }\n        }\n\n        _validateExpectedEthValueOrRefund(expectedEthValue);\n\n        _setRaffleStatus(raffle, raffleId, RaffleStatus.Open);\n    }\n\n    /**\n     * @dev This function is required in order for the contract to receive ERC-1155 tokens.\n     */\n    // function onERC1155Received(\n    //     address,\n    //     address,\n    //     uint256,\n    //     uint256,\n    //     bytes calldata\n    // ) external pure returns (bytes4) {\n    //     return this.onERC1155Received.selector;\n    // }\n\n    /**\n     * @inheritdoc IRaffle\n     */\n    function enterRaffles(EntryCalldata[] calldata entries) external payable nonReentrant whenNotPaused {\n        uint256 entriesCount = entries.length;\n        uint208 expectedEthValue;\n        for (uint256 i; i < entriesCount; ) {\n            EntryCalldata calldata entry = entries[i];\n\n            if (entry.pricingOptionIndex >= PRICING_OPTIONS_PER_RAFFLE) {\n                revert InvalidIndex();\n            }\n\n            uint256 raffleId = entry.raffleId;\n            Raffle storage raffle = raffles[raffleId];\n\n            _validateRaffleStatus(raffle, RaffleStatus.Open);\n\n            if (block.timestamp >= raffle.cutoffTime) {\n                revert CutoffTimeReached();\n            }\n\n            PricingOption memory pricingOption = raffle.pricingOptions[entry.pricingOptionIndex];\n\n            uint40 newParticipantEntriesCount = rafflesParticipantsStats[raffleId][msg.sender].entriesCount +\n                pricingOption.entriesCount;\n            if (newParticipantEntriesCount > raffle.maximumEntriesPerParticipant) {\n                revert MaximumEntriesPerParticipantReached();\n            }\n            rafflesParticipantsStats[raffleId][msg.sender].entriesCount = newParticipantEntriesCount;\n\n            uint208 price = pricingOption.price;\n\n            if (raffle.feeTokenAddress == address(0)) {\n                expectedEthValue += price;\n            } else {\n                _executeERC20TransferFrom(raffle.feeTokenAddress, msg.sender, address(this), price);\n            }\n\n            uint40 currentEntryIndex;\n            uint256 raffleEntriesCount = raffle.entries.length;\n            if (raffleEntriesCount == 0) {\n                currentEntryIndex = uint40(_unsafeSubtract(pricingOption.entriesCount, 1));\n            } else {\n                currentEntryIndex =\n                    raffle.entries[_unsafeSubtract(raffleEntriesCount, 1)].currentEntryIndex +\n                    pricingOption.entriesCount;\n            }\n\n            if (raffle.isMinimumEntriesFixed) {\n                if (currentEntryIndex >= raffle.minimumEntries) {\n                    revert MaximumEntriesReached();\n                }\n            }\n\n            raffle.entries.push(Entry({currentEntryIndex: currentEntryIndex, participant: msg.sender}));\n            raffle.claimableFees += price;\n\n            rafflesParticipantsStats[raffleId][msg.sender].amountPaid += price;\n\n            emit EntrySold(raffleId, msg.sender, pricingOption.entriesCount, price);\n\n            if (currentEntryIndex >= _unsafeSubtract(raffle.minimumEntries, 1)) {\n                _drawWinners(raffleId, raffle);\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        _validateExpectedEthValueOrRefund(expectedEthValue);\n    }\n\n    /**\n     * @param _requestId The ID of the request\n     * @param _randomWords The random words returned by Chainlink\n     */\n    function fulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) internal override {\n        if (randomnessRequests[_requestId].exists && latestRequestId == _requestId) {\n            uint256 raffleId = randomnessRequests[_requestId].raffleId;\n            Raffle storage raffle = raffles[raffleId];\n\n            if (raffle.status == RaffleStatus.Drawing) {\n                _setRaffleStatus(raffle, raffleId, RaffleStatus.RandomnessFulfilled);\n                // We ignore the most significant byte to pack the random word with `exists`\n                randomnessRequests[_requestId].randomWord = uint248(_randomWords[0]);\n            }\n        }\n    }\n\n    /**\n     * @inheritdoc IRaffle\n     */\n    function selectWinners(uint256 requestId) external {\n        RandomnessRequest memory randomnessRequest = randomnessRequests[requestId];\n        if (!randomnessRequest.exists) {\n            revert RandomnessRequestDoesNotExist();\n        }\n\n        uint256 raffleId = randomnessRequest.raffleId;\n        Raffle storage raffle = raffles[raffleId];\n        _validateRaffleStatus(raffle, RaffleStatus.RandomnessFulfilled);\n\n        _setRaffleStatus(raffle, raffleId, RaffleStatus.Drawn);\n\n        Prize[] storage prizes = raffle.prizes;\n        uint256 prizesCount = prizes.length;\n        uint256 winnersCount = prizes[prizesCount - 1].cumulativeWinnersCount;\n\n        Entry[] memory entries = raffle.entries;\n        uint256 entriesCount = entries.length;\n        uint256 currentEntryIndex = uint256(entries[entriesCount - 1].currentEntryIndex);\n\n        uint256[] memory winningEntriesBitmap = new uint256[]((currentEntryIndex >> 8) + 1);\n\n        uint256[] memory currentEntryIndexArray = new uint256[](entriesCount);\n        for (uint256 i; i < entriesCount; ) {\n            currentEntryIndexArray[i] = entries[i].currentEntryIndex;\n            unchecked {\n                ++i;\n            }\n        }\n\n        uint256[] memory cumulativeWinnersCountArray = new uint256[](prizesCount);\n        for (uint256 i; i < prizesCount; ) {\n            cumulativeWinnersCountArray[i] = prizes[i].cumulativeWinnersCount;\n            unchecked {\n                ++i;\n            }\n        }\n\n        uint256 randomWord = randomnessRequest.randomWord;\n\n        for (uint256 i; i < winnersCount; ) {\n            uint256 winningEntry = randomWord % (currentEntryIndex + 1);\n            (winningEntry, winningEntriesBitmap) = _incrementWinningEntryUntilThereIsNotADuplicate(\n                currentEntryIndex,\n                winningEntry,\n                winningEntriesBitmap\n            );\n\n            raffle.winners.push(\n                Winner({\n                    participant: entries[currentEntryIndexArray.findUpperBound(winningEntry)].participant,\n                    claimed: false,\n                    prizeIndex: uint8(cumulativeWinnersCountArray.findUpperBound(_unsafeAdd(i, 1))),\n                    entryIndex: uint40(winningEntry)\n                })\n            );\n\n            randomWord = uint256(keccak256(abi.encodePacked(randomWord)));\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @inheritdoc IRaffle\n     */\n    function claimPrizes(ClaimPrizesCalldata[] calldata claimPrizesCalldata) external nonReentrant whenNotPaused {\n        uint256 claimsCount = claimPrizesCalldata.length;\n        for (uint256 i; i < claimsCount; ) {\n            _claimPrizesPerRaffle(claimPrizesCalldata[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @inheritdoc IRaffle\n     */\n    function claimProtocolFees(address currency) external onlyOwner {\n        uint256 claimableFees = protocolFeeRecipientClaimableFees[currency];\n        protocolFeeRecipientClaimableFees[currency] = 0;\n        _transferFungibleTokens(currency, protocolFeeRecipient, claimableFees);\n    }\n\n    /**\n     * @inheritdoc IRaffle\n     */\n    function claimFees(uint256 raffleId) external nonReentrant whenNotPaused {\n        Raffle storage raffle = raffles[raffleId];\n        _validateRaffleStatus(raffle, RaffleStatus.Drawn);\n\n        address raffleOwner = raffle.owner;\n        if (msg.sender != raffleOwner) {\n            _validateCaller(owner);\n        }\n\n        uint208 claimableFees = raffle.claimableFees;\n        uint208 protocolFees = (claimableFees * uint208(raffle.protocolFeeBp)) / uint208(ONE_HUNDRED_PERCENT_BP);\n        unchecked {\n            claimableFees -= protocolFees;\n        }\n\n        _setRaffleStatus(raffle, raffleId, RaffleStatus.Complete);\n\n        raffle.claimableFees = 0;\n\n        address feeTokenAddress = raffle.feeTokenAddress;\n        _transferFungibleTokens(feeTokenAddress, raffleOwner, claimableFees);\n\n        if (protocolFees != 0) {\n            protocolFeeRecipientClaimableFees[feeTokenAddress] += protocolFees;\n        }\n\n        emit FeesClaimed(raffleId, claimableFees);\n    }\n\n    /**\n     * @inheritdoc IRaffle\n     */\n    function cancel(uint256 raffleId) external nonReentrant whenNotPaused {\n        Raffle storage raffle = raffles[raffleId];\n        bool isOpen = raffle.status == RaffleStatus.Open;\n\n        if (isOpen) {\n            console.log(\"raffle.cutoffTime:\", raffle.cutoffTime);\n            console.log(\"block.timestamp:\", block.timestamp);\n\n            if (raffle.cutoffTime > block.timestamp) {\n                revert CutoffTimeNotReached();\n            }\n        } else {\n            _validateRaffleStatus(raffle, RaffleStatus.Created);\n        }\n\n        _setRaffleStatus(raffle, raffleId, isOpen ? RaffleStatus.Refundable : RaffleStatus.Cancelled);\n    }\n\n    /**\n     * @inheritdoc IRaffle\n     */\n    function cancelAfterRandomnessRequest(uint256 raffleId) external onlyOwner nonReentrant {\n        Raffle storage raffle = raffles[raffleId];\n\n        _validateRaffleStatus(raffle, RaffleStatus.Drawing);\n\n        if (block.timestamp < raffle.drawnAt + ONE_DAY) {\n            revert DrawExpirationTimeNotReached();\n        }\n\n        _setRaffleStatus(raffle, raffleId, RaffleStatus.Refundable);\n    }\n\n    /**\n     * @inheritdoc IRaffle\n     */\n    function withdrawPrizes(uint256 raffleId) external nonReentrant whenNotPaused {\n        Raffle storage raffle = raffles[raffleId];\n        _validateRaffleStatus(raffle, RaffleStatus.Refundable);\n\n        _setRaffleStatus(raffle, raffleId, RaffleStatus.Cancelled);\n\n        uint256 prizesCount = raffle.prizes.length;\n        address raffleOwner = raffle.owner;\n        for (uint256 i; i < prizesCount; ) {\n            Prize storage prize = raffle.prizes[i];\n            _transferPrize({prize: prize, recipient: raffleOwner, multiplier: uint256(prize.winnersCount)});\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @inheritdoc IRaffle\n     * @dev Refundable and Cancelled are the only statuses that allow refunds.\n     */\n    function claimRefund(uint256[] calldata raffleIds) external nonReentrant whenNotPaused {\n        uint256 count = raffleIds.length;\n\n        for (uint256 i; i < count; ) {\n            uint256 raffleId = raffleIds[i];\n            Raffle storage raffle = raffles[raffleId];\n\n            if (raffle.status < RaffleStatus.Refundable) {\n                revert InvalidStatus();\n            }\n\n            ParticipantStats storage stats = rafflesParticipantsStats[raffleId][msg.sender];\n\n            if (stats.refunded) {\n                revert AlreadyRefunded();\n            }\n\n            stats.refunded = true;\n\n            uint208 amountPaid = stats.amountPaid;\n            _transferFungibleTokens(raffle.feeTokenAddress, msg.sender, amountPaid);\n\n            emit EntryRefunded(raffleId, msg.sender, amountPaid);\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @inheritdoc IRaffle\n     */\n    function setProtocolFeeRecipient(address _protocolFeeRecipient) external onlyOwner {\n        _setProtocolFeeRecipient(_protocolFeeRecipient);\n    }\n\n    /**\n     * @inheritdoc IRaffle\n     */\n    function setProtocolFeeBp(uint16 _protocolFeeBp) external onlyOwner {\n        _setProtocolFeeBp(_protocolFeeBp);\n    }\n\n    /**\n     * @inheritdoc IRaffle\n     */\n    function updateCurrenciesStatus(address[] calldata currencies, bool isAllowed) external onlyOwner {\n        uint256 count = currencies.length;\n        for (uint256 i; i < count; ) {\n            isCurrencyAllowed[currencies[i]] = isAllowed;\n            unchecked {\n                ++i;\n            }\n        }\n        emit CurrenciesStatusUpdated(currencies, isAllowed);\n    }\n\n    /**\n     * @inheritdoc IRaffle\n     */\n    function togglePaused() external onlyOwner {\n        paused() ? _unpause() : _pause();\n    }\n\n    /**\n     * @inheritdoc IRaffle\n     */\n    function getWinners(uint256 raffleId) external view returns (Winner[] memory winners) {\n        winners = raffles[raffleId].winners;\n    }\n\n    /**\n     * @inheritdoc IRaffle\n     */\n    function getPrizes(uint256 raffleId) external view returns (Prize[] memory prizes) {\n        prizes = raffles[raffleId].prizes;\n    }\n\n    /**\n     * @inheritdoc IRaffle\n     */\n    function getEntries(uint256 raffleId) external view returns (Entry[] memory entries) {\n        entries = raffles[raffleId].entries;\n    }\n\n    /**\n     * @inheritdoc IRaffle\n     */\n    function getPricingOptions(uint256 raffleId)\n        external\n        view\n        returns (PricingOption[PRICING_OPTIONS_PER_RAFFLE] memory pricingOptions)\n    {\n        pricingOptions = raffles[raffleId].pricingOptions;\n    }\n\n    function getLatestRequestId() external view returns (uint256) {\n        return latestRequestId;\n    }\n\n    /**\n     * @param _protocolFeeRecipient The new protocol fee recipient address\n     */\n    function _setProtocolFeeRecipient(address _protocolFeeRecipient) private {\n        if (_protocolFeeRecipient == address(0)) {\n            revert InvalidProtocolFeeRecipient();\n        }\n        protocolFeeRecipient = _protocolFeeRecipient;\n        emit ProtocolFeeRecipientUpdated(_protocolFeeRecipient);\n    }\n\n    /**\n     * @param _protocolFeeBp The new protocol fee in basis points\n     */\n    function _setProtocolFeeBp(uint16 _protocolFeeBp) private {\n        if (_protocolFeeBp > MAXIMUM_PROTOCOL_FEE_BP) {\n            revert InvalidProtocolFeeBp();\n        }\n        protocolFeeBp = _protocolFeeBp;\n        emit ProtocolFeeBpUpdated(_protocolFeeBp);\n    }\n\n    /**\n     * @param raffleId The ID of the raffle.\n     * @param pricingOptions The pricing options for the raffle.\n     */\n    function _validateAndSetPricingOptions(\n        uint256 raffleId,\n        PricingOption[PRICING_OPTIONS_PER_RAFFLE] calldata pricingOptions\n    ) private {\n        for (uint256 i; i < PRICING_OPTIONS_PER_RAFFLE; ) {\n            PricingOption memory pricingOption = pricingOptions[i];\n\n            uint40 entriesCount = pricingOption.entriesCount;\n            uint208 price = pricingOption.price;\n\n            if (i == 0) {\n                if (entriesCount != 1 || price == 0) {\n                    revert InvalidPricingOption();\n                }\n            } else {\n                PricingOption memory lastPricingOption = pricingOptions[_unsafeSubtract(i, 1)];\n                uint208 lastPrice = lastPricingOption.price;\n                uint40 lastEntriesCount = lastPricingOption.entriesCount;\n\n                console.log(\"price\", price);\n                console.log(\" entriesCount\", entriesCount);\n                console.log(\"lastEntriesCount\", lastEntriesCount);\n                console.log(\"lastPrice\", lastPrice);\n\n                if (\n                    price % entriesCount != 0 ||\n                    entriesCount <= lastEntriesCount ||\n                    price <= lastPrice ||\n                    price / entriesCount > lastPrice / lastEntriesCount\n                ) {\n                    revert InvalidPricingOption();\n                }\n            }\n\n            raffles[raffleId].pricingOptions[i] = pricingOption;\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @param prize The prize.\n     */\n    function _validatePrize(Prize memory prize) private view {\n        if (prize.prizeType == TokenType.ERC721) {\n            if (prize.prizeAmount != 1 || prize.winnersCount != 1) {\n                revert InvalidPrize();\n            }\n        } else {\n            if (prize.prizeType == TokenType.ERC20) {\n                if (!isCurrencyAllowed[prize.prizeAddress]) {\n                    revert InvalidCurrency();\n                }\n            }\n\n            if (prize.prizeAmount == 0 || prize.winnersCount == 0) {\n                revert InvalidPrize();\n            }\n        }\n    }\n\n    /**\n     * @param prize The prize to transfer.\n     * @param recipient The recipient of the prize.\n     * @param multiplier The multiplier to apply to the prize amount.\n     */\n    function _transferPrize(\n        Prize storage prize,\n        address recipient,\n        uint256 multiplier\n    ) private {\n        TokenType prizeType = prize.prizeType;\n        address prizeAddress = prize.prizeAddress;\n        if (prizeType == TokenType.ERC721) {\n            _executeERC721TransferFrom(prizeAddress, address(this), recipient, prize.prizeId);\n        } else if (prizeType == TokenType.ERC1155) {\n            _executeERC1155SafeTransferFrom(\n                prizeAddress,\n                address(this),\n                recipient,\n                prize.prizeId,\n                prize.prizeAmount * multiplier\n            );\n        } else {\n            _transferFungibleTokens(prizeAddress, recipient, prize.prizeAmount * multiplier);\n        }\n    }\n\n    /**\n     * @param currency The currency to transfer.\n     * @param recipient The recipient of the currency.\n     * @param amount The amount of currency to transfer.\n     */\n    function _transferFungibleTokens(\n        address currency,\n        address recipient,\n        uint256 amount\n    ) private {\n        if (currency == address(0)) {\n            _transferETHAndWrapIfFailWithGasLimit(WETH, recipient, amount, gasleft());\n        } else {\n            _executeERC20DirectTransfer(currency, recipient, amount);\n        }\n    }\n\n    /**\n     * @param claimPrizesCalldata The calldata for claiming prizes.\n     */\n    function _claimPrizesPerRaffle(ClaimPrizesCalldata calldata claimPrizesCalldata) private {\n        uint256 raffleId = claimPrizesCalldata.raffleId;\n        Raffle storage raffle = raffles[raffleId];\n        RaffleStatus status = raffle.status;\n        if (status != RaffleStatus.Drawn) {\n            _validateRaffleStatus(raffle, RaffleStatus.Complete);\n        }\n\n        Winner[] storage winners = raffle.winners;\n        uint256[] calldata winnerIndices = claimPrizesCalldata.winnerIndices;\n        uint256 winnersCount = winners.length;\n        uint256 claimsCount = winnerIndices.length;\n        for (uint256 i; i < claimsCount; ) {\n            uint256 winnerIndex = winnerIndices[i];\n\n            if (winnerIndex >= winnersCount) {\n                revert InvalidIndex();\n            }\n\n            Winner storage winner = winners[winnerIndex];\n            if (winner.claimed) {\n                revert PrizeAlreadyClaimed();\n            }\n            _validateCaller(winner.participant);\n            winner.claimed = true;\n\n            Prize storage prize = raffle.prizes[winner.prizeIndex];\n            _transferPrize({prize: prize, recipient: msg.sender, multiplier: 1});\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        emit PrizesClaimed(raffleId, winnerIndices);\n    }\n\n    /**\n     * @param raffleId The ID of the raffle to draw winners for.\n     * @param raffle The raffle to draw winners for.\n     */\n    function _drawWinners(uint256 raffleId, Raffle storage raffle) private {\n        _setRaffleStatus(raffle, raffleId, RaffleStatus.Drawing);\n        raffle.drawnAt = uint40(block.timestamp);\n\n        uint256 requestId = VRF_COORDINATOR.requestRandomWords(\n            KEY_HASH,\n            SUBSCRIPTION_ID,\n            REQUEST_CONFIRMATIONS,\n            uint32(500_000),\n            uint32(1)\n        );\n\n        latestRequestId = requestId;\n\n        if (randomnessRequests[requestId].exists) {\n            revert RandomnessRequestAlreadyExists();\n        }\n\n        randomnessRequests[requestId].exists = true;\n        randomnessRequests[requestId].raffleId = raffleId;\n\n        emit RandomnessRequested(raffleId, requestId);\n    }\n\n    /**\n     * @param raffle The raffle to check the status of.\n     * @param status The expected status of the raffle\n     */\n    function _validateRaffleStatus(Raffle storage raffle, RaffleStatus status) private view {\n        if (raffle.status != status) {\n            revert InvalidStatus();\n        }\n    }\n\n    /**\n     * @param caller The expected caller.\n     */\n    function _validateCaller(address caller) private view {\n        if (msg.sender != caller) {\n            revert InvalidCaller();\n        }\n    }\n\n    /**\n     * @param expectedEthValue The expected ETH value to be sent by the caller.\n     */\n    function _validateExpectedEthValueOrRefund(uint256 expectedEthValue) private {\n        if (expectedEthValue > msg.value) {\n            revert InsufficientNativeTokensSupplied();\n        } else if (msg.value > expectedEthValue) {\n            _transferETHAndWrapIfFailWithGasLimit(\n                WETH,\n                msg.sender,\n                _unsafeSubtract(msg.value, expectedEthValue),\n                gasleft()\n            );\n        }\n    }\n\n    /**\n     * @param raffle The raffle to set the status of.\n     * @param raffleId The ID of the raffle to set the status of.\n     * @param status The status to set.\n     */\n    function _setRaffleStatus(\n        Raffle storage raffle,\n        uint256 raffleId,\n        RaffleStatus status\n    ) private {\n        raffle.status = status;\n        emit RaffleStatusUpdated(raffleId, status);\n    }\n\n    function _unsafeAdd(uint256 a, uint256 b) private pure returns (uint256) {\n        unchecked {\n            return a + b;\n        }\n    }\n\n    function _unsafeSubtract(uint256 a, uint256 b) private pure returns (uint256) {\n        unchecked {\n            return a - b;\n        }\n    }\n}\n"
    },
    "contracts/RaffleV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport {LowLevelWETH} from \"./libraries/LowLevelWETH.sol\";\nimport {LowLevelERC20Transfer} from \"./libraries/LowLevelERC20Transfer.sol\";\nimport {LowLevelERC721Transfer} from \"./libraries/LowLevelERC721Transfer.sol\";\nimport {LowLevelERC1155Transfer} from \"./libraries/LowLevelERC1155Transfer.sol\";\nimport {OwnableTwoSteps} from \"./libraries/OwnableTwoSteps.sol\";\nimport {PackableReentrancyGuard} from \"./libraries/PackableReentrancyGuard.sol\";\nimport {Pausable} from \"./libraries/Pausable.sol\";\nimport {ITransferManager} from \"./interfaces/ITransferManager.sol\";\n\nimport {VRFCoordinatorV2Interface} from \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\nimport {VRFConsumerBaseV2} from \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\n\nimport {Arrays} from \"./libraries/Arrays.sol\";\n\nimport {WinningEntrySearchLogicV2} from \"./WinningEntrySearchLogicV2.sol\";\n\nimport {IRaffleV2} from \"./interfaces/IRaffleV2.sol\";\n\nimport \"hardhat/console.sol\";\n\n/**\n * @title RaffleV2\n * @notice This contract allows anyone to permissionlessly host raffles on LooksRare.\n * @author LooksRare protocol team (👀,💎)\n */\ncontract RaffleV2 is\n    IRaffleV2,\n    LowLevelWETH,\n    LowLevelERC20Transfer,\n    LowLevelERC721Transfer,\n    LowLevelERC1155Transfer,\n    VRFConsumerBaseV2,\n    OwnableTwoSteps,\n    PackableReentrancyGuard,\n    Pausable,\n    WinningEntrySearchLogicV2\n{\n    using Arrays for uint256[];\n\n    address private immutable WETH;\n\n    uint256 private constant ONE_DAY = 86_400 seconds;\n    uint256 private constant ONE_WEEK = 604_800 seconds;\n\n    /**\n     * @notice 100% in basis points.\n     */\n    uint256 private constant ONE_HUNDRED_PERCENT_BP = 10_000;\n\n    /**\n     * @notice The raffles created.\n     * @dev The key is the raffle ID.\n     */\n    mapping(uint256 => Raffle) public raffles;\n\n    /**\n     * @notice The participants stats of the raffles.\n     * @dev The key is the raffle ID and the nested key is the participant address.\n     */\n    mapping(uint256 => mapping(address => ParticipantStats)) public rafflesParticipantsStats;\n\n    /**\n     * @notice It checks whether the currency is allowed.\n     * @dev 0 is not allowed, 1 is allowed.\n     */\n    mapping(address => uint256) public isCurrencyAllowed;\n\n    /**\n     * @notice The maximum number of prizes per raffle.\n     *         Each individual ERC-721 counts as one prize.\n     *         Each ETH/ERC-20/ERC-1155 with winnersCount > 1 counts as one prize.\n     */\n    uint256 public constant MAXIMUM_NUMBER_OF_PRIZES_PER_RAFFLE = 200;\n\n    /**\n     * @notice The maximum number of winners per raffle.\n     */\n    uint40 public constant MAXIMUM_NUMBER_OF_WINNERS_PER_RAFFLE = 2500;\n\n    /**\n     * @notice The key hash of the Chainlink VRF.\n     */\n    bytes32 private immutable KEY_HASH;\n\n    /**\n     * @notice The subscription ID of the Chainlink VRF.\n     */\n    uint64 public immutable SUBSCRIPTION_ID;\n\n    /**\n     * @notice The Chainlink VRF coordinator.\n     */\n    VRFCoordinatorV2Interface private immutable VRF_COORDINATOR;\n\n    /**\n     * @notice The randomness requests.\n     * @dev The key is the request ID returned by Chainlink.\n     */\n    mapping(uint256 => RandomnessRequest) public randomnessRequests;\n\n    uint256 private latestRequestId;\n\n    /**\n     * @notice The maximum protocol fee in basis points, which is 25%.\n     */\n    uint16 public constant MAXIMUM_PROTOCOL_FEE_BP = 2_500;\n\n    /**\n     * @notice The number of raffles created.\n     * @dev In this smart contract, raffleId is an uint256 but its\n     *      max value can only be 2^80 - 1. Realistically we will still\n     *      not reach this number.\n     */\n    uint80 public rafflesCount;\n\n    /**\n     * @notice The protocol fee recipient.\n     */\n    address public protocolFeeRecipient;\n\n    /**\n     * @notice The protocol fee in basis points.\n     */\n    uint16 public protocolFeeBp;\n\n    /**\n     * @notice The maximum number of pricing options per raffle.\n     */\n    uint256 public constant MAXIMUM_PRICING_OPTIONS_PER_RAFFLE = 5;\n\n    /**\n     * @notice Transfer manager faciliates token transfers.\n     */\n    ITransferManager private immutable transferManager;\n\n    /**\n     * @param _weth The WETH address\n     * @param _keyHash Chainlink VRF key hash\n     * @param _subscriptionId Chainlink VRF subscription ID\n     * @param _vrfCoordinator Chainlink VRF coordinator address\n     * @param _owner The owner of the contract\n     * @param _protocolFeeRecipient The recipient of the protocol fees\n     * @param _protocolFeeBp The protocol fee in basis points\n     * @param _transferManager The transfer manager address\n     */\n    constructor(\n        address _weth,\n        bytes32 _keyHash,\n        uint64 _subscriptionId,\n        address _vrfCoordinator,\n        address _owner,\n        address _protocolFeeRecipient,\n        uint16 _protocolFeeBp,\n        address _transferManager\n    ) VRFConsumerBaseV2(_vrfCoordinator) OwnableTwoSteps(_owner) {\n        _setProtocolFeeBp(_protocolFeeBp);\n        _setProtocolFeeRecipient(_protocolFeeRecipient);\n\n        WETH = _weth;\n        KEY_HASH = _keyHash;\n        VRF_COORDINATOR = VRFCoordinatorV2Interface(_vrfCoordinator);\n        SUBSCRIPTION_ID = _subscriptionId;\n        transferManager = ITransferManager(_transferManager);\n    }\n\n    /**\n     * @inheritdoc IRaffleV2\n     */\n    function createRaffle(CreateRaffleCalldata calldata params)\n        external\n        payable\n        nonReentrant\n        whenNotPaused\n        returns (uint256 raffleId)\n    {\n        uint40 cutoffTime = params.cutoffTime;\n        if (_unsafeAdd(block.timestamp, ONE_DAY) > cutoffTime || cutoffTime > _unsafeAdd(block.timestamp, ONE_WEEK)) {\n            revert InvalidCutoffTime();\n        }\n\n        uint16 agreedProtocolFeeBp = params.protocolFeeBp;\n        if (agreedProtocolFeeBp != protocolFeeBp) {\n            revert InvalidProtocolFeeBp();\n        }\n\n        address feeTokenAddress = params.feeTokenAddress;\n        if (feeTokenAddress != address(0)) {\n            _validateCurrency(feeTokenAddress);\n        }\n\n        uint256 prizesCount = params.prizes.length;\n        if (prizesCount == 0 || prizesCount > MAXIMUM_NUMBER_OF_PRIZES_PER_RAFFLE) {\n            revert InvalidPrizesCount();\n        }\n\n        unchecked {\n            raffleId = ++rafflesCount;\n        }\n\n        // The storage layout of a prize struct (3 slots) is as follows:\n        // --------------------------------------------------------------------------------------------------------------------------------|\n        // | prizeAddress (160 bits) | prizeTier (8 bits) | prizeType (8 bits) | cumulativeWinnersCount (40 bits) | winnersCount (40 bits) |\n        // --------------------------------------------------------------------------------------------------------------------------------|\n        // | prizeId (256 bits)                                                                                                            |\n        // --------------------------------------------------------------------------------------------------------------------------------|\n        // | prizeAmount (256 bits)                                                                                                        |\n        //\n        // The slot keccak256(raffleId, rafflesSlot) + 4 is used to store the length of the prizes array.\n        // The slot keccak256(keccak256(raffleId, rafflesSlot) + 4) + i * 3 is used to store the prize at the i-th index\n        // (x 3 because each prize consumes 3 slots).\n        //\n        // The assembly blocks are equivalent to `raffle.prizes.push(prize);`\n        //\n        // The primary benefit of using assembly is we only write the prizes length once instead of once per prize.\n        uint256 raffleSlot;\n        uint256 prizesLengthSlot;\n        uint256 individualPrizeSlotOffset;\n        assembly {\n            mstore(0x00, raffleId)\n            mstore(0x20, raffles.slot)\n            raffleSlot := keccak256(0x00, 0x40)\n\n            prizesLengthSlot := add(keccak256(0x00, 0x40), 4)\n\n            mstore(0x00, prizesLengthSlot)\n            individualPrizeSlotOffset := keccak256(0x00, 0x20)\n        }\n\n        uint256 expectedEthValue;\n        uint40 cumulativeWinnersCount;\n        {\n            uint8 currentPrizeTier;\n            for (uint256 i; i < prizesCount; ) {\n                Prize memory prize = params.prizes[i];\n                uint8 prizeTier = prize.prizeTier;\n                if (prizeTier < currentPrizeTier) {\n                    revert InvalidPrize();\n                }\n                _validatePrize(prize);\n\n                TokenType prizeType = prize.prizeType;\n                uint40 winnersCount = prize.winnersCount;\n                address prizeAddress = prize.prizeAddress;\n                uint256 prizeId = prize.prizeId;\n                uint256 prizeAmount = prize.prizeAmount;\n                if (prizeType == TokenType.ERC721) {\n                    transferManager.transferItemERC721(prizeAddress, msg.sender, address(this), prizeId);\n                } else if (prizeType == TokenType.ERC20) {\n                    transferManager.transferERC20(prizeAddress, msg.sender, address(this), prizeAmount * winnersCount);\n                } else if (prizeType == TokenType.ETH) {\n                    expectedEthValue += (prizeAmount * winnersCount);\n                } else {\n                    transferManager.transferItemERC1155(\n                        prizeAddress,\n                        msg.sender,\n                        address(this),\n                        prizeId,\n                        prizeAmount * winnersCount\n                    );\n                }\n\n                cumulativeWinnersCount += winnersCount;\n                currentPrizeTier = prizeTier;\n\n                assembly {\n                    let prizeSlotOne := winnersCount\n                    prizeSlotOne := or(prizeSlotOne, shl(40, cumulativeWinnersCount))\n                    prizeSlotOne := or(prizeSlotOne, shl(80, prizeType))\n                    prizeSlotOne := or(prizeSlotOne, shl(88, prizeTier))\n                    prizeSlotOne := or(prizeSlotOne, shl(96, prizeAddress))\n\n                    let currentPrizeSlotOffset := add(individualPrizeSlotOffset, mul(i, 3))\n                    sstore(currentPrizeSlotOffset, prizeSlotOne)\n                    sstore(add(currentPrizeSlotOffset, 1), prizeId)\n                    sstore(add(currentPrizeSlotOffset, 2), prizeAmount)\n                }\n\n                unchecked {\n                    ++i;\n                }\n            }\n\n            assembly {\n                sstore(prizesLengthSlot, prizesCount)\n            }\n        }\n        _validateExpectedEthValueOrRefund(expectedEthValue);\n\n        uint40 minimumEntries = params.minimumEntries;\n        if (cumulativeWinnersCount > minimumEntries || cumulativeWinnersCount > MAXIMUM_NUMBER_OF_WINNERS_PER_RAFFLE) {\n            revert InvalidWinnersCount();\n        }\n\n        _validateAndSetPricingOptions(raffleId, minimumEntries, params.pricingOptions);\n\n        console.log(\"validateAndSetPricingOptions\");\n\n        bool isMinimumEntriesFixed = params.isMinimumEntriesFixed;\n        uint40 maximumEntriesPerParticipant = params.maximumEntriesPerParticipant;\n        // The storage layout of a raffle's first 2 slots is as follows:\n        // ---------------------------------------------------------------------------------------------------------------------------------|\n        // | drawnAt (40 bits) | cutoffTime (40 bits) | isMinimumEntriesFixed (8 bits) | status (8 bits) | owner (160 bits)                 |\n        // ---------------------------------------------------------------------------------------------------------------------------------|\n        // | agreedProtocolFeeBp (16 bits) | feeTokenAddress (160 bits) | maximumEntriesPerParticipant (40 bits) | minimumEntries (40 bits) |\n        // ---------------------------------------------------------------------------------------------------------------------------------|\n        //\n        // And the slots for these values are calculated by the following formulas:\n        // slot 1 = keccak256(raffleId, rafflesSlot)\n        // slot 2 = keccak256(raffleId, rafflesSlot) + 1\n        //\n        // This assembly block is equivalent to\n        // raffle.owner = msg.sender;\n        // raffle.status = RaffleStatus.Open;\n        // raffle.isMinimumEntriesFixed = isMinimumEntriesFixed;\n        // raffle.cutoffTime = cutoffTime;\n        // raffle.minimumEntries = minimumEntries;\n        // raffle.maximumEntriesPerParticipant = maximumEntriesPerParticipant;\n        // raffle.protocolFeeBp = agreedProtocolFeeBp;\n        // raffle.feeTokenAddress = feeTokenAddress;\n        assembly {\n            let raffleSlotOneValue := caller()\n            raffleSlotOneValue := or(raffleSlotOneValue, shl(160, 1))\n            raffleSlotOneValue := or(raffleSlotOneValue, shl(168, isMinimumEntriesFixed))\n            raffleSlotOneValue := or(raffleSlotOneValue, shl(176, cutoffTime))\n\n            let raffleSlotTwoValue := minimumEntries\n            raffleSlotTwoValue := or(raffleSlotTwoValue, shl(40, maximumEntriesPerParticipant))\n            raffleSlotTwoValue := or(raffleSlotTwoValue, shl(80, feeTokenAddress))\n            raffleSlotTwoValue := or(raffleSlotTwoValue, shl(240, agreedProtocolFeeBp))\n\n            sstore(raffleSlot, raffleSlotOneValue)\n            sstore(add(raffleSlot, 1), raffleSlotTwoValue)\n        }\n\n        emit RaffleStatusUpdated(raffleId, RaffleStatus.Open);\n    }\n\n    /**\n     * @dev This function is required in order for the contract to receive ERC-1155 tokens.\n     */\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes calldata\n    ) external pure returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    /**\n     * @inheritdoc IRaffleV2\n     * @notice If it is a delegated recipient, the amount paid should still be accrued to the payer.\n     *         If a raffle is cancelled, the payer should be refunded and not the recipient.\n     */\n    function enterRaffles(EntryCalldata[] calldata entries) external payable nonReentrant whenNotPaused {\n        (address feeTokenAddress, uint208 expectedValue) = _enterRaffles(entries);\n        _chargeUser(feeTokenAddress, expectedValue);\n    }\n\n    /**\n     * @param _requestId The ID of the request\n     * @param _randomWords The random words returned by Chainlink\n     */\n    function fulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) internal override {\n        console.log(\"------- fulfillRandomeWords --------\");\n        if (randomnessRequests[_requestId].exists && latestRequestId == _requestId) {\n            uint256 raffleId = randomnessRequests[_requestId].raffleId;\n            Raffle storage raffle = raffles[raffleId];\n\n            if (raffle.status == RaffleStatus.Drawing) {\n                _setRaffleStatus(raffle, raffleId, RaffleStatus.RandomnessFulfilled);\n                \n                console.log(\"RaffleStatus set to randomnessfulfilled\");\n                randomnessRequests[_requestId].randomWord = _randomWords[0];\n\n                console.log(\"fulfilled randomness %s\", _randomWords[0]);\n            }\n        } else {\n            revert InvalidRequestId();\n        }\n    }\n\n    /**\n     * @inheritdoc IRaffleV2\n     */\n    function selectWinners(uint256 requestId) external {\n        console.log(\"--------- select winner ----------\");\n\n        RandomnessRequest memory randomnessRequest = randomnessRequests[requestId];\n        if (!randomnessRequest.exists) {\n            revert RandomnessRequestDoesNotExist();\n        }\n\n        uint256 raffleId = randomnessRequest.raffleId;\n        Raffle storage raffle = raffles[raffleId];\n        _validateRaffleStatus(raffle, RaffleStatus.RandomnessFulfilled);\n\n        _setRaffleStatus(raffle, raffleId, RaffleStatus.Drawn);\n\n        console.log(\"set raffle status to Drawn\");\n\n        Prize[] storage prizes = raffle.prizes;\n        uint256 prizesCount = prizes.length;\n        uint256 winnersCount = prizes[prizesCount - 1].cumulativeWinnersCount;\n\n        console.log(\"winnersCount:\", winnersCount);\n\n        Entry[] memory entries = raffle.entries;\n        uint256 entriesCount = entries.length;\n\n        console.log(\"entriesCount:\", entriesCount);\n\n        uint256[] memory currentEntryIndexArray = new uint256[](entriesCount);\n        for (uint256 i; i < entriesCount; ) {\n            currentEntryIndexArray[i] = entries[i].currentEntryIndex;\n            unchecked {\n                ++i;\n            }\n        }\n\n        uint256 currentEntryIndex = uint256(currentEntryIndexArray[entriesCount - 1]);\n\n        console.log(\"currentEntryIndex:\", currentEntryIndex);\n        console.log(\"currentEntryIndex >> 8:\", currentEntryIndex >> 8);\n\n        uint256[] memory winningEntriesBitmap = new uint256[]((currentEntryIndex >> 8) + 1);\n\n        uint256[] memory cumulativeWinnersCountArray = new uint256[](prizesCount);\n        for (uint256 i; i < prizesCount; ) {\n            cumulativeWinnersCountArray[i] = prizes[i].cumulativeWinnersCount;\n            unchecked {\n                ++i;\n            }\n        }\n\n        uint256 randomWord = randomnessRequest.randomWord;\n        uint256 winningEntry;\n\n        // The storage layout of a winner slot is as follows:\n        // ------------------------------------------------------------------------------------------------------------|\n        // | unused (40 bits) | entryIndex (40 bits) | prizeIndex (8 bits) | claimed (8 bits) | participant (160 bits) |\n        // ------------------------------------------------------------------------------------------------------------|\n        //\n        // The slot keccak256(raffleId, rafflesSlot) + 6 is used to store the length of the winners array.\n        // The slot keccak256(keccak256(raffleId, rafflesSlot) + 6) + i is used to store the winner at the i-th index.\n        //\n        // The assembly blocks are equivalent to\n        // raffle.winners.push(\n        //   Winner({\n        //     participant: entries[currentEntryIndexArray.findUpperBound(winningEntry)].participant,\n        //     claimed: false,\n        //     prizeIndex: uint8(cumulativeWinnersCountArray.findUpperBound(_unsafeAdd(i, 1))),\n        //     entryIndex: uint40(winningEntry)\n        //   })\n        // );\n        //\n        // The primary benefit of using assembly is we only write the winners length once instead of once per winner.\n        uint256 winnersLengthSlot;\n        uint256 individualWinnerSlotOffset;\n        assembly {\n            mstore(0x00, raffleId)\n            mstore(0x20, raffles.slot)\n            winnersLengthSlot := add(keccak256(0x00, 0x40), 6)\n\n            mstore(0x00, winnersLengthSlot)\n            individualWinnerSlotOffset := keccak256(0x00, 0x20)\n        }\n        \n        console.log(\"winnersLengthSlot\", winnersLengthSlot);\n        console.log(\"individualWinnerSlotOffset\", individualWinnerSlotOffset);\n\n        for (uint256 i; i < winnersCount; ) {\n            (randomWord, winningEntry, winningEntriesBitmap) = _searchForWinningEntryUntilThereIsNotADuplicate(\n                randomWord,\n                currentEntryIndex,\n                winningEntriesBitmap\n            );\n\n            address participant = entries[currentEntryIndexArray.findUpperBound(winningEntry)].participant;\n            uint256 prizeIndex = cumulativeWinnersCountArray.findUpperBound(_unsafeAdd(i, 1));\n\n            assembly {\n                let winnerSlotValue := participant\n                winnerSlotValue := or(winnerSlotValue, shl(168, prizeIndex))\n                winnerSlotValue := or(winnerSlotValue, shl(176, winningEntry))\n\n                sstore(add(individualWinnerSlotOffset, i), winnerSlotValue)\n            }\n\n            randomWord = uint256(keccak256(abi.encodePacked(randomWord)));\n            console.log(\"randomWord\", randomWord);\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        console.log(\"storing winners\");\n        assembly {\n            sstore(winnersLengthSlot, winnersCount)\n        }\n\n        console.log(\"winnersLengthSlot\", winnersLengthSlot);\n    }\n\n    /**\n     * @inheritdoc IRaffleV2\n     */\n    function claimPrize(uint256 raffleId, uint256 winnerIndex) external nonReentrant whenNotPaused {\n        Raffle storage raffle = raffles[raffleId];\n        if (raffle.status != RaffleStatus.Drawn) {\n            _validateRaffleStatus(raffle, RaffleStatus.Complete);\n        }\n\n        Winner[] storage winners = raffle.winners;\n        if (winnerIndex >= winners.length) {\n            revert InvalidIndex();\n        }\n\n        Winner storage winner = winners[winnerIndex];\n        if (winner.claimed) {\n            revert NothingToClaim();\n        }\n        _validateCaller(winner.participant);\n        winner.claimed = true;\n\n        _transferPrize({prize: raffle.prizes[winner.prizeIndex], recipient: msg.sender, multiplier: 1});\n\n        emit PrizeClaimed(raffleId, winnerIndex);\n    }\n\n    /**\n     * @inheritdoc IRaffleV2\n     */\n    function claimPrizes(ClaimPrizesCalldata[] calldata claimPrizesCalldata) external nonReentrant whenNotPaused {\n        TransferAccumulator memory transferAccumulator;\n\n        for (uint256 i; i < claimPrizesCalldata.length; ) {\n            ClaimPrizesCalldata calldata perRaffleClaimPrizesCalldata = claimPrizesCalldata[i];\n            uint256 raffleId = perRaffleClaimPrizesCalldata.raffleId;\n            Raffle storage raffle = raffles[raffleId];\n            if (raffle.status != RaffleStatus.Drawn) {\n                _validateRaffleStatus(raffle, RaffleStatus.Complete);\n            }\n\n            Winner[] storage winners = raffle.winners;\n            uint256[] calldata winnerIndices = perRaffleClaimPrizesCalldata.winnerIndices;\n            uint256 winnersCount = winners.length;\n            uint256 claimsCount = winnerIndices.length;\n\n            for (uint256 j; j < claimsCount; ) {\n                uint256 winnerIndex = winnerIndices[j];\n\n                if (winnerIndex >= winnersCount) {\n                    revert InvalidIndex();\n                }\n\n                Winner storage winner = winners[winnerIndex];\n                if (winner.claimed) {\n                    revert NothingToClaim();\n                }\n                _validateCaller(winner.participant);\n                winner.claimed = true;\n\n                Prize storage prize = raffle.prizes[winner.prizeIndex];\n                if (prize.prizeType > TokenType.ERC1155) {\n                    address prizeAddress = prize.prizeAddress;\n                    if (prizeAddress == transferAccumulator.tokenAddress) {\n                        transferAccumulator.amount += prize.prizeAmount;\n                    } else {\n                        if (transferAccumulator.amount != 0) {\n                            _transferFungibleTokens(transferAccumulator);\n                        }\n\n                        transferAccumulator.tokenAddress = prizeAddress;\n                        transferAccumulator.amount = prize.prizeAmount;\n                    }\n                } else {\n                    _transferPrize({prize: prize, recipient: msg.sender, multiplier: 1});\n                }\n\n                unchecked {\n                    ++j;\n                }\n            }\n\n            emit PrizesClaimed(raffleId, winnerIndices);\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        if (transferAccumulator.amount != 0) {\n            _transferFungibleTokens(transferAccumulator);\n        }\n    }\n\n    /**\n     * @inheritdoc IRaffleV2\n     */\n    function claimFees(uint256 raffleId) external nonReentrant whenNotPaused {\n        Raffle storage raffle = raffles[raffleId];\n        _validateRaffleStatus(raffle, RaffleStatus.Drawn);\n\n        address raffleOwner = raffle.owner;\n        if (msg.sender != raffleOwner) {\n            _validateCaller(owner);\n        }\n\n        uint208 claimableFees = raffle.claimableFees;\n        uint208 protocolFees = (claimableFees * uint208(raffle.protocolFeeBp)) / uint208(ONE_HUNDRED_PERCENT_BP);\n        unchecked {\n            claimableFees -= protocolFees;\n        }\n\n        _setRaffleStatus(raffle, raffleId, RaffleStatus.Complete);\n\n        raffle.claimableFees = 0;\n\n        address feeTokenAddress = raffle.feeTokenAddress;\n        _transferFungibleTokens(feeTokenAddress, raffleOwner, claimableFees);\n\n        if (protocolFees != 0) {\n            _transferFungibleTokens(feeTokenAddress, protocolFeeRecipient, protocolFees);\n        }\n\n        emit FeesClaimed(raffleId, claimableFees);\n    }\n\n    /**\n     * @inheritdoc IRaffleV2\n     */\n    function cancel(uint256 raffleId) external nonReentrant whenNotPaused {\n        Raffle storage raffle = raffles[raffleId];\n        _validateRafflePostCutoffTimeStatusTransferability(raffle);\n        if (block.timestamp < raffle.cutoffTime + 1 hours) {\n            _validateCaller(raffle.owner);\n        }\n        _setRaffleStatus(raffle, raffleId, RaffleStatus.Refundable);\n    }\n\n    /**\n     * @inheritdoc IRaffleV2\n     * @notice A raffle cannot be drawn if there are less entries than prizes.\n     */\n    function drawWinners(uint256 raffleId) external nonReentrant whenNotPaused {\n        Raffle storage raffle = raffles[raffleId];\n\n        Entry[] storage entries = raffle.entries;\n        uint256 entriesCount = entries.length;\n        if (entriesCount == 0) {\n            revert NotEnoughEntries();\n        }\n\n        Prize[] storage prizes = raffle.prizes;\n\n        if (prizes[prizes.length - 1].cumulativeWinnersCount > entries[entriesCount - 1].currentEntryIndex + 1) {\n            revert NotEnoughEntries();\n        }\n\n        _validateRafflePostCutoffTimeStatusTransferability(raffle);\n        _validateCaller(raffle.owner);\n        _drawWinners(raffleId, raffle);\n    }\n\n    /**\n     * @inheritdoc IRaffleV2\n     */\n    function cancelAfterRandomnessRequest(uint256 raffleId) external nonReentrant whenNotPaused {\n        Raffle storage raffle = raffles[raffleId];\n\n        _validateRaffleStatus(raffle, RaffleStatus.Drawing);\n\n        if (block.timestamp < raffle.drawnAt + ONE_DAY) {\n            revert DrawExpirationTimeNotReached();\n        }\n\n        _setRaffleStatus(raffle, raffleId, RaffleStatus.Refundable);\n    }\n\n    /**\n     * @inheritdoc IRaffleV2\n     */\n    function withdrawPrizes(uint256 raffleId) external nonReentrant whenNotPaused {\n        Raffle storage raffle = raffles[raffleId];\n        _validateRaffleStatus(raffle, RaffleStatus.Refundable);\n\n        _setRaffleStatus(raffle, raffleId, RaffleStatus.Cancelled);\n\n        uint256 prizesCount = raffle.prizes.length;\n        address raffleOwner = raffle.owner;\n        for (uint256 i; i < prizesCount; ) {\n            Prize storage prize = raffle.prizes[i];\n            _transferPrize({prize: prize, recipient: raffleOwner, multiplier: uint256(prize.winnersCount)});\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @inheritdoc IRaffleV2\n     * @dev Refundable and Cancelled are the only statuses that allow refunds.\n     */\n    function claimRefund(uint256[] calldata raffleIds) external nonReentrant whenNotPaused {\n        (address feeTokenAddress, uint208 refundAmount) = _claimRefund(raffleIds);\n        _transferFungibleTokens(feeTokenAddress, msg.sender, refundAmount);\n    }\n\n    /**\n     * @inheritdoc IRaffleV2\n     * @notice The fee token address for all the raffles involved must be the same.\n     * @dev Refundable and Cancelled are the only statuses that allow refunds.\n     */\n    function rollover(uint256[] calldata refundableRaffleIds, EntryCalldata[] calldata entries)\n        external\n        payable\n        nonReentrant\n        whenNotPaused\n    {\n        (address refundFeeTokenAddress, uint208 rolloverAmount) = _claimRefund(refundableRaffleIds);\n        (address enterRafflesFeeTokenAddress, uint208 expectedValue) = _enterRaffles(entries);\n\n        if (refundFeeTokenAddress != enterRafflesFeeTokenAddress) {\n            revert InvalidCurrency();\n        }\n\n        if (rolloverAmount > expectedValue) {\n            _transferFungibleTokens(refundFeeTokenAddress, msg.sender, _unsafeSubtract(rolloverAmount, expectedValue));\n        } else if (rolloverAmount < expectedValue) {\n            _chargeUser(refundFeeTokenAddress, _unsafeSubtract(expectedValue, rolloverAmount));\n        }\n    }\n\n    /**\n     * @inheritdoc IRaffleV2\n     */\n    function setProtocolFeeRecipient(address _protocolFeeRecipient) external onlyOwner {\n        _setProtocolFeeRecipient(_protocolFeeRecipient);\n    }\n\n    /**\n     * @inheritdoc IRaffleV2\n     */\n    function setProtocolFeeBp(uint16 _protocolFeeBp) external onlyOwner {\n        _setProtocolFeeBp(_protocolFeeBp);\n    }\n\n    /**\n     * @inheritdoc IRaffleV2\n     */\n    function updateCurrenciesStatus(address[] calldata currencies, bool isAllowed) external onlyOwner {\n        uint256 count = currencies.length;\n        for (uint256 i; i < count; ) {\n            isCurrencyAllowed[currencies[i]] = (isAllowed ? 1 : 0);\n            unchecked {\n                ++i;\n            }\n        }\n        emit CurrenciesStatusUpdated(currencies, isAllowed);\n    }\n\n    /**\n     * @inheritdoc IRaffleV2\n     */\n    function togglePaused() external onlyOwner {\n        paused() ? _unpause() : _pause();\n    }\n\n    /**\n     * @inheritdoc IRaffleV2\n     */\n    function getWinners(uint256 raffleId) external view returns (Winner[] memory winners) {\n        winners = raffles[raffleId].winners;\n    }\n\n    /**\n     * @inheritdoc IRaffleV2\n     */\n    function getPrizes(uint256 raffleId) external view returns (Prize[] memory prizes) {\n        prizes = raffles[raffleId].prizes;\n    }\n\n    /**\n     * @inheritdoc IRaffleV2\n     */\n    function getEntries(uint256 raffleId) external view returns (Entry[] memory entries) {\n        entries = raffles[raffleId].entries;\n    }\n\n    /**\n     * @inheritdoc IRaffleV2\n     */\n    function getPricingOptions(uint256 raffleId) external view returns (PricingOption[] memory pricingOptions) {\n        pricingOptions = raffles[raffleId].pricingOptions;\n    }\n\n    function getLatestRequestId() external view returns (uint256) {\n        return latestRequestId;\n    }\n\n    /**\n     * @param _protocolFeeRecipient The new protocol fee recipient address\n     */\n    function _setProtocolFeeRecipient(address _protocolFeeRecipient) private {\n        if (_protocolFeeRecipient == address(0)) {\n            revert InvalidProtocolFeeRecipient();\n        }\n        protocolFeeRecipient = _protocolFeeRecipient;\n        emit ProtocolFeeRecipientUpdated(_protocolFeeRecipient);\n    }\n\n    /**\n     * @param _protocolFeeBp The new protocol fee in basis points\n     */\n    function _setProtocolFeeBp(uint16 _protocolFeeBp) private {\n        if (_protocolFeeBp > MAXIMUM_PROTOCOL_FEE_BP) {\n            revert InvalidProtocolFeeBp();\n        }\n        protocolFeeBp = _protocolFeeBp;\n        emit ProtocolFeeBpUpdated(_protocolFeeBp);\n    }\n\n    /**\n     * @param raffleId The ID of the raffle.\n     * @param pricingOptions The pricing options for the raffle.\n     */\n    function _validateAndSetPricingOptions(\n        uint256 raffleId,\n        uint40 minimumEntries,\n        PricingOption[] calldata pricingOptions\n    ) private {\n        uint256 count = pricingOptions.length;\n\n        if (count == 0 || count > MAXIMUM_PRICING_OPTIONS_PER_RAFFLE) {\n            revert InvalidPricingOptionsCount();\n        }\n\n        uint40 lowestEntriesCount = pricingOptions[0].entriesCount;\n\n        // The storage layout of a pricing option slot is as follows:\n        // ---------------------------------------------------------------|\n        // | unused (8 bits) | price (208 bits) | entries count (40 bits) |\n        // ---------------------------------------------------------------|\n        //\n        // The slot keccak256(raffleId, rafflesSlot) + 3 is used to store the length of the pricing options array.\n        // The slot keccak256(keccak256(raffleId, rafflesSlot) + 3) + i is used to store the pricing option at the i-th index.\n        //\n        // The assembly blocks are equivalent to `raffles[raffleId].pricingOptions.push(pricingOption);`\n        //\n        // The primary benefit of using assembly is we only write the pricing options length once instead of once per pricing option.\n        uint256 pricingOptionsLengthSlot;\n        uint256 individualPricingOptionSlotOffset;\n        assembly {\n            mstore(0x00, raffleId)\n            mstore(0x20, raffles.slot)\n            pricingOptionsLengthSlot := add(keccak256(0x00, 0x40), 3)\n\n            mstore(0x00, pricingOptionsLengthSlot)\n            individualPricingOptionSlotOffset := keccak256(0x00, 0x20)\n        }\n\n        for (uint256 i; i < count; ) {\n            PricingOption memory pricingOption = pricingOptions[i];\n\n            uint40 entriesCount = pricingOption.entriesCount;\n            uint208 price = pricingOption.price;\n\n            if (i == 0) {\n                if (minimumEntries % entriesCount != 0 || price == 0) {\n                    revert InvalidPricingOption();\n                }\n            } else {\n                PricingOption memory lastPricingOption = pricingOptions[_unsafeSubtract(i, 1)];\n                uint208 lastPrice = lastPricingOption.price;\n                uint40 lastEntriesCount = lastPricingOption.entriesCount;\n\n                if (\n                    entriesCount % lowestEntriesCount != 0 ||\n                    price % entriesCount != 0 ||\n                    entriesCount <= lastEntriesCount ||\n                    price <= lastPrice ||\n                    price / entriesCount > lastPrice / lastEntriesCount\n                ) {\n                    revert InvalidPricingOption();\n                }\n            }\n\n            assembly {\n                let pricingOptionValue := entriesCount\n                pricingOptionValue := or(pricingOptionValue, shl(40, price))\n                sstore(add(individualPricingOptionSlotOffset, i), pricingOptionValue)\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        assembly {\n            sstore(pricingOptionsLengthSlot, count)\n        }\n    }\n\n    /**\n     * @param prize The prize.\n     */\n    function _validatePrize(Prize memory prize) private view {\n        TokenType prizeType = prize.prizeType;\n        if (prizeType == TokenType.ERC721) {\n            if (prize.prizeAmount != 1 || prize.winnersCount != 1) {\n                revert InvalidPrize();\n            }\n        } else {\n            if (prizeType == TokenType.ERC20) {\n                _validateCurrency(prize.prizeAddress);\n            }\n\n            if (prize.prizeAmount == 0 || prize.winnersCount == 0) {\n                revert InvalidPrize();\n            }\n        }\n    }\n\n    /**\n     * @param prize The prize to transfer.\n     * @param recipient The recipient of the prize.\n     * @param multiplier The multiplier to apply to the prize amount.\n     */\n    function _transferPrize(\n        Prize storage prize,\n        address recipient,\n        uint256 multiplier\n    ) private {\n        TokenType prizeType = prize.prizeType;\n        address prizeAddress = prize.prizeAddress;\n        if (prizeType == TokenType.ERC721) {\n            _executeERC721TransferFrom(prizeAddress, address(this), recipient, prize.prizeId);\n        } else if (prizeType == TokenType.ERC1155) {\n            _executeERC1155SafeTransferFrom(\n                prizeAddress,\n                address(this),\n                recipient,\n                prize.prizeId,\n                prize.prizeAmount * multiplier\n            );\n        } else {\n            _transferFungibleTokens(prizeAddress, recipient, prize.prizeAmount * multiplier);\n        }\n    }\n\n    /**\n     * @param currency The currency to transfer.\n     * @param recipient The recipient of the currency.\n     * @param amount The amount of currency to transfer.\n     */\n    function _transferFungibleTokens(\n        address currency,\n        address recipient,\n        uint256 amount\n    ) private {\n        if (currency == address(0)) {\n            _transferETHAndWrapIfFailWithGasLimit(WETH, recipient, amount, gasleft());\n        } else {\n            _executeERC20DirectTransfer(currency, recipient, amount);\n        }\n    }\n\n    /**\n     * @param transferAccumulator The transfer accumulator.\n     */\n    function _transferFungibleTokens(TransferAccumulator memory transferAccumulator) private {\n        _transferFungibleTokens(transferAccumulator.tokenAddress, msg.sender, transferAccumulator.amount);\n    }\n\n    /**\n     * @param raffleId The ID of the raffle to draw winners for.\n     * @param raffle The raffle to draw winners for.\n     */\n    function _drawWinners(uint256 raffleId, Raffle storage raffle) private {\n        console.log(\"---- _drawWinner -------\");\n\n        _setRaffleStatus(raffle, raffleId, RaffleStatus.Drawing);\n        console.log(\"RaffleStatus set to drawing\");\n\n        raffle.drawnAt = uint40(block.timestamp);\n\n        uint256 requestId = VRF_COORDINATOR.requestRandomWords({\n            keyHash: KEY_HASH,\n            subId: SUBSCRIPTION_ID,\n            minimumRequestConfirmations: uint16(3),\n            callbackGasLimit: uint32(500_000),\n            numWords: uint32(1)\n        });\n\n        console.log(\"> generated requestId\", requestId);\n\n        latestRequestId = requestId;\n\n        if (randomnessRequests[requestId].exists) {\n            revert RandomnessRequestAlreadyExists();\n        }\n\n        randomnessRequests[requestId].exists = true;\n        randomnessRequests[requestId].raffleId = uint80(raffleId);\n\n        emit RandomnessRequested(raffleId, requestId);\n    }\n\n    /**\n     * @param raffle The raffle to check the status of.\n     * @param status The expected status of the raffle\n     */\n    function _validateRaffleStatus(Raffle storage raffle, RaffleStatus status) private view {\n        if (raffle.status != status) {\n            revert InvalidStatus();\n        }\n    }\n\n    /**\n     * @param entries The entries to enter.\n     */\n    function _enterRaffles(EntryCalldata[] calldata entries)\n        private\n        returns (address feeTokenAddress, uint208 expectedValue)\n    {\n        uint256 count = entries.length;\n        for (uint256 i; i < count; ) {\n            EntryCalldata calldata entry = entries[i];\n\n            address recipient = entry.recipient == address(0) ? msg.sender : entry.recipient;\n\n            uint256 raffleId = entry.raffleId;\n            Raffle storage raffle = raffles[raffleId];\n\n            if (i == 0) {\n                feeTokenAddress = raffle.feeTokenAddress;\n            } else if (raffle.feeTokenAddress != feeTokenAddress) {\n                revert InvalidCurrency();\n            }\n\n            if (entry.pricingOptionIndex >= raffle.pricingOptions.length) {\n                revert InvalidIndex();\n            }\n\n            _validateRaffleStatus(raffle, RaffleStatus.Open);\n\n            if (block.timestamp >= raffle.cutoffTime) {\n                revert CutoffTimeReached();\n            }\n\n            uint40 entriesCount;\n            uint208 price;\n            {\n                PricingOption memory pricingOption = raffle.pricingOptions[entry.pricingOptionIndex];\n\n                uint40 multiplier = entry.count;\n                if (multiplier == 0) {\n                    revert InvalidCount();\n                }\n\n                entriesCount = pricingOption.entriesCount * multiplier;\n                price = pricingOption.price * multiplier;\n\n                uint40 newParticipantEntriesCount = rafflesParticipantsStats[raffleId][recipient].entriesCount +\n                    entriesCount;\n                \n                console.log();\n                console.log(\"entriesCount\", entriesCount);\n                console.log(\"newParticipantEntriesCount\", newParticipantEntriesCount);\n\n                if (newParticipantEntriesCount > raffle.maximumEntriesPerParticipant) {\n                    revert MaximumEntriesPerParticipantReached();\n                }\n                rafflesParticipantsStats[raffleId][recipient].entriesCount = newParticipantEntriesCount;\n            }\n\n            expectedValue += price;\n\n            uint256 raffleEntriesCount = raffle.entries.length;\n            uint40 currentEntryIndex;\n            if (raffleEntriesCount == 0) {\n                currentEntryIndex = uint40(_unsafeSubtract(entriesCount, 1));\n            } else {\n                currentEntryIndex =\n                    raffle.entries[_unsafeSubtract(raffleEntriesCount, 1)].currentEntryIndex +\n                    entriesCount;\n            }\n\n            if (raffle.isMinimumEntriesFixed) {\n                if (currentEntryIndex >= raffle.minimumEntries) {\n                    revert MaximumEntriesReached();\n                }\n            }\n\n            _pushEntry(raffle, currentEntryIndex, recipient);\n            raffle.claimableFees += price;\n\n            rafflesParticipantsStats[raffleId][msg.sender].amountPaid += price;\n\n            emit EntrySold(raffleId, msg.sender, recipient, entriesCount, price);\n\n            if (currentEntryIndex >= _unsafeSubtract(raffle.minimumEntries, 1)) {\n                _drawWinners(raffleId, raffle);\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @param feeTokenAddress The address of the token to charge the fee in.\n     * @param expectedValue The expected value of the fee.\n     */\n    function _chargeUser(address feeTokenAddress, uint256 expectedValue) private {\n        if (feeTokenAddress == address(0)) {\n            _validateExpectedEthValueOrRefund(expectedValue);\n        } else {\n            transferManager.transferERC20(feeTokenAddress, msg.sender, address(this), expectedValue);\n        }\n    }\n\n    /**\n     * @param raffleIds The IDs of the raffles to claim refunds for.\n     */\n    function _claimRefund(uint256[] calldata raffleIds)\n        private\n        returns (address feeTokenAddress, uint208 refundAmount)\n    {\n        uint256 count = raffleIds.length;\n\n        for (uint256 i; i < count; ) {\n            uint256 raffleId = raffleIds[i];\n            Raffle storage raffle = raffles[raffleId];\n\n            if (raffle.status < RaffleStatus.Refundable) {\n                revert InvalidStatus();\n            }\n\n            ParticipantStats storage stats = rafflesParticipantsStats[raffleId][msg.sender];\n            uint208 amountPaid = stats.amountPaid;\n\n            if (stats.refunded || amountPaid == 0) {\n                revert NothingToClaim();\n            }\n\n            if (i == 0) {\n                feeTokenAddress = raffle.feeTokenAddress;\n            } else if (feeTokenAddress != raffle.feeTokenAddress) {\n                revert InvalidCurrency();\n            }\n\n            stats.refunded = true;\n            refundAmount += amountPaid;\n\n            emit EntryRefunded(raffleId, msg.sender, amountPaid);\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @param caller The expected caller.\n     */\n    function _validateCaller(address caller) private view {\n        if (msg.sender != caller) {\n            revert InvalidCaller();\n        }\n    }\n\n    /**\n     * @param currency The currency to validate.\n     */\n    function _validateCurrency(address currency) private view {\n        if (isCurrencyAllowed[currency] != 1) {\n            revert InvalidCurrency();\n        }\n    }\n\n    /**\n     * @param expectedEthValue The expected ETH value to be sent by the caller.\n     */\n    function _validateExpectedEthValueOrRefund(uint256 expectedEthValue) private {\n        if (expectedEthValue > msg.value) {\n            revert InsufficientNativeTokensSupplied();\n        } else if (msg.value > expectedEthValue) {\n            _transferETHAndWrapIfFailWithGasLimit(\n                WETH,\n                msg.sender,\n                _unsafeSubtract(msg.value, expectedEthValue),\n                gasleft()\n            );\n        }\n    }\n\n    /**\n     * @param raffle The raffle to validate.\n     */\n    function _validateRafflePostCutoffTimeStatusTransferability(Raffle storage raffle) private view {\n        _validateRaffleStatus(raffle, RaffleStatus.Open);\n\n        if (raffle.cutoffTime > block.timestamp) {\n            revert CutoffTimeNotReached();\n        }\n    }\n\n    /**\n     * @param raffle The raffle to set the status of.\n     * @param raffleId The ID of the raffle to set the status of.\n     * @param status The status to set.\n     */\n    function _setRaffleStatus(\n        Raffle storage raffle,\n        uint256 raffleId,\n        RaffleStatus status\n    ) private {\n        raffle.status = status;\n        emit RaffleStatusUpdated(raffleId, status);\n    }\n\n    /**\n     * @param raffle The raffle to add the entry to.\n     * @param currentEntryIndex The cumulative number of entries in the raffle minus one.\n     * @param recipient The recipient of the entry.\n     */\n    function _pushEntry(\n        Raffle storage raffle,\n        uint40 currentEntryIndex,\n        address recipient\n    ) private {\n        raffle.entries.push(Entry({currentEntryIndex: currentEntryIndex, participant: recipient}));\n    }\n\n    /**\n     * Unsafe math functions.\n     */\n\n    function _unsafeAdd(uint256 a, uint256 b) private pure returns (uint256) {\n        unchecked {\n            return a + b;\n        }\n    }\n\n    function _unsafeSubtract(uint256 a, uint256 b) private pure returns (uint256) {\n        unchecked {\n            return a - b;\n        }\n    }\n}\n"
    },
    "contracts/TokenType.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nenum TokenType {\n    ERC20,\n    ERC721,\n    ERC1155\n}\n"
    },
    "contracts/TransferManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\n// LooksRare unopinionated libraries\nimport {OwnableTwoSteps} from \"./libraries/OwnableTwoSteps.sol\";\nimport {LowLevelERC20Transfer} from \"./libraries/LowLevelERC20Transfer.sol\";\nimport {LowLevelERC721Transfer} from \"./libraries/LowLevelERC721Transfer.sol\";\nimport {LowLevelERC1155Transfer} from \"./libraries/LowLevelERC1155Transfer.sol\";\n\n// Interfaces and errors\nimport {ITransferManager} from \"./interfaces/ITransferManager.sol\";\nimport {AmountInvalid, LengthsInvalid} from \"./errors/SharedErrors.sol\";\n\n// Enums\nimport {TokenType} from \"./TokenType.sol\";\n\n/**\n * @title TransferManager\n * @notice This contract provides the transfer functions for ERC20/ERC721/ERC1155 for contracts that require them.\n *         Token type \"0\" refers to ERC20 transfer functions.\n *         Token type \"1\" refers to ERC721 transfer functions.\n *         Token type \"2\" refers to ERC1155 transfer functions.\n * @dev \"Safe\" transfer functions for ERC721 are not implemented since they come with added gas costs\n *       to verify if the recipient is a contract as it requires verifying the receiver interface is valid.\n * @author LooksRare protocol team (👀,💎)\n */\ncontract TransferManager is\n    ITransferManager,\n    LowLevelERC20Transfer,\n    LowLevelERC721Transfer,\n    LowLevelERC1155Transfer,\n    OwnableTwoSteps\n{\n    /**\n     * @notice This returns whether the user has approved the operator address.\n     * The first address is the user and the second address is the operator.\n     */\n    mapping(address => mapping(address => bool)) public hasUserApprovedOperator;\n\n    /**\n     * @notice This returns whether the operator address is allowed by this contract's owner.\n     */\n    mapping(address => bool) public isOperatorAllowed;\n\n    /**\n     * @notice Constructor\n     * @param _owner Owner address\n     */\n    constructor(address _owner) OwnableTwoSteps(_owner) {}\n\n    /**\n     * @inheritdoc ITransferManager\n     */\n    function transferERC20(\n        address tokenAddress,\n        address from,\n        address to,\n        uint256 amount\n    ) external {\n        _isOperatorValidForTransfer(from, msg.sender);\n\n        if (amount == 0) {\n            revert AmountInvalid();\n        }\n\n        _executeERC20TransferFrom(tokenAddress, from, to, amount);\n    }\n\n    /**\n     * @inheritdoc ITransferManager\n     */\n    function transferItemERC721(\n        address tokenAddress,\n        address from,\n        address to,\n        uint256 itemId\n    ) external {\n        _isOperatorValidForTransfer(from, msg.sender);\n        _executeERC721TransferFrom(tokenAddress, from, to, itemId);\n    }\n\n    /**\n     * @inheritdoc ITransferManager\n     */\n    function transferItemsERC721(\n        address tokenAddress,\n        address from,\n        address to,\n        uint256[] calldata itemIds,\n        uint256[] calldata amounts\n    ) external {\n        uint256 length = itemIds.length;\n        if (length == 0 || amounts.length != length) {\n            revert LengthsInvalid();\n        }\n\n        _isOperatorValidForTransfer(from, msg.sender);\n\n        for (uint256 i; i < length; ) {\n            if (amounts[i] != 1) {\n                revert AmountInvalid();\n            }\n            _executeERC721TransferFrom(tokenAddress, from, to, itemIds[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @inheritdoc ITransferManager\n     */\n    function transferItemERC1155(\n        address tokenAddress,\n        address from,\n        address to,\n        uint256 itemId,\n        uint256 amount\n    ) external {\n        _isOperatorValidForTransfer(from, msg.sender);\n        if (amount == 0) {\n            revert AmountInvalid();\n        }\n        _executeERC1155SafeTransferFrom(tokenAddress, from, to, itemId, amount);\n    }\n\n    /**\n     * @inheritdoc ITransferManager\n     */\n    function transferItemsERC1155(\n        address tokenAddress,\n        address from,\n        address to,\n        uint256[] calldata itemIds,\n        uint256[] calldata amounts\n    ) external {\n        uint256 length = itemIds.length;\n\n        if (length == 0 || amounts.length != length) {\n            revert LengthsInvalid();\n        }\n\n        _isOperatorValidForTransfer(from, msg.sender);\n\n        if (length == 1) {\n            if (amounts[0] == 0) {\n                revert AmountInvalid();\n            }\n            _executeERC1155SafeTransferFrom(tokenAddress, from, to, itemIds[0], amounts[0]);\n        } else {\n            for (uint256 i; i < length; ) {\n                if (amounts[i] == 0) {\n                    revert AmountInvalid();\n                }\n\n                unchecked {\n                    ++i;\n                }\n            }\n            _executeERC1155SafeBatchTransferFrom(tokenAddress, from, to, itemIds, amounts);\n        }\n    }\n\n    /**\n     * @inheritdoc ITransferManager\n     */\n    function transferBatchItemsAcrossCollections(\n        BatchTransferItem[] calldata items,\n        address from,\n        address to\n    ) external {\n        uint256 itemsLength = items.length;\n\n        if (itemsLength == 0) {\n            revert LengthsInvalid();\n        }\n\n        if (from != msg.sender) {\n            _isOperatorValidForTransfer(from, msg.sender);\n        }\n\n        for (uint256 i; i < itemsLength; ) {\n            uint256[] calldata itemIds = items[i].itemIds;\n            uint256 itemIdsLengthForSingleCollection = itemIds.length;\n            uint256[] calldata amounts = items[i].amounts;\n\n            TokenType tokenType = items[i].tokenType;\n\n            if (tokenType == TokenType.ERC20) {\n                if (itemIdsLengthForSingleCollection != 0 || amounts.length != 1) {\n                    revert LengthsInvalid();\n                }\n            } else {\n                if (itemIdsLengthForSingleCollection == 0 || amounts.length != itemIdsLengthForSingleCollection) {\n                    revert LengthsInvalid();\n                }\n            }\n\n            if (tokenType == TokenType.ERC20) {\n                uint256 amount = amounts[0];\n                if (amount == 0) {\n                    revert AmountInvalid();\n                }\n                _executeERC20TransferFrom(items[i].tokenAddress, from, to, amount);\n            } else if (tokenType == TokenType.ERC721) {\n                for (uint256 j; j < itemIdsLengthForSingleCollection; ) {\n                    if (amounts[j] != 1) {\n                        revert AmountInvalid();\n                    }\n                    _executeERC721TransferFrom(items[i].tokenAddress, from, to, itemIds[j]);\n                    unchecked {\n                        ++j;\n                    }\n                }\n            } else if (tokenType == TokenType.ERC1155) {\n                for (uint256 j; j < itemIdsLengthForSingleCollection; ) {\n                    if (amounts[j] == 0) {\n                        revert AmountInvalid();\n                    }\n\n                    unchecked {\n                        ++j;\n                    }\n                }\n                _executeERC1155SafeBatchTransferFrom(items[i].tokenAddress, from, to, itemIds, amounts);\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @inheritdoc ITransferManager\n     */\n    function grantApprovals(address[] calldata operators) external {\n        uint256 length = operators.length;\n\n        if (length == 0) {\n            revert LengthsInvalid();\n        }\n\n        for (uint256 i; i < length; ) {\n            address operator = operators[i];\n\n            if (!isOperatorAllowed[operator]) {\n                revert OperatorNotAllowed();\n            }\n\n            if (hasUserApprovedOperator[msg.sender][operator]) {\n                revert OperatorAlreadyApprovedByUser();\n            }\n\n            hasUserApprovedOperator[msg.sender][operator] = true;\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        emit ApprovalsGranted(msg.sender, operators);\n    }\n\n    /**\n     * @inheritdoc ITransferManager\n     */\n    function revokeApprovals(address[] calldata operators) external {\n        uint256 length = operators.length;\n        if (length == 0) {\n            revert LengthsInvalid();\n        }\n\n        for (uint256 i; i < length; ) {\n            address operator = operators[i];\n\n            if (!hasUserApprovedOperator[msg.sender][operator]) {\n                revert OperatorNotApprovedByUser();\n            }\n\n            delete hasUserApprovedOperator[msg.sender][operator];\n            unchecked {\n                ++i;\n            }\n        }\n\n        emit ApprovalsRemoved(msg.sender, operators);\n    }\n\n    /**\n     * @inheritdoc ITransferManager\n     */\n    function allowOperator(address operator) external onlyOwner {\n        if (isOperatorAllowed[operator]) {\n            revert OperatorAlreadyAllowed();\n        }\n\n        isOperatorAllowed[operator] = true;\n\n        emit OperatorAllowed(operator);\n    }\n\n    /**\n     * @inheritdoc ITransferManager\n     */\n    function removeOperator(address operator) external onlyOwner {\n        if (!isOperatorAllowed[operator]) {\n            revert OperatorNotAllowed();\n        }\n\n        delete isOperatorAllowed[operator];\n\n        emit OperatorRemoved(operator);\n    }\n\n    /**\n     * @notice This function is internal and verifies whether the transfer\n     *         (by an operator on behalf of a user) is valid. If not, it reverts.\n     * @param user User address\n     * @param operator Operator address\n     */\n    function _isOperatorValidForTransfer(address user, address operator) private view {\n        if (isOperatorAllowed[operator] && hasUserApprovedOperator[user][operator]) {\n            return;\n        }\n\n        revert TransferCallerInvalid();\n    }\n}\n"
    },
    "contracts/WinningEntrySearchLogic.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\n/**\n * @title WinningEntrySearchLogic\n * @notice This contract contains the logic to search for a winning entry.\n * @author LooksRare protocol team (👀,💎)\n */\ncontract WinningEntrySearchLogic {\n    /**\n     * @param currentEntryIndex The current entry index.\n     * @param winningEntry The winning entry.\n     * @param winningEntriesBitmap The bitmap of winning entries.\n     */\n    function _incrementWinningEntryUntilThereIsNotADuplicate(\n        uint256 currentEntryIndex,\n        uint256 winningEntry,\n        uint256[] memory winningEntriesBitmap\n    ) internal pure returns (uint256, uint256[] memory) {\n        uint256 bucket = winningEntry >> 8;\n        uint256 mask = 1 << (winningEntry & 0xff);\n        while (winningEntriesBitmap[bucket] & mask != 0) {\n            if (winningEntry == currentEntryIndex) {\n                bucket = 0;\n                winningEntry = 0;\n            } else {\n                winningEntry += 1;\n                if (winningEntry % 256 == 0) {\n                    unchecked {\n                        bucket += 1;\n                    }\n                }\n            }\n\n            mask = 1 << (winningEntry & 0xff);\n        }\n\n        winningEntriesBitmap[bucket] |= mask;\n\n        return (winningEntry, winningEntriesBitmap);\n    }\n}\n"
    },
    "contracts/WinningEntrySearchLogicV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\n/**\n * @title WinningEntrySearchLogicV2\n * @notice This contract contains the logic to search for a winning entry.\n * @author LooksRare protocol team (👀,💎)\n */\ncontract WinningEntrySearchLogicV2 {\n    /**\n     * @param randomWord The random word.\n     * @param currentEntryIndex The current entry index.\n     * @param winningEntriesBitmap The bitmap of winning entries.\n     */\n    function _searchForWinningEntryUntilThereIsNotADuplicate(\n        uint256 randomWord,\n        uint256 currentEntryIndex,\n        uint256[] memory winningEntriesBitmap\n    )\n        internal\n        pure\n        returns (\n            uint256,\n            uint256,\n            uint256[] memory\n        )\n    {\n        uint256 winningEntry = randomWord % (currentEntryIndex + 1);\n\n        uint256 bucket = winningEntry >> 8;\n        uint256 mask = 1 << (winningEntry & 0xff);\n        while (winningEntriesBitmap[bucket] & mask != 0) {\n            randomWord = uint256(keccak256(abi.encodePacked(randomWord)));\n            winningEntry = randomWord % (currentEntryIndex + 1);\n            bucket = winningEntry >> 8;\n            mask = 1 << (winningEntry & 0xff);\n        }\n\n        winningEntriesBitmap[bucket] |= mask;\n\n        return (randomWord, winningEntry, winningEntriesBitmap);\n    }\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nlibrary console {\n    address constant CONSOLE_ADDRESS =\n        0x000000000000000000636F6e736F6c652e6c6f67;\n\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\n        address consoleAddress = CONSOLE_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            pop(\n                staticcall(\n                    gas(),\n                    consoleAddress,\n                    add(payload, 32),\n                    mload(payload),\n                    0,\n                    0\n                )\n            )\n        }\n    }\n\n    function _castToPure(\n      function(bytes memory) internal view fnIn\n    ) internal pure returns (function(bytes memory) pure fnOut) {\n        assembly {\n            fnOut := fnIn\n        }\n    }\n\n    function _sendLogPayload(bytes memory payload) internal pure {\n        _castToPure(_sendLogPayloadImplementation)(payload);\n    }\n\n    function log() internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\n    }\n    function logInt(int256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n    }\n\n    function logUint(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function logString(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function logBool(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function logAddress(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function logBytes(bytes memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n    }\n\n    function logBytes1(bytes1 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n    }\n\n    function logBytes2(bytes2 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n    }\n\n    function logBytes3(bytes3 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n    }\n\n    function logBytes4(bytes4 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n    }\n\n    function logBytes5(bytes5 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n    }\n\n    function logBytes6(bytes6 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n    }\n\n    function logBytes7(bytes7 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n    }\n\n    function logBytes8(bytes8 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n    }\n\n    function logBytes9(bytes9 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n    }\n\n    function logBytes10(bytes10 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n    }\n\n    function logBytes11(bytes11 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n    }\n\n    function logBytes12(bytes12 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n    }\n\n    function logBytes13(bytes13 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n    }\n\n    function logBytes14(bytes14 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n    }\n\n    function logBytes15(bytes15 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n    }\n\n    function logBytes16(bytes16 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n    }\n\n    function logBytes17(bytes17 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n    }\n\n    function logBytes18(bytes18 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n    }\n\n    function logBytes19(bytes19 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n    }\n\n    function logBytes20(bytes20 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n    }\n\n    function logBytes21(bytes21 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n    }\n\n    function logBytes22(bytes22 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n    }\n\n    function logBytes23(bytes23 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n    }\n\n    function logBytes24(bytes24 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n    }\n\n    function logBytes25(bytes25 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n    }\n\n    function logBytes26(bytes26 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n    }\n\n    function logBytes27(bytes27 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n    }\n\n    function logBytes28(bytes28 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n    }\n\n    function logBytes29(bytes29 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n    }\n\n    function logBytes30(bytes30 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n    }\n\n    function logBytes31(bytes31 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n    }\n\n    function logBytes32(bytes32 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n    }\n\n    function log(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function log(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function log(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function log(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function log(uint256 p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n    }\n\n    function log(uint256 p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n    }\n\n    function log(uint256 p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n    }\n\n    function log(uint256 p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n    }\n\n    function log(string memory p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n    }\n\n    function log(string memory p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n\n    function log(string memory p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n    }\n\n    function log(string memory p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n    }\n\n    function log(bool p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n    }\n\n    function log(bool p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n    }\n\n    function log(bool p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n    }\n\n    function log(bool p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n    }\n\n    function log(address p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n    }\n\n    function log(address p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n    }\n\n    function log(address p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n    }\n\n    function log(address p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n    }\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}