{
  "address": "0x313127406b42678c7cdd4e6a5a70b8D62b687D52",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdtInterface",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyRefunded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DrawExpirationTimeNotReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20TransferFail",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20TransferFromFail",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721TransferFromFail",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientNativeTokensSupplied",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCurrency",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFeeRecipient",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidIndex",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPricingOption",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPrize",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPrizesCount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStatus",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidWinnersCount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaximumEntriesPerParticipantReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaximumEntriesReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PrizeAlreadyClaimed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "currencies",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isAllowed",
          "type": "bool"
        }
      ],
      "name": "CurrenciesStatusUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "raffleId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint208",
          "name": "amount",
          "type": "uint208"
        }
      ],
      "name": "EntryRefunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "raffleId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint40",
          "name": "entriesCount",
          "type": "uint40"
        },
        {
          "indexed": false,
          "internalType": "uint208",
          "name": "price",
          "type": "uint208"
        }
      ],
      "name": "EntrySold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint40",
          "name": "feePrice",
          "type": "uint40"
        }
      ],
      "name": "FeePriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeRecipient",
          "type": "address"
        }
      ],
      "name": "FeeRecipientUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "raffleId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FeesClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "raffleId",
          "type": "uint256"
        }
      ],
      "name": "IncreaseRaffleId",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "raffleId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "winnerIndex",
          "type": "uint256[]"
        }
      ],
      "name": "PrizesClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "raffleId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum ILasmRaffle.RaffleStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "RaffleStatusUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAXIMUM_NUMBER_OF_PRIZES_PER_RAFFLE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAXIMUM_NUMBER_OF_WINNERS_PER_RAFFLE",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICING_OPTIONS_PER_RAFFLE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SELECT_WINNERS_LIMIT",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDTInterface",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "raffleId",
          "type": "uint256"
        }
      ],
      "name": "claimFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isMinimumEntriesFixed",
              "type": "bool"
            },
            {
              "internalType": "uint40",
              "name": "minimumEntries",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "maximumEntriesPerParticipant",
              "type": "uint40"
            },
            {
              "components": [
                {
                  "internalType": "uint40",
                  "name": "winnersCount",
                  "type": "uint40"
                },
                {
                  "internalType": "uint40",
                  "name": "cumulativeWinnersCount",
                  "type": "uint40"
                },
                {
                  "internalType": "enum ILasmRaffle.TokenType",
                  "name": "prizeType",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "prizeTier",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "prizeAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "prizeId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "prizeAmount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ILasmRaffle.Prize[]",
              "name": "prizes",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint40",
                  "name": "entriesCount",
                  "type": "uint40"
                },
                {
                  "internalType": "uint208",
                  "name": "price",
                  "type": "uint208"
                }
              ],
              "internalType": "struct ILasmRaffle.PricingOption[5]",
              "name": "pricingOptions",
              "type": "tuple[5]"
            }
          ],
          "internalType": "struct ILasmRaffle.CreateRaffleCalldata",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createRaffle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "raffleId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "raffleId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pricingOptionIndex",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILasmRaffle.EntryCalldata[]",
          "name": "entries",
          "type": "tuple[]"
        }
      ],
      "name": "enterRaffles",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feePrice",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "raffleId",
          "type": "uint256"
        }
      ],
      "name": "getEntries",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint40",
              "name": "currentEntryIndex",
              "type": "uint40"
            },
            {
              "internalType": "address",
              "name": "participant",
              "type": "address"
            }
          ],
          "internalType": "struct ILasmRaffle.Entry[]",
          "name": "entries",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nextIndex",
          "type": "uint256"
        }
      ],
      "name": "getNextRandomNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nextIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "getNextRandomRange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "raffleId",
          "type": "uint256"
        }
      ],
      "name": "getPricingOptions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint40",
              "name": "entriesCount",
              "type": "uint40"
            },
            {
              "internalType": "uint208",
              "name": "price",
              "type": "uint208"
            }
          ],
          "internalType": "struct ILasmRaffle.PricingOption[5]",
          "name": "pricingOptions",
          "type": "tuple[5]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "raffleId",
          "type": "uint256"
        }
      ],
      "name": "getPrizes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint40",
              "name": "winnersCount",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "cumulativeWinnersCount",
              "type": "uint40"
            },
            {
              "internalType": "enum ILasmRaffle.TokenType",
              "name": "prizeType",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "prizeTier",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "prizeAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "prizeId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "prizeAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILasmRaffle.Prize[]",
          "name": "prizes",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRandomBytes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "addr",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRandomNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "getRandomRange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "raffleId",
          "type": "uint256"
        }
      ],
      "name": "getSelectWinnersCurrentPosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "currentPosition",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "raffleId",
          "type": "uint256"
        }
      ],
      "name": "getWinners",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "participant",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "claimed",
              "type": "bool"
            },
            {
              "internalType": "uint8",
              "name": "prizeIndex",
              "type": "uint8"
            },
            {
              "internalType": "uint40",
              "name": "entryIndex",
              "type": "uint40"
            }
          ],
          "internalType": "struct ILasmRaffle.Winner[]",
          "name": "winners",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "raffleId",
          "type": "uint256"
        }
      ],
      "name": "getWinnersCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "winnersCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isCurrencyAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "raffles",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "enum ILasmRaffle.RaffleStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "isMinimumEntriesFixed",
          "type": "bool"
        },
        {
          "internalType": "uint40",
          "name": "drawnAt",
          "type": "uint40"
        },
        {
          "internalType": "uint40",
          "name": "minimumEntries",
          "type": "uint40"
        },
        {
          "internalType": "uint40",
          "name": "maximumEntriesPerParticipant",
          "type": "uint40"
        },
        {
          "internalType": "uint256",
          "name": "selectWinnersStartPosition",
          "type": "uint256"
        },
        {
          "internalType": "uint208",
          "name": "claimableFees",
          "type": "uint208"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rafflesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rafflesParticipantsStats",
      "outputs": [
        {
          "internalType": "uint208",
          "name": "amountPaid",
          "type": "uint208"
        },
        {
          "internalType": "uint40",
          "name": "entriesCount",
          "type": "uint40"
        },
        {
          "internalType": "bool",
          "name": "refunded",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "raffleId",
          "type": "uint256"
        }
      ],
      "name": "selectWinners",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint40",
          "name": "_feePrice",
          "type": "uint40"
        }
      ],
      "name": "setFeePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        }
      ],
      "name": "setFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "currencies",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "isAllowed",
          "type": "bool"
        }
      ],
      "name": "updateCurrenciesStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x49b34f4b0b46e4fdb8a632d470ef5fa0cfbe10211a1a91dcc5e8e1f596b2deaf",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0xf946cE2Fe9f127F83835dB47526b885775727628",
    "contractAddress": "0x313127406b42678c7cdd4e6a5a70b8D62b687D52",
    "transactionIndex": 0,
    "gasUsed": "2697904",
    "logsBloom": "0x
    "blockHash": "0xadbc014c7b11e941dcc08e350a255dc1a550b1d2364bd8e7d5842dc8471f832c",
    "transactionHash": "0x49b34f4b0b46e4fdb8a632d470ef5fa0cfbe10211a1a91dcc5e8e1f596b2deaf",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1883940,
        "transactionHash": "0x49b34f4b0b46e4fdb8a632d470ef5fa0cfbe10211a1a91dcc5e8e1f596b2deaf",
        "address": "0x313127406b42678c7cdd4e6a5a70b8D62b687D52",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f946ce2fe9f127f83835db47526b885775727628"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xadbc014c7b11e941dcc08e350a255dc1a550b1d2364bd8e7d5842dc8471f832c"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1883940,
        "transactionHash": "0x49b34f4b0b46e4fdb8a632d470ef5fa0cfbe10211a1a91dcc5e8e1f596b2deaf",
        "address": "0x313127406b42678c7cdd4e6a5a70b8D62b687D52",
        "topics": [
          "0x7a7b5a0a132f9e0581eb8527f66eae9ee89c2a3e79d4ac7e41a1f1f4d48a7fc2"
        ],
        "data": "0x000000000000000000000000f946ce2fe9f127f83835db47526b885775727628",
        "logIndex": 1,
        "blockHash": "0xadbc014c7b11e941dcc08e350a255dc1a550b1d2364bd8e7d5842dc8471f832c"
      }
    ],
    "blockNumber": 1883940,
    "cumulativeGasUsed": "2697904",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xeef654418d2905988dfd382995b43ccec1150f8c",
    "0xf946cE2Fe9f127F83835dB47526b885775727628"
  ],
  "numDeployments": 4,
  "solcInputHash": "e9537f26f7a6df33fb8664ebb61c5919",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdtInterface\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyRefunded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DrawExpirationTimeNotReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20TransferFail\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20TransferFromFail\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721TransferFromFail\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientNativeTokensSupplied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCurrency\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFeeRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPricingOption\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPrize\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPrizesCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStatus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWinnersCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaximumEntriesPerParticipantReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaximumEntriesReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PrizeAlreadyClaimed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"currencies\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\"}],\"name\":\"CurrenciesStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint208\",\"name\":\"amount\",\"type\":\"uint208\"}],\"name\":\"EntryRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"entriesCount\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"uint208\",\"name\":\"price\",\"type\":\"uint208\"}],\"name\":\"EntrySold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"feePrice\",\"type\":\"uint40\"}],\"name\":\"FeePriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"FeeRecipientUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeesClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"name\":\"IncreaseRaffleId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"winnerIndex\",\"type\":\"uint256[]\"}],\"name\":\"PrizesClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ILasmRaffle.RaffleStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"RaffleStatusUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAXIMUM_NUMBER_OF_PRIZES_PER_RAFFLE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_NUMBER_OF_WINNERS_PER_RAFFLE\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICING_OPTIONS_PER_RAFFLE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SELECT_WINNERS_LIMIT\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTInterface\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"name\":\"claimFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isMinimumEntriesFixed\",\"type\":\"bool\"},{\"internalType\":\"uint40\",\"name\":\"minimumEntries\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"maximumEntriesPerParticipant\",\"type\":\"uint40\"},{\"components\":[{\"internalType\":\"uint40\",\"name\":\"winnersCount\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"cumulativeWinnersCount\",\"type\":\"uint40\"},{\"internalType\":\"enum ILasmRaffle.TokenType\",\"name\":\"prizeType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"prizeTier\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"prizeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"prizeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prizeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ILasmRaffle.Prize[]\",\"name\":\"prizes\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint40\",\"name\":\"entriesCount\",\"type\":\"uint40\"},{\"internalType\":\"uint208\",\"name\":\"price\",\"type\":\"uint208\"}],\"internalType\":\"struct ILasmRaffle.PricingOption[5]\",\"name\":\"pricingOptions\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct ILasmRaffle.CreateRaffleCalldata\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createRaffle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricingOptionIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct ILasmRaffle.EntryCalldata[]\",\"name\":\"entries\",\"type\":\"tuple[]\"}],\"name\":\"enterRaffles\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePrice\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"name\":\"getEntries\",\"outputs\":[{\"components\":[{\"internalType\":\"uint40\",\"name\":\"currentEntryIndex\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"internalType\":\"struct ILasmRaffle.Entry[]\",\"name\":\"entries\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nextIndex\",\"type\":\"uint256\"}],\"name\":\"getNextRandomNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nextIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"getNextRandomRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"name\":\"getPricingOptions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint40\",\"name\":\"entriesCount\",\"type\":\"uint40\"},{\"internalType\":\"uint208\",\"name\":\"price\",\"type\":\"uint208\"}],\"internalType\":\"struct ILasmRaffle.PricingOption[5]\",\"name\":\"pricingOptions\",\"type\":\"tuple[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"name\":\"getPrizes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint40\",\"name\":\"winnersCount\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"cumulativeWinnersCount\",\"type\":\"uint40\"},{\"internalType\":\"enum ILasmRaffle.TokenType\",\"name\":\"prizeType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"prizeTier\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"prizeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"prizeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prizeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ILasmRaffle.Prize[]\",\"name\":\"prizes\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRandomBytes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"addr\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRandomNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"getRandomRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"name\":\"getSelectWinnersCurrentPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentPosition\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"name\":\"getWinners\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"prizeIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint40\",\"name\":\"entryIndex\",\"type\":\"uint40\"}],\"internalType\":\"struct ILasmRaffle.Winner[]\",\"name\":\"winners\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"name\":\"getWinnersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"winnersCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isCurrencyAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"raffles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"enum ILasmRaffle.RaffleStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isMinimumEntriesFixed\",\"type\":\"bool\"},{\"internalType\":\"uint40\",\"name\":\"drawnAt\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"minimumEntries\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"maximumEntriesPerParticipant\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"selectWinnersStartPosition\",\"type\":\"uint256\"},{\"internalType\":\"uint208\",\"name\":\"claimableFees\",\"type\":\"uint208\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rafflesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rafflesParticipantsStats\",\"outputs\":[{\"internalType\":\"uint208\",\"name\":\"amountPaid\",\"type\":\"uint208\"},{\"internalType\":\"uint40\",\"name\":\"entriesCount\",\"type\":\"uint40\"},{\"internalType\":\"bool\",\"name\":\"refunded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"name\":\"selectWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"_feePrice\",\"type\":\"uint40\"}],\"name\":\"setFeePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"currencies\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\"}],\"name\":\"updateCurrenciesStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimFees(uint256)\":{\"params\":{\"raffleId\":\"The id of the raffle.\"}},\"constructor\":{\"params\":{\"_feeRecipient\":\"The recipient of the fees\",\"_usdtInterface\":\"The USDT address\"}},\"createRaffle((bool,uint40,uint40,(uint40,uint40,uint8,uint8,address,uint256,uint256)[],(uint40,uint208)[5]))\":{\"params\":{\"params\":\"The parameters of the raffle.\"},\"returns\":{\"raffleId\":\"The id of the newly created raffle.\"}},\"enterRaffles((uint256,uint256)[])\":{\"params\":{\"entries\":\"The entries to be made.\"}},\"getEntries(uint256)\":{\"params\":{\"raffleId\":\"The id of the raffle.\"},\"returns\":{\"entries\":\"The entries entered for the raffle.\"}},\"getNextRandomNumber(uint256)\":{\"params\":{\"nextIndex\":\"The nextIndex to interate the RNG value by\"},\"returns\":{\"_0\":\"The randon number with an additional index iteration. This shold be used for multiple values in the same block\"}},\"getNextRandomRange(uint256,uint256)\":{\"params\":{\"max\":\"The maximum number the random number should be inclusive\",\"nextIndex\":\"The nextIndex to interate the RNG value by\"},\"returns\":{\"_0\":\"Random number between 0 & max\"}},\"getPricingOptions(uint256)\":{\"params\":{\"raffleId\":\"The id of the raffle.\"},\"returns\":{\"pricingOptions\":\"The pricing options for the raffle.\"}},\"getPrizes(uint256)\":{\"params\":{\"raffleId\":\"The id of the raffle.\"},\"returns\":{\"prizes\":\"The prizes to be distributed.\"}},\"getRandomBytes()\":{\"details\":\"Read here for how it works: https://docs.skale.network/tools/skale-specific/random-number-generator\"},\"getRandomNumber()\":{\"returns\":{\"_0\":\"The randon number\"}},\"getRandomRange(uint256)\":{\"params\":{\"max\":\"The maximum number the random number should be inclusive\"},\"returns\":{\"_0\":\"Random number between 0 & max\"}},\"getSelectWinnersCurrentPosition(uint256)\":{\"params\":{\"raffleId\":\"The id of the raffle.\"},\"returns\":{\"currentPosition\":\"current postion of the selectWinners().\"}},\"getWinners(uint256)\":{\"params\":{\"raffleId\":\"The id of the raffle.\"},\"returns\":{\"winners\":\"The winners of the raffle.\"}},\"getWinnersCount(uint256)\":{\"params\":{\"raffleId\":\"The id of the raffle.\"},\"returns\":{\"winnersCount\":\"The count of winners.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateCurrenciesStatus(address[],bool)\":{\"details\":\"Only callable by owner.\",\"params\":{\"currencies\":\"Currency addresses (address(0) for ETH)\",\"isAllowed\":\"Whether the currencies should be allowed for trading\"}}},\"stateVariables\":{\"raffles\":{\"details\":\"The key is the raffle ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"MAXIMUM_NUMBER_OF_PRIZES_PER_RAFFLE()\":{\"notice\":\"The maximum number of prizes per raffle.         Each individual ERC-721 counts as one prize.         Each ETH/ERC-20 with winnersCount > 1 counts as one prize.\"},\"MAXIMUM_NUMBER_OF_WINNERS_PER_RAFFLE()\":{\"notice\":\"The maximum number of winners per raffle.\"},\"PRICING_OPTIONS_PER_RAFFLE()\":{\"notice\":\"The number of pricing options per raffle.\"},\"claimFees(uint256)\":{\"notice\":\"Claims the fees collected for a raffle.\"},\"createRaffle((bool,uint40,uint40,(uint40,uint40,uint8,uint8,address,uint256,uint256)[],(uint40,uint208)[5]))\":{\"notice\":\"Creates a new raffle.\"},\"enterRaffles((uint256,uint256)[])\":{\"notice\":\"Enters a raffle or multiple raffles.\"},\"feeRecipient()\":{\"notice\":\"The fee recipient.\"},\"getEntries(uint256)\":{\"notice\":\"Gets the entries for a raffle.\"},\"getPricingOptions(uint256)\":{\"notice\":\"Gets the pricing options for a raffle.\"},\"getPrizes(uint256)\":{\"notice\":\"Gets the prizes for a raffle.\"},\"getSelectWinnersCurrentPosition(uint256)\":{\"notice\":\"Track current postion of the selectWinners() to pick winners for the raffle.\"},\"getWinners(uint256)\":{\"notice\":\"Gets the winners for a raffle.\"},\"getWinnersCount(uint256)\":{\"notice\":\"Get count of winners.\"},\"isCurrencyAllowed(address)\":{\"notice\":\"It checks whether the currency is allowed.\"},\"raffles(uint256)\":{\"notice\":\"The raffles created.\"},\"rafflesCount()\":{\"notice\":\"The number of raffles created.\"},\"updateCurrenciesStatus(address[],bool)\":{\"notice\":\"This function allows the owner to update currency statuses.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LasmRaffle.sol\":\"LasmRaffle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"contracts/LasmRaffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\n// import \\\"@dirtroad/skale-rng/contracts/RNG.sol\\\";\\nimport \\\"./RNG.sol\\\";\\nimport \\\"./interfaces/ILasmRaffle.sol\\\";\\nimport \\\"./interfaces/generic/IERC20.sol\\\";\\nimport \\\"./libraries/Arrays.sol\\\";\\nimport \\\"./libraries/Ownable.sol\\\";\\nimport \\\"./libraries/ReentrancyGuard.sol\\\";\\n\\ncontract LasmRaffle is ILasmRaffle, RNG, Ownable, ReentrancyGuard {\\n\\tusing Arrays for uint256[];\\n\\n    IERC20 public USDTInterface;\\n\\n    /**\\n     * @notice The number of raffles created.\\n     */\\n    uint256 public rafflesCount;\\n\\n    /**\\n     * @notice The raffles created.\\n     * @dev The key is the raffle ID.\\n     */\\n    mapping(uint256 => Raffle) public raffles;\\n\\n    mapping(uint256 => mapping(address => ParticipantStats)) public rafflesParticipantsStats;\\n\\n    /**\\n     * @notice It checks whether the currency is allowed.\\n     */\\n    mapping(address => bool) public isCurrencyAllowed;\\n\\n    /**\\n     * @notice The maximum number of prizes per raffle.\\n     *         Each individual ERC-721 counts as one prize.\\n     *         Each ETH/ERC-20 with winnersCount > 1 counts as one prize.\\n     */\\n    uint256 public constant MAXIMUM_NUMBER_OF_PRIZES_PER_RAFFLE = 20;\\n\\n    /**\\n     * @notice The maximum number of winners per raffle.\\n     */\\n    uint40 public constant MAXIMUM_NUMBER_OF_WINNERS_PER_RAFFLE = 2500;\\n\\n    uint40 public constant SELECT_WINNERS_LIMIT = 1000;\\n\\n    /**\\n     * @notice The fee recipient.\\n     */\\n    address public feeRecipient;\\n\\n    uint40 public feePrice = 5e4; // fee is $0.05\\n\\n    /**\\n     * @notice The number of pricing options per raffle.\\n     */\\n    uint256 public constant PRICING_OPTIONS_PER_RAFFLE = 5;\\n\\n    /**\\n     * @param _feeRecipient The recipient of the fees\\n     * @param _usdtInterface The USDT address\\n     */\\n    constructor( address _usdtInterface, address _feeRecipient) {\\n        require(_usdtInterface != address(0), \\\"Zero USDT Interface Address\\\");\\n\\n        if(_feeRecipient == address(0)) {\\n            _setFeeRecipient(msg.sender);\\n        } else {\\n            _setFeeRecipient(_feeRecipient);\\n        }\\n\\n        USDTInterface = IERC20(_usdtInterface);\\n    }\\n\\n    function createRaffle(CreateRaffleCalldata calldata params) external onlyOwner returns(uint256 raffleId) {\\n    \\tunchecked {\\n            raffleId = ++rafflesCount;\\n        }\\n\\n        emit IncreaseRaffleId(raffleId);\\n\\n        uint256 prizesCount = params.prizes.length;\\n        if (prizesCount == 0 || prizesCount > MAXIMUM_NUMBER_OF_PRIZES_PER_RAFFLE) {\\n            revert InvalidPrizesCount();\\n        }\\n\\n        Raffle storage raffle = raffles[raffleId];\\n\\n        uint40 cumulativeWinnersCount;\\n\\t\\tuint8 currentPrizeTier;\\n\\t\\tfor(uint256 i = 0; i < prizesCount; i ++) {\\n\\t\\t\\tPrize memory prize = params.prizes[i];\\n\\n\\t\\t\\tif(prize.prizeTier < currentPrizeTier) {\\n\\t\\t\\t\\trevert InvalidPrize();\\n\\t\\t\\t}\\n\\t\\t\\t_validatePrize(prize);\\n\\n\\t\\t\\tcumulativeWinnersCount += prize.winnersCount;\\n\\t\\t\\tprize.cumulativeWinnersCount = cumulativeWinnersCount;\\n\\t\\t\\tcurrentPrizeTier = prize.prizeTier;\\n\\n\\t\\t\\traffle.prizes.push(prize);\\n\\t\\t}\\n\\n\\t\\tuint40 minimumEntries = params.minimumEntries;\\n\\t\\tif (cumulativeWinnersCount > minimumEntries || cumulativeWinnersCount > MAXIMUM_NUMBER_OF_WINNERS_PER_RAFFLE) {\\n            revert InvalidWinnersCount();\\n        }\\n\\n        _validateAndSetPricingOptions(raffleId, params.pricingOptions);\\n\\n        raffle.owner = msg.sender;\\n        raffle.isMinimumEntriesFixed = params.isMinimumEntriesFixed;\\n        raffle.minimumEntries = minimumEntries;\\n        raffle.maximumEntriesPerParticipant = params.maximumEntriesPerParticipant;\\n        raffle.selectWinnersStartPosition = 0;\\n\\n        _setRaffleStatus(raffle, raffleId, RaffleStatus.Open);\\n    }\\n\\n    function enterRaffles(EntryCalldata[] calldata entries) external payable nonReentrant {\\n    \\tuint256 entriesCount = entries.length;\\n    \\tuint208 expectedUSDTValue;\\n    \\tuint256 userUSDTBalance = USDTInterface.allowance(msg.sender, address(this));\\n\\n    \\tfor (uint256 i = 0; i < entriesCount; i ++) {\\n    \\t\\tEntryCalldata calldata entry = entries[i];\\n\\n    \\t\\tif (entry.pricingOptionIndex >= PRICING_OPTIONS_PER_RAFFLE) {\\n                revert InvalidIndex();\\n            }\\n\\n            uint256 raffleId = entry.raffleId;\\n            Raffle storage raffle = raffles[raffleId];\\n\\n            _validateRaffleStatus(raffle, RaffleStatus.Open);\\n\\n            PricingOption memory pricingOption = raffle.pricingOptions[entry.pricingOptionIndex];\\n\\n            uint40 newParticipantEntriesCount = rafflesParticipantsStats[raffleId][msg.sender].entriesCount + pricingOption.entriesCount;\\n            if (newParticipantEntriesCount > raffle.maximumEntriesPerParticipant) {\\n                revert MaximumEntriesPerParticipantReached();\\n            }\\n\\t\\t\\trafflesParticipantsStats[raffleId][msg.sender].entriesCount = newParticipantEntriesCount;\\n\\n\\t\\t\\tuint208 price = pricingOption.price;\\n\\t\\t\\texpectedUSDTValue += price;\\n\\n\\t\\t\\tif (expectedUSDTValue > userUSDTBalance) {\\n\\t\\t\\t\\trevert(string(\\\"Insufficient balance\\\"));\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\tuint40 currentEntryIndex;\\n\\t\\t\\tuint256 raffleEntriesCount = raffle.entries.length;\\n\\t\\t\\tif (raffleEntriesCount == 0) {\\n                currentEntryIndex = uint40(pricingOption.entriesCount - 1);\\n            } else {\\n                currentEntryIndex = raffle.entries[raffleEntriesCount - 1].currentEntryIndex + pricingOption.entriesCount;\\n            }\\n\\n            if (raffle.isMinimumEntriesFixed) {\\n                if (currentEntryIndex >= raffle.minimumEntries) {\\n                    revert MaximumEntriesReached();\\n                }\\n            }\\n\\n            raffle.entries.push(Entry({currentEntryIndex: currentEntryIndex, participant: msg.sender}));\\n            raffle.claimableFees += price;\\n\\n            rafflesParticipantsStats[raffleId][msg.sender].amountPaid += price;\\n\\n            emit EntrySold(raffleId, msg.sender, pricingOption.entriesCount, price);\\n\\n            if (currentEntryIndex >= (raffle.minimumEntries - 1)) {\\n                _drawWinners(raffleId, raffle);\\n            }\\n    \\t}\\n\\n    \\tUSDTInterface.transferFrom(msg.sender, address(this), expectedUSDTValue);\\n    }\\n\\n    function selectWinners(uint256 raffleId) external {\\n\\t\\tRaffle storage raffle = raffles[raffleId];\\n\\t\\t_validateRaffleStatus(raffle, RaffleStatus.Drawing);\\n\\n        address raffleOwner = raffle.owner;\\n        if(msg.sender != raffleOwner) {\\n            _validateCaller(owner());\\n        }\\n\\n\\t\\tPrize[] storage prizes = raffle.prizes;\\n\\t\\tuint256 prizesCount = prizes.length;\\n\\t\\tuint256 winnersCount = prizes[prizesCount - 1].cumulativeWinnersCount;\\n\\n\\t\\tEntry[] memory entries = raffle.entries;\\n\\t\\tuint256 entriesCount = entries.length;\\n\\t\\tuint256 currentEntryIndex = uint256(entries[entriesCount - 1].currentEntryIndex);\\n        \\n        uint256[] memory currentEntryIndexArray = new uint256[](entriesCount);\\n\\t\\tfor (uint256 i = 0 ; i < entriesCount ; i ++) {\\n            currentEntryIndexArray[i] = entries[i].currentEntryIndex;\\n        }\\n\\n        uint256[] memory cumulativeWinnersCountArray = new uint256[](prizesCount);\\n        for (uint256 i = 0 ; i < prizesCount; i ++) {\\n            cumulativeWinnersCountArray[i] = prizes[i].cumulativeWinnersCount;\\n        }\\n\\n        uint40 cnt;\\n        uint256 j = raffle.selectWinnersStartPosition;\\n\\n\\t\\tfor(j; j < winnersCount && cnt < SELECT_WINNERS_LIMIT; j ++) {\\n            uint256 winningEntry = getNextRandomNumber(j) % currentEntryIndex;\\n\\t\\t\\traffle.winners.push(\\n\\t\\t\\t\\tWinner({\\n\\t\\t\\t\\t\\tparticipant: entries[currentEntryIndexArray.findUpperBound(winningEntry)].participant,\\n\\t\\t\\t\\t\\tclaimed: false,\\n\\t\\t\\t\\t\\tprizeIndex: uint8(cumulativeWinnersCountArray.findUpperBound(j + 1)),\\n\\t\\t\\t\\t\\tentryIndex: uint40(winningEntry)\\n\\t\\t\\t\\t})\\n\\t\\t\\t);\\n            cnt ++;\\n\\t\\t}\\n\\n        raffle.selectWinnersStartPosition = j;\\n        if(raffle.selectWinnersStartPosition >= winnersCount)\\n\\t\\t    _setRaffleStatus(raffle, raffleId, RaffleStatus.Drawn);\\n    }\\n\\n    /**\\n     * @param raffleId The ID of the raffle to draw winners for.\\n     * @param raffle The raffle to draw winners for.\\n     */\\n    function _drawWinners(uint256 raffleId, Raffle storage raffle) private {\\n        _setRaffleStatus(raffle, raffleId, RaffleStatus.Drawing);\\n        raffle.drawnAt = uint40(block.timestamp);\\n    }\\n\\n    function claimFees(uint256 raffleId) external nonReentrant() {\\n        Raffle storage raffle = raffles[raffleId];\\n        _validateRaffleStatus(raffle, RaffleStatus.Drawn);\\n\\n        address raffleOwner = raffle.owner;\\n        if(msg.sender != raffleOwner) {\\n            _validateCaller(owner());\\n        }\\n\\n        Entry[] memory entries = raffle.entries;\\n\\t\\tuint256 entriesCount = entries.length;\\n\\t\\tuint256 currentEntryIndex = uint256(entries[entriesCount - 1].currentEntryIndex);\\n\\n        uint256 cliamableFee = raffle.claimableFees;\\n        uint256 protocolFees = feePrice * (currentEntryIndex + 1);\\n\\n        require(USDTInterface.approve(address(this), cliamableFee), \\\"USDT approve failed\\\");\\n\\n        cliamableFee = cliamableFee - protocolFees;\\n\\n        USDTInterface.transferFrom(address(this), feeRecipient, protocolFees);\\n        USDTInterface.transferFrom(address(this), msg.sender, cliamableFee);\\n\\n        raffle.claimableFees = 0;\\n\\n        _setRaffleStatus(raffle, raffleId, RaffleStatus.Complete);\\n\\n        emit FeesClaimed(raffleId, protocolFees + cliamableFee);\\n    }\\n\\n    function updateCurrenciesStatus(address[] calldata currencies, bool isAllowed) external onlyOwner {\\n        uint256 count = currencies.length;\\n        for (uint256 i = 0 ; i < count; i ++) {\\n            isCurrencyAllowed[currencies[i]] = isAllowed;\\n        }\\n        emit CurrenciesStatusUpdated(currencies, isAllowed);\\n    }\\n    \\n    function setFeeRecipient(address _feeRecipient) external onlyOwner {\\n        _setFeeRecipient(_feeRecipient);\\n    }\\n\\n    function setFeePrice(uint40 _feePrice) external onlyOwner {\\n        _setFeePrice(_feePrice);\\n    }\\n\\n    function getWinners(uint256 raffleId) external view returns (Winner[] memory winners) {\\n        winners = raffles[raffleId].winners;\\n    }\\n\\n    function getPrizes(uint256 raffleId) external view returns (Prize[] memory prizes) {\\n        prizes = raffles[raffleId].prizes;\\n    }\\n\\n    function getEntries(uint256 raffleId) external view returns (Entry[] memory entries) {\\n        entries = raffles[raffleId].entries;\\n    }\\n\\n    function getPricingOptions(uint256 raffleId) external view returns (PricingOption[PRICING_OPTIONS_PER_RAFFLE] memory pricingOptions) {\\n        pricingOptions = raffles[raffleId].pricingOptions;\\n    }\\n\\n    function getSelectWinnersCurrentPosition(uint256 raffleId) external view returns (uint256 currentPosition) {\\n        currentPosition = raffles[raffleId].selectWinnersStartPosition;\\n    }\\n\\n    function getWinnersCount(uint256 raffleId) external view returns (uint256 winnersCount) {\\n        require(raffleId > 0 && raffleId <= rafflesCount, \\\"Invalid raffle ID\\\");\\n\\n        Raffle memory raffle = raffles[raffleId];\\n        Prize[] memory prizes = raffle.prizes;\\n\\t\\tuint256 prizesCount = prizes.length;\\n\\t\\twinnersCount = prizes[prizesCount - 1].cumulativeWinnersCount;\\n    }\\n\\n    /**\\n     * @param raffleId The ID of the raffle.\\n     * @param pricingOptions The pricing options for the raffle.\\n     */\\n    function _validateAndSetPricingOptions(uint256 raffleId, PricingOption[PRICING_OPTIONS_PER_RAFFLE] calldata pricingOptions) private {\\n        for (uint256 i = 0 ; i < PRICING_OPTIONS_PER_RAFFLE; i ++) {\\n            PricingOption memory pricingOption = pricingOptions[i];\\n\\n            uint40 entriesCount = pricingOption.entriesCount;\\n            uint208 price = pricingOption.price;\\n\\n            if (entriesCount == 0 || price == 0) {\\n                revert InvalidPricingOption();\\n            }\\n\\n            raffles[raffleId].pricingOptions[i] = pricingOption;\\n        }\\n    }\\n\\n    /**\\n     * @param prize The prize.\\n     */\\n    function _validatePrize(Prize memory prize) private view {\\n        if (prize.prizeType == TokenType.ERC721) {\\n            if (prize.prizeAmount != 1 || prize.winnersCount != 1) {\\n                revert InvalidPrize();\\n            }\\n        } else {\\n            if (prize.prizeType == TokenType.ERC20) {\\n                if (!isCurrencyAllowed[prize.prizeAddress]) {\\n                    revert InvalidCurrency();\\n                }\\n            }\\n\\n            if (prize.prizeAmount == 0 || prize.winnersCount == 0) {\\n                revert InvalidPrize();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @param raffle The raffle to check the status of.\\n     * @param status The expected status of the raffle\\n     */\\n    function _validateRaffleStatus(Raffle storage raffle, RaffleStatus status) private view {\\n        if (raffle.status != status) {\\n            revert InvalidStatus();\\n        }\\n    }\\n\\n    /**\\n     * @param caller The expected caller.\\n     */\\n    function _validateCaller(address caller) private view {\\n        if (msg.sender != caller) {\\n            revert InvalidCaller();\\n        }\\n    }\\n\\n    /**\\n     * @param _feeRecipient The new fee recipient address\\n     */\\n    function _setFeeRecipient(address _feeRecipient) private {\\n        if (_feeRecipient == address(0)) {\\n            revert InvalidFeeRecipient();\\n        }\\n        feeRecipient = _feeRecipient;\\n\\n        emit FeeRecipientUpdated(_feeRecipient);\\n    }\\n\\n    function _setFeePrice(uint40 _feePrice) private {\\n        require(_feePrice > 0, \\\"Invalid fee price\\\");\\n\\n        feePrice = _feePrice;\\n\\n        emit FeePriceUpdated(_feePrice);\\n    }\\n\\n    /**\\n     * @param raffle The raffle to set the status of.\\n     * @param raffleId The ID of the raffle to set the status of.\\n     * @param status The status to set.\\n     */\\n    function _setRaffleStatus(Raffle storage raffle, uint256 raffleId, RaffleStatus status) private {\\n        raffle.status = status;\\n        \\n        emit RaffleStatusUpdated(raffleId, status);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xff43862da95bc16a3b6becdc944d4289cf7af4cf6a2ba1ca4c8ccf7be4553023\",\"license\":\"MIT\"},\"contracts/RNG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/**\\n * RNG Endpoint Code for Function getRandomBytes() is taken from the SKALE Network Documentation here: https://docs.skale.network/tools/skale-specific/random-number-generator\\n */\\ncontract RNG {\\n\\n    /**\\n     * @dev Read here for how it works: https://docs.skale.network/tools/skale-specific/random-number-generator\\n     */\\n    function getRandomBytes() public view returns (bytes32 addr) {\\n        assembly {\\n            let freemem := mload(0x40)\\n            let start_addr := add(freemem, 0)\\n            if iszero(staticcall(gas(), 0x18, 0, 0, start_addr, 32)) {\\n              invalid()\\n            }\\n            addr := mload(freemem)\\n        }\\n    }\\n    \\n    /**\\n     * @return The randon number\\n     */\\n\\tfunction getRandomNumber() public view returns (uint256) {\\n\\t\\treturn uint256(getRandomBytes());\\n\\t}\\n    \\n    /**\\n     * @param nextIndex The nextIndex to interate the RNG value by\\n     * @return The randon number with an additional index iteration. This shold be used for multiple values in the same block\\n     */\\n\\tfunction getNextRandomNumber(uint256 nextIndex) public view returns (uint256) {\\n\\t\\treturn uint256(keccak256(abi.encode(getRandomNumber() | nextIndex)));\\n\\t}\\n\\n\\n    /**\\n     * @param nextIndex The nextIndex to interate the RNG value by\\n     * @param max The maximum number the random number should be inclusive\\n     * @return Random number between 0 & max\\n     */\\n\\tfunction getNextRandomRange(uint256 nextIndex, uint256 max) public view returns (uint256) {\\n\\t\\treturn uint256(keccak256(abi.encode(getRandomNumber() | nextIndex))) % max;\\n\\t}\\n    \\n    /**\\n     * @param max The maximum number the random number should be inclusive\\n     * @return Random number between 0 & max\\n     */\\n\\tfunction getRandomRange(uint256 max) public view returns (uint256) {\\n\\t\\treturn getRandomNumber() % max;\\n\\t}\\n}\\n\",\"keccak256\":\"0xcf843a8380b7fd633d51c8df1eb311602b814ce3fa552f9ece6d483185961ef4\",\"license\":\"MIT\"},\"contracts/interfaces/ILasmRaffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface ILasmRaffle {\\n    enum RaffleStatus {\\n        None,\\n        Open,\\n        Drawing,\\n        Drawn,\\n        Complete\\n    }\\n\\n    enum TokenType {\\n        ERC721,\\n        ERC20\\n    }\\n\\n    /**\\n     * @param entriesCount The number of entries that can be purchased for the given price.\\n     * @param price The price of the entries.\\n     */\\n    struct PricingOption {\\n        uint40 entriesCount;\\n        uint208 price;\\n    }\\n\\n    /**\\n     * @param currentEntryIndex The cumulative number of entries in the raffle.\\n     * @param participant The address of the participant.\\n     */\\n    struct Entry {\\n        uint40 currentEntryIndex;\\n        address participant;\\n    }\\n\\n    /**\\n     * @param participant The address of the winner.\\n     * @param claimed Whether the winner has claimed the prize.\\n     * @param prizeIndex The index of the prize that was won.\\n     * @param entryIndex The index of the entry that won.\\n     */\\n    struct Winner {\\n        address participant;\\n        bool claimed;\\n        uint8 prizeIndex;\\n        uint40 entryIndex;\\n    }\\n\\n    /**\\n     * @param winnersCount The number of winners.\\n     * @param cumulativeWinnersCount The cumulative number of winners in the raffle.\\n     * @param prizeType The type of the prize.\\n     * @param prizeTier The tier of the prize.\\n     * @param prizeAddress The address of the prize.\\n     * @param prizeId The id of the prize.\\n     * @param prizeAmount The amount of the prize.\\n     */\\n    struct Prize {\\n        uint40 winnersCount;\\n        uint40 cumulativeWinnersCount;\\n        TokenType prizeType;\\n        uint8 prizeTier;\\n        address prizeAddress;\\n        uint256 prizeId;\\n        uint256 prizeAmount;\\n    }\\n\\n    /**\\n     * @param owner The address of the raffle owner.\\n     * @param status The status of the raffle.\\n     * @param isMinimumEntriesFixed Whether the minimum number of entries is fixed.\\n     * @param drawnAt The time at which the raffle was drawn. It is still pending Chainlink to fulfill the randomness request.\\n     * @param minimumEntries The minimum number of entries required to draw the raffle.\\n     * @param maximumEntriesPerParticipant The maximum number of entries allowed per participant.\\n     * @param claimableFees The amount of fees collected from selling entries.\\n     * @param pricingOptions The pricing options for the raffle.\\n     * @param prizes The prizes to be distributed.\\n     * @param entries The entries that have been sold.\\n     * @param winners The winners of the raffle.\\n     */\\n    struct Raffle {\\n        address owner;\\n        RaffleStatus status;\\n        bool isMinimumEntriesFixed;\\n        uint40 drawnAt;\\n        uint40 minimumEntries;\\n        uint40 maximumEntriesPerParticipant;\\n        uint256 selectWinnersStartPosition;\\n        uint208 claimableFees;\\n        PricingOption[5] pricingOptions;\\n        Prize[] prizes;\\n        Entry[] entries;\\n        Winner[] winners;\\n    }\\n\\n    /**\\n     * @param amountPaid The amount paid by the participant.\\n     * @param entriesCount The number of entries purchased by the participant.\\n     * @param refunded Whether the participant has been refunded.\\n     */\\n    struct ParticipantStats {\\n        uint208 amountPaid;\\n        uint40 entriesCount;\\n        bool refunded;\\n    }\\n\\n    /**\\n     * @param raffleId The id of the raffle.\\n     * @param pricingOptionIndex The index of the selected pricing option.\\n     */\\n    struct EntryCalldata {\\n        uint256 raffleId;\\n        uint256 pricingOptionIndex;\\n    }\\n\\n    /**\\n     * @param minimumEntries The minimum number of entries required to draw the raffle.\\n     * @param isMinimumEntriesFixed Whether the minimum number of entries is fixed.\\n     * @param maximumEntriesPerParticipant The maximum number of entries allowed per participant.\\n     * @param prizes The prizes to be distributed.\\n     * @param pricingOptions The pricing options for the raffle.\\n     */\\n    struct CreateRaffleCalldata {\\n        bool isMinimumEntriesFixed;\\n        uint40 minimumEntries;\\n        uint40 maximumEntriesPerParticipant;\\n        Prize[] prizes;\\n        PricingOption[5] pricingOptions;\\n    }\\n\\n    struct ClaimPrizesCalldata {\\n        uint256 raffleId;\\n        uint256[] winnerIndices;\\n    }\\n\\n    event CurrenciesStatusUpdated(address[] currencies, bool isAllowed);\\n    event EntryRefunded(uint256 raffleId, address buyer, uint208 amount);\\n    event EntrySold(uint256 raffleId, address buyer, uint40 entriesCount, uint208 price);\\n    event FeesClaimed(uint256 raffleId, uint256 amount);\\n    event PrizesClaimed(uint256 raffleId, uint256[] winnerIndex);\\n    event FeeRecipientUpdated(address feeRecipient);\\n    event FeePriceUpdated(uint40 feePrice);\\n    event RaffleStatusUpdated(uint256 raffleId, RaffleStatus status);\\n\\n    event IncreaseRaffleId(uint256 raffleId);\\n\\n\\n    error AlreadyRefunded();\\n    error DrawExpirationTimeNotReached();\\n    error InsufficientNativeTokensSupplied();\\n    error InvalidCaller();\\n    error InvalidCurrency();\\n    error InvalidIndex();\\n    error InvalidPricingOption();\\n    error InvalidPrize();\\n    error InvalidPrizesCount();\\n    error InvalidFeeRecipient();\\n    error InvalidStatus();\\n    error InvalidWinnersCount();\\n    error ERC721TransferFromFail();\\n    error ERC20TransferFromFail();\\n    error ERC20TransferFail();\\n    error MaximumEntriesPerParticipantReached();\\n    error MaximumEntriesReached();\\n    error NotAContract();\\n    error PrizeAlreadyClaimed();\\n\\n    /**\\n     * @notice Creates a new raffle.\\n     * @param params The parameters of the raffle.\\n     * @return raffleId The id of the newly created raffle.\\n     */\\n    function createRaffle(CreateRaffleCalldata calldata params) external returns (uint256 raffleId);\\n\\n    /**\\n     * @notice Deposits prizes for a raffle.\\n     * @param raffleId The id of the raffle.\\n     */\\n    // function depositPrizes(uint256 raffleId) external payable;\\n\\n    /**\\n     * @notice Enters a raffle or multiple raffles.\\n     * @param entries The entries to be made.\\n     */\\n    function enterRaffles(EntryCalldata[] calldata entries) external payable;\\n\\n    /**\\n     * @notice Select the winners for a raffle based on the random words returned by Chainlink.\\n     * @param requestId The request id returned by Chainlink.\\n     */\\n    function selectWinners(uint256 requestId) external;\\n\\n    /**\\n     * @notice Claims the prizes for a winner. A winner can claim multiple prizes\\n     *         from multiple raffles in a single transaction.\\n     * @param claimPrizesCalldata The calldata for claiming prizes.\\n     */\\n    // function claimPrizes(ClaimPrizesCalldata[] calldata claimPrizesCalldata) external;\\n\\n    /**\\n     * @notice Claims the fees collected for a raffle.\\n     * @param raffleId The id of the raffle.\\n     */\\n    function claimFees(uint256 raffleId) external;\\n\\n    /**\\n     * @notice Sets the protocol fee recipient. Only callable by contract owner.\\n     * @param protocolFeeRecipient The protocol fee recipient.\\n     */\\n    function setFeeRecipient(address protocolFeeRecipient) external;\\n    \\n    /**\\n     * @notice Sets the fee price. Only callable by contract owner.\\n     * @param feePrice The fee price.\\n     */\\n    function setFeePrice(uint40 feePrice) external;\\n\\n    /**\\n     * @notice This function allows the owner to update currency statuses.\\n     * @param currencies Currency addresses (address(0) for ETH)\\n     * @param isAllowed Whether the currencies should be allowed for trading\\n     * @dev Only callable by owner.\\n     */\\n    function updateCurrenciesStatus(address[] calldata currencies, bool isAllowed) external;\\n\\n    /**\\n     * @notice Gets the winners for a raffle.\\n     * @param raffleId The id of the raffle.\\n     * @return winners The winners of the raffle.\\n     */\\n    function getWinners(uint256 raffleId) external view returns (Winner[] memory);\\n\\n    /**\\n     * @notice Gets the pricing options for a raffle.\\n     * @param raffleId The id of the raffle.\\n     * @return pricingOptions The pricing options for the raffle.\\n     */\\n    function getPricingOptions(uint256 raffleId) external view returns (PricingOption[5] memory);\\n\\n    /**\\n     * @notice Gets the prizes for a raffle.\\n     * @param raffleId The id of the raffle.\\n     * @return prizes The prizes to be distributed.\\n     */\\n    function getPrizes(uint256 raffleId) external view returns (Prize[] memory);\\n\\n    /**\\n     * @notice Gets the entries for a raffle.\\n     * @param raffleId The id of the raffle.\\n     * @return entries The entries entered for the raffle.\\n     */\\n    function getEntries(uint256 raffleId) external view returns (Entry[] memory);\\n\\n    /**\\n     * @notice Track current postion of the selectWinners() to pick winners for the raffle.\\n     * @param raffleId The id of the raffle.\\n     * @return currentPosition current postion of the selectWinners().\\n     */\\n    function getSelectWinnersCurrentPosition(uint256 raffleId) external view returns (uint256 currentPosition);\\n\\n    /**\\n     * @notice Get count of winners.\\n     * @param raffleId The id of the raffle.\\n     * @return winnersCount The count of winners.\\n     */\\n    function getWinnersCount(uint256 raffleId) external view returns (uint256 winnersCount);\\n}\\n\",\"keccak256\":\"0x8e183f829a1c151ca289694ad4b55994a9c57ae36354411109982abbaf7bec30\",\"license\":\"MIT\"},\"contracts/interfaces/generic/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IERC20 {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x00de5900712b4cf6d4eb739d325f83aec5a357b25571aaae440aad43eb1e4f05\",\"license\":\"MIT\"},\"contracts/libraries/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n *      Modified from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Arrays.sol\\n */\\nlibrary Arrays {\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] memory array, uint256 element) internal pure returns (uint256) {\\n        if (array.length == 0) {\\n            return 0;\\n        }\\n\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds down (it does integer division with truncation).\\n            if (array[mid] > element) {\\n                high = mid;\\n            } else {\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && array[low - 1] == element) {\\n            unchecked {\\n                return low - 1;\\n            }\\n        } else {\\n            return low;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa14fe4dbe819f18a45cf2fe450e751de97d14ab10f166fecd49832ea6dc21999\",\"license\":\"MIT\"},\"contracts/libraries/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x7c03cdb0bdf0104db4f87451fc7dd8fb4f94f06dbf176dfc06fd616c1b5937e8\",\"license\":\"MIT\"},\"contracts/libraries/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526007805464ffffffffff60a01b1916610c3560a41b1790553480156200002957600080fd5b506040516200303d3803806200303d8339810160408190526200004c91620001f1565b620000573362000108565b600180556001600160a01b038216620000b65760405162461bcd60e51b815260206004820152601b60248201527f5a65726f205553445420496e7465726661636520416464726573730000000000604482015260640160405180910390fd5b6001600160a01b038116620000d657620000d03362000158565b620000e1565b620000e18162000158565b50600280546001600160a01b0319166001600160a01b039290921691909117905562000229565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381166200018057604051630ed1b8b360e31b815260040160405180910390fd5b600780546001600160a01b0319166001600160a01b0383169081179091556040519081527f7a7b5a0a132f9e0581eb8527f66eae9ee89c2a3e79d4ac7e41a1f1f4d48a7fc29060200160405180910390a150565b80516001600160a01b0381168114620001ec57600080fd5b919050565b600080604083850312156200020557600080fd5b6200021083620001d4565b91506200022060208401620001d4565b90509250929050565b612e0480620002396000396000f3fe6080604052600436106101e35760003560e01c80636b1426a411610102578063cc30779511610095578063e74b981b11610064578063e74b981b146106a1578063f2fde38b146106c1578063f42df132146106e1578063f597573f146106f457600080fd5b8063cc30779514610612578063d3549ebd1461063f578063db4f160b1461066c578063dbdff2c11461068c57600080fd5b8063a17be154116100d1578063a17be15414610534578063ac68a748146105bd578063ba23ec8e146105dd578063c46e63f4146105f257600080fd5b80636b1426a4146104b4578063715018a6146104e15780638da5cb5b146104f657806395fa91351461051457600080fd5b806354ad97181161017a57806365f996c61161014957806365f996c61461042f578063689869121461045f57806369894cf714610474578063699e97711461049457600080fd5b806354ad97181461031a5780635a195d191461033f5780635d4bc0ce1461037f57806365d697f71461041a57600080fd5b80633b6cb153116101b65780633b6cb153146102885780633c051a921461029e57806346904840146102cc5780634d2c53cd1461030457600080fd5b80631e9f1a82146101e857806326d1115a1461020a57806331fe74a91461023b57806339a2eb2a14610268575b600080fd5b3480156101f457600080fd5b50610208610203366004612592565b610714565b005b34801561021657600080fd5b506102206103e881565b60405164ffffffffff90911681526020015b60405180910390f35b34801561024757600080fd5b5061025b610256366004612618565b6107d0565b6040516102329190612631565b34801561027457600080fd5b50610208610283366004612618565b61084f565b34801561029457600080fd5b506102206109c481565b3480156102aa57600080fd5b506102be6102b936600461267f565b610c8a565b604051908152602001610232565b3480156102d857600080fd5b506007546102ec906001600160a01b031681565b6040516001600160a01b039091168152602001610232565b34801561031057600080fd5b506102be60035481565b34801561032657600080fd5b5060075461022090600160a01b900464ffffffffff1681565b34801561034b57600080fd5b5061036f61035a3660046126b8565b60066020526000908152604090205460ff1681565b6040519015158152602001610232565b34801561038b57600080fd5b5061040661039a366004612618565b60046020526000908152604090208054600182015460028301546003909301546001600160a01b0383169360ff600160a01b8504811694600160a81b81049091169364ffffffffff600160b01b8304811694600160d81b9093048116939116916001600160d01b031688565b6040516102329897969594939291906126fd565b34801561042657600080fd5b506102be601481565b34801561043b57600080fd5b506102be61044a366004612618565b60009081526004602052604090206002015490565b34801561046b57600080fd5b506102be600581565b34801561048057600080fd5b506102be61048f366004612618565b610cd5565b3480156104a057600080fd5b506102086104af366004612776565b6110a6565b3480156104c057600080fd5b506104d46104cf366004612618565b6110ba565b6040516102329190612791565b3480156104ed57600080fd5b50610208611161565b34801561050257600080fd5b506000546001600160a01b03166102ec565b34801561052057600080fd5b506102be61052f366004612618565b611175565b34801561054057600080fd5b5061059061054f36600461280a565b60056020908152600092835260408084209091529082529020546001600160d01b03811690600160d01b810464ffffffffff1690600160f81b900460ff1683565b604080516001600160d01b03909416845264ffffffffff9092166020840152151590820152606001610232565b3480156105c957600080fd5b506102086105d8366004612618565b6111b1565b3480156105e957600080fd5b506102be611514565b3480156105fe57600080fd5b506102be61060d366004612618565b611531565b34801561061e57600080fd5b5061063261062d366004612618565b611546565b6040516102329190612836565b34801561064b57600080fd5b5061065f61065a366004612618565b611645565b60405161023291906128d1565b34801561067857600080fd5b506102be610687366004612923565b6116ca565b34801561069857600080fd5b506102be6119eb565b3480156106ad57600080fd5b506102086106bc3660046126b8565b6119fa565b3480156106cd57600080fd5b506102086106dc3660046126b8565b611a0b565b6102086106ef366004612966565b611a81565b34801561070057600080fd5b506002546102ec906001600160a01b031681565b61071c611f7d565b8160005b8181101561078e57826006600087878581811061073f5761073f6129db565b905060200201602081019061075491906126b8565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558061078681612a07565b915050610720565b507fcb2fef16ee9f3ea43e174daf88ffcdc8beee4ad884c7570093d998d7105869878484846040516107c293929190612a20565b60405180910390a150505050565b6107d861254b565b6000828152600460208190526040808320815160a081019092529092910190600590835b8282101561084457604080518082019091528483015464ffffffffff81168252600160281b90046001600160d01b0316602080830191909152908252600190920191016107fc565b505050509050919050565b6000818152600460205260409020610868816002611fd7565b80546001600160a01b03163381146108945761089461088f6000546001600160a01b031690565b612024565b6009820180546000826108a8600184612a77565b815481106108b8576108b86129db565b906000526020600020906003020160000160059054906101000a900464ffffffffff1664ffffffffff169050600085600a01805480602002602001604051908101604052809291908181526020016000905b82821015610957576000848152602090819020604080518082019091529084015464ffffffffff81168252600160281b90046001600160a01b03168183015282526001909201910161090a565b5050825192935060009150839050610970600184612a77565b81518110610980576109806129db565b60200260200101516000015164ffffffffff16905060008267ffffffffffffffff8111156109b0576109b0612a8a565b6040519080825280602002602001820160405280156109d9578160200160208202803683370190505b50905060005b83811015610a3b578481815181106109f9576109f96129db565b60200260200101516000015164ffffffffff16828281518110610a1e57610a1e6129db565b602090810291909101015280610a3381612a07565b9150506109df565b5060008667ffffffffffffffff811115610a5757610a57612a8a565b604051908082528060200260200182016040528015610a80578160200160208202803683370190505b50905060005b87811015610af957888181548110610aa057610aa06129db565b906000526020600020906003020160000160059054906101000a900464ffffffffff1664ffffffffff16828281518110610adc57610adc6129db565b602090810291909101015280610af181612a07565b915050610a86565b5060028a01546000905b8781108015610b1a57506103e864ffffffffff8316105b15610c6157600085610b2b83611175565b610b359190612ab6565b90508c600b0160405180608001604052808a610b5a858a61204d90919063ffffffff16565b81518110610b6a57610b6a6129db565b6020026020010151602001516001600160a01b03168152602001600015158152602001610ba4856001610b9d9190612aca565b889061204d565b60ff908116825264ffffffffff85811660209384015284546001810186556000958652948390208451950180549385015160408601516060909601516001600160a01b039097166001600160a81b031990951694909417600160a01b941515949094029390931765ffffffffffff60a81b1916600160a81b949092169390930264ffffffffff60b01b191617600160b01b939092169290920217905582610c4a81612add565b935050508080610c5990612a07565b915050610b03565b60028c01819055878110610c7b57610c7b8c8e60036120fd565b50505050505050505050505050565b60008183610c966119eb565b17604051602001610ca991815260200190565b6040516020818303038152906040528051906020012060001c610ccc9190612ab6565b90505b92915050565b60008082118015610ce857506003548211155b610d2d5760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081c9859999b19481251607a1b60448201526064015b60405180910390fd5b60008281526004602081815260408084208151610180810190925280546001600160a01b038116835291939092840191600160a01b900460ff1690811115610d7757610d776126d3565b6004811115610d8857610d886126d3565b8152815460ff600160a81b8204161515602083015264ffffffffff600160b01b82048116604080850191909152600160d81b909204811660608401526001840154166080830152600283015460a08084019190915260038401546001600160d01b031660c0840152815190810190915260e0909101906004830160056000835b82821015610e5057604080518082019091528483015464ffffffffff81168252600160281b90046001600160d01b031660208083019190915290825260019092019101610e08565b50505050815260200160098201805480602002602001604051908101604052809291908181526020016000905b82821015610f445760008481526020908190206040805160e08101825260038602909201805464ffffffffff8082168552600160281b82041694840194909452919290830190600160501b900460ff166001811115610ede57610ede6126d3565b6001811115610eef57610eef6126d3565b81528154600160581b810460ff16602080840191909152600160601b9091046001600160a01b031660408301526001808401546060840152600290930154608090920191909152918352929092019101610e7d565b505050508152602001600a8201805480602002602001604051908101604052809291908181526020016000905b82821015610fbe576000848152602090819020604080518082019091529084015464ffffffffff81168252600160281b90046001600160a01b031681830152825260019092019101610f71565b505050508152602001600b8201805480602002602001604051908101604052809291908181526020016000905b8282101561105a57600084815260209081902060408051608081018252918501546001600160a01b038116835260ff600160a01b82048116151584860152600160a81b8204169183019190915264ffffffffff600160b01b909104166060820152825260019092019101610feb565b5050509152505061012081015180519192509081611079600183612a77565b81518110611089576110896129db565b60200260200101516020015164ffffffffff169350505050919050565b6110ae611f7d565b6110b781612164565b50565b606060046000838152602001908152602001600020600b01805480602002602001604051908101604052809291908181526020016000905b8282101561084457600084815260209081902060408051608081018252918501546001600160a01b038116835260ff600160a01b82048116151584860152600160a81b8204169183019190915264ffffffffff600160b01b9091041660608201528252600190920191016110f2565b611169611f7d565b611173600061220c565b565b6000816111806119eb565b1760405160200161119391815260200190565b60408051601f19818403018152919052805160209091012092915050565b6111b961225c565b60008181526004602052604090206111d2816003611fd7565b80546001600160a01b03163381146111f9576111f961088f6000546001600160a01b031690565b600082600a01805480602002602001604051908101604052809291908181526020016000905b8282101561126c576000848152602090819020604080518082019091529084015464ffffffffff81168252600160281b90046001600160a01b03168183015282526001909201910161121f565b5050825192935060009150839050611285600184612a77565b81518110611295576112956129db565b602090810291909101015151600386015464ffffffffff90911691506001600160d01b031660006112c7836001612aca565b6007546112e29190600160a01b900464ffffffffff16612b01565b60025460405163095ea7b360e01b8152306004820152602481018590529192506001600160a01b03169063095ea7b3906044016020604051808303816000875af1158015611334573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113589190612b18565b61139a5760405162461bcd60e51b81526020600482015260136024820152721554d11508185c1c1c9bdd994819985a5b1959606a1b6044820152606401610d24565b6113a48183612a77565b6002546007546040516323b872dd60e01b81523060048201526001600160a01b0391821660248201526044810185905292945016906323b872dd906064016020604051808303816000875af1158015611401573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114259190612b18565b506002546040516323b872dd60e01b8152306004820152336024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af115801561147d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a19190612b18565b506003870180546001600160d01b03191690556114c0878960046120fd565b7fa1f87f32d0f17fab0242ca800d736293de8988c14b27747e218cf13d5c249f53886114ec8484612aca565b6040805192835260208301919091520160405180910390a1505050505050506110b760018055565b60405160009080602081848060185afa61152a57fe5b5051919050565b60008161153c6119eb565b610ccf9190612ab6565b606060046000838152602001908152602001600020600901805480602002602001604051908101604052809291908181526020016000905b828210156108445760008481526020908190206040805160e08101825260038602909201805464ffffffffff8082168552600160281b82041694840194909452919290830190600160501b900460ff1660018111156115df576115df6126d3565b60018111156115f0576115f06126d3565b81528154600160581b810460ff16602080840191909152600160601b9091046001600160a01b03166040830152600180840154606084015260029093015460809092019190915291835292909201910161157e565b606060046000838152602001908152602001600020600a01805480602002602001604051908101604052809291908181526020016000905b82821015610844576000848152602090819020604080518082019091529084015464ffffffffff81168252600160281b90046001600160a01b03168183015282526001909201910161167d565b60006116d4611f7d565b5060038054600101908190556040518181527f531a5ff512cc4a265a1e56d9ef645d991a549fee21061642db5ae17a4f6c7a139060200160405180910390a160006117226060840184612b35565b9150508015806117325750601481115b156117505760405163ab13062d60e01b815260040160405180910390fd5b60008281526004602052604081209080805b848110156118e55760006117796060890189612b35565b83818110611789576117896129db565b905060e0020180360381019061179f9190612b96565b90508260ff16816060015160ff1610156117cc57604051632f89717760e11b815260040160405180910390fd5b6117d5816122b5565b80516117e19085612c4f565b64ffffffffff8082166020808501918252606085015160098a018054600181810183556000928352939091208751600390920201805494518616600160281b0269ffffffffffffffffffff199095169190951617929092178084556040860151949850919650849391839160ff60501b1990911690600160501b90849081111561186d5761186d6126d3565b02179055506060820151815460808401516001600160a01b0316600160601b026bffffffffffffffffffffffff60ff909316600160581b02929092166affffffffffffffffffffff9091161717815560a0820151600182015560c09091015160029091015550806118dd81612a07565b915050611762565b5060006118f86040880160208901612776565b90508064ffffffffff168364ffffffffff16118061191e57506109c464ffffffffff8416115b1561193c576040516340250f0160e11b815260040160405180910390fd5b611949868860800161239c565b83546001600160a01b031916331784556119666020880188612c74565b8454600165ffffffffff0160a81b0316600160a81b911515919091026001600160d81b031617600160d81b64ffffffffff8316021784556119ad6060880160408901612776565b6001858101805464ffffffffff191664ffffffffff9390931692909217909155600060028601556119e190859088906120fd565b5050505050919050565b60006119f5611514565b919050565b611a02611f7d565b6110b78161248e565b611a13611f7d565b6001600160a01b038116611a785760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610d24565b6110b78161220c565b611a8961225c565b600254604051636eb1769f60e11b8152336004820152306024820152829160009182916001600160a01b03169063dd62ed3e90604401602060405180830381865afa158015611adc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b009190612c91565b905060005b83811015611ee85736868683818110611b2057611b206129db565b90506040020190506005816020013510611b4d576040516363df817160e01b815260040160405180910390fd5b80356000818152600460205260409020611b68816001611fd7565b600081600401846020013560058110611b8357611b836129db565b604080518082018252919092015464ffffffffff808216808452600160281b9092046001600160d01b031660208085019190915260008881526005825285812033825290915293842054929450611be192600160d01b900416612c4f565b600184015490915064ffffffffff9081169082161115611c145760405163d085f16160e01b815260040160405180910390fd5b60008481526005602090815260408083203384528252909120805464ffffffffff60d01b1916600160d01b64ffffffffff851602179055820151611c58818a612ca3565b985087896001600160d01b03161115611cad576040805180820182526014815273496e73756666696369656e742062616c616e636560601b6020820152905162461bcd60e51b8152610d249190600401612cc3565b600a840154600090808203611cd1578451611cca90600190612d11565b9150611d12565b8451600a8701611ce2600184612a77565b81548110611cf257611cf26129db565b600091825260209091200154611d0f919064ffffffffff16612c4f565b91505b8554600160a81b900460ff1615611d5657855464ffffffffff600160d81b909104811690831610611d56576040516334b3fb3b60e01b815260040160405180910390fd5b6040805180820190915264ffffffffff8084168252336020808401918252600a8a0180546001810182556000918252918120945194909101805492516001600160a01b0316600160281b026001600160c81b03199093169490931693909317179055600387018054859290611dd59084906001600160d01b0316612ca3565b82546101009290920a6001600160d01b038181021990931691831602179091556000898152600560209081526040808320338452909152812080548794509092611e2191859116612ca3565b82546101009290920a6001600160d01b038181021990931691831602179091558651604080518b815233602082015264ffffffffff9092169082015290851660608201527fc25cd4cec0cbfb9bc40ad8f59ac733efcddf6ed3b7519369c9b9ceb2ee784601915060800160405180910390a18554611eaf90600190600160d81b900464ffffffffff16612d11565b64ffffffffff168264ffffffffff1610611ecd57611ecd8787612503565b50505050505050508080611ee090612a07565b915050611b05565b506002546040516323b872dd60e01b81523360048201523060248201526001600160d01b03841660448201526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015611f48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6c9190612b18565b50505050611f7960018055565b5050565b6000546001600160a01b031633146111735760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610d24565b806004811115611fe957611fe96126d3565b8254600160a01b900460ff166004811115612006576120066126d3565b14611f79576040516307a92f1960e51b815260040160405180910390fd5b336001600160a01b038216146110b7576040516348f5c3ed60e01b815260040160405180910390fd5b6000825160000361206057506000610ccf565b82516000905b808210156120b257600061207a8383612530565b90508486828151811061208f5761208f6129db565b602002602001015111156120a5578091506120ac565b8060010192505b50612066565b6000821180156120e4575083856120ca600185612a77565b815181106120da576120da6129db565b6020026020010151145b156120f55750600019019050610ccf565b509050610ccf565b82548190849060ff60a01b1916600160a01b836004811115612121576121216126d3565b02179055507fc1191e7178b58ad510709587719f39ec315fa79e81ee7ba5c5ef3c894e94a6518282604051612157929190612d2f565b60405180910390a1505050565b60008164ffffffffff16116121af5760405162461bcd60e51b8152602060048201526011602482015270496e76616c69642066656520707269636560781b6044820152606401610d24565b6007805464ffffffffff60a01b1916600160a01b64ffffffffff8416908102919091179091556040519081527f27b7f58ff9b5d7747c74d7d1bc186900d393741413f16db047f574afa1249820906020015b60405180910390a150565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6002600154036122ae5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610d24565b6002600155565b6000816040015160018111156122cd576122cd6126d3565b03612310578060c0015160011415806122f25750806000015164ffffffffff16600114155b156110b757604051632f89717760e11b815260040160405180910390fd5b600181604001516001811115612328576123286126d3565b0361236a5760808101516001600160a01b031660009081526006602052604090205460ff1661236a57604051631eb3268560e31b815260040160405180910390fd5b60c081015115806122f25750805164ffffffffff166110b757604051632f89717760e11b815260040160405180910390fd5b60005b60058110156124895760008282600581106123bc576123bc6129db565b604002018036038101906123d09190612d43565b805160208201519192509064ffffffffff821615806123f657506001600160d01b038116155b1561241357604051625cba9760e51b815260040160405180910390fd5b60008681526004602081905260409091208491018560058110612438576124386129db565b8251910180546020909301516001600160d01b0316600160281b026001600160f81b031990931664ffffffffff9092169190911791909117905550829150612481905081612a07565b91505061239f565b505050565b6001600160a01b0381166124b557604051630ed1b8b360e31b815260040160405180910390fd5b600780546001600160a01b0319166001600160a01b0383169081179091556040519081527f7a7b5a0a132f9e0581eb8527f66eae9ee89c2a3e79d4ac7e41a1f1f4d48a7fc290602001612201565b61250f818360026120fd565b805464ffffffffff60b01b1916600160b01b4264ffffffffff160217905550565b600061253f6002848418612dba565b610ccc90848416612aca565b6040518060a001604052806005905b604080518082019091526000808252602082015281526020019060019003908161255a5790505090565b80151581146110b757600080fd5b6000806000604084860312156125a757600080fd5b833567ffffffffffffffff808211156125bf57600080fd5b818601915086601f8301126125d357600080fd5b8135818111156125e257600080fd5b8760208260051b85010111156125f757600080fd5b6020928301955093505084013561260d81612584565b809150509250925092565b60006020828403121561262a57600080fd5b5035919050565b6101408101818360005b6005811015612676578151805164ffffffffff1684526020908101516001600160d01b0316818501526040909301929091019060010161263b565b50505092915050565b6000806040838503121561269257600080fd5b50508035926020909101359150565b80356001600160a01b03811681146119f557600080fd5b6000602082840312156126ca57600080fd5b610ccc826126a1565b634e487b7160e01b600052602160045260246000fd5b600581106126f9576126f96126d3565b9052565b6001600160a01b0389168152610100810161271b602083018a6126e9565b961515604082015264ffffffffff958616606082015293851660808501529190931660a083015260c08201929092526001600160d01b0390911660e09091015292915050565b803564ffffffffff811681146119f557600080fd5b60006020828403121561278857600080fd5b610ccc82612761565b602080825282518282018190526000919060409081850190868401855b828110156127fd57815180516001600160a01b03168552868101511515878601528581015160ff168686015260609081015164ffffffffff1690850152608090930192908501906001016127ae565b5091979650505050505050565b6000806040838503121561281d57600080fd5b8235915061282d602084016126a1565b90509250929050565b602080825282518282018190526000919060409081850190868401855b828110156127fd578151805164ffffffffff90811686528782015116878601528581015160028110612887576128876126d3565b8587015260608181015160ff16908601526080808201516001600160a01b03169086015260a0808201519086015260c0908101519085015260e09093019290850190600101612853565b602080825282518282018190526000919060409081850190868401855b828110156127fd578151805164ffffffffff1685528601516001600160a01b03168685015292840192908501906001016128ee565b60006020828403121561293557600080fd5b813567ffffffffffffffff81111561294c57600080fd5b82016101c0818503121561295f57600080fd5b9392505050565b6000806020838503121561297957600080fd5b823567ffffffffffffffff8082111561299157600080fd5b818501915085601f8301126129a557600080fd5b8135818111156129b457600080fd5b8660208260061b85010111156129c957600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612a1957612a196129f1565b5060010190565b6040808252810183905260008460608301825b86811015612a61576001600160a01b03612a4c846126a1565b16825260209283019290910190600101612a33565b5080925050508215156020830152949350505050565b81810381811115610ccf57610ccf6129f1565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b600082612ac557612ac5612aa0565b500690565b80820180821115610ccf57610ccf6129f1565b600064ffffffffff808316818103612af757612af76129f1565b6001019392505050565b8082028115828204841417610ccf57610ccf6129f1565b600060208284031215612b2a57600080fd5b815161295f81612584565b6000808335601e19843603018112612b4c57600080fd5b83018035915067ffffffffffffffff821115612b6757600080fd5b602001915060e081023603821315612b7e57600080fd5b9250929050565b803560ff811681146119f557600080fd5b600060e08284031215612ba857600080fd5b60405160e0810181811067ffffffffffffffff82111715612bd957634e487b7160e01b600052604160045260246000fd5b604052612be583612761565b8152612bf360208401612761565b6020820152604083013560028110612c0a57600080fd5b6040820152612c1b60608401612b85565b6060820152612c2c608084016126a1565b608082015260a083013560a082015260c083013560c08201528091505092915050565b64ffffffffff818116838216019080821115612c6d57612c6d6129f1565b5092915050565b600060208284031215612c8657600080fd5b813561295f81612584565b60006020828403121561152a57600080fd5b6001600160d01b03818116838216019080821115612c6d57612c6d6129f1565b600060208083528351808285015260005b81811015612cf057858101830151858201604001528201612cd4565b506000604082860101526040601f19601f8301168501019250505092915050565b64ffffffffff828116828216039080821115612c6d57612c6d6129f1565b8281526040810161295f60208301846126e9565b600060408284031215612d5557600080fd5b6040516040810181811067ffffffffffffffff82111715612d8657634e487b7160e01b600052604160045260246000fd5b604052612d9283612761565b815260208301356001600160d01b0381168114612dae57600080fd5b60208201529392505050565b600082612dc957612dc9612aa0565b50049056fea2646970667358221220c8b0eb08bed0deea3904e5b6989440a1712b8ae42129bba6869af02272f1c46064736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106101e35760003560e01c80636b1426a411610102578063cc30779511610095578063e74b981b11610064578063e74b981b146106a1578063f2fde38b146106c1578063f42df132146106e1578063f597573f146106f457600080fd5b8063cc30779514610612578063d3549ebd1461063f578063db4f160b1461066c578063dbdff2c11461068c57600080fd5b8063a17be154116100d1578063a17be15414610534578063ac68a748146105bd578063ba23ec8e146105dd578063c46e63f4146105f257600080fd5b80636b1426a4146104b4578063715018a6146104e15780638da5cb5b146104f657806395fa91351461051457600080fd5b806354ad97181161017a57806365f996c61161014957806365f996c61461042f578063689869121461045f57806369894cf714610474578063699e97711461049457600080fd5b806354ad97181461031a5780635a195d191461033f5780635d4bc0ce1461037f57806365d697f71461041a57600080fd5b80633b6cb153116101b65780633b6cb153146102885780633c051a921461029e57806346904840146102cc5780634d2c53cd1461030457600080fd5b80631e9f1a82146101e857806326d1115a1461020a57806331fe74a91461023b57806339a2eb2a14610268575b600080fd5b3480156101f457600080fd5b50610208610203366004612592565b610714565b005b34801561021657600080fd5b506102206103e881565b60405164ffffffffff90911681526020015b60405180910390f35b34801561024757600080fd5b5061025b610256366004612618565b6107d0565b6040516102329190612631565b34801561027457600080fd5b50610208610283366004612618565b61084f565b34801561029457600080fd5b506102206109c481565b3480156102aa57600080fd5b506102be6102b936600461267f565b610c8a565b604051908152602001610232565b3480156102d857600080fd5b506007546102ec906001600160a01b031681565b6040516001600160a01b039091168152602001610232565b34801561031057600080fd5b506102be60035481565b34801561032657600080fd5b5060075461022090600160a01b900464ffffffffff1681565b34801561034b57600080fd5b5061036f61035a3660046126b8565b60066020526000908152604090205460ff1681565b6040519015158152602001610232565b34801561038b57600080fd5b5061040661039a366004612618565b60046020526000908152604090208054600182015460028301546003909301546001600160a01b0383169360ff600160a01b8504811694600160a81b81049091169364ffffffffff600160b01b8304811694600160d81b9093048116939116916001600160d01b031688565b6040516102329897969594939291906126fd565b34801561042657600080fd5b506102be601481565b34801561043b57600080fd5b506102be61044a366004612618565b60009081526004602052604090206002015490565b34801561046b57600080fd5b506102be600581565b34801561048057600080fd5b506102be61048f366004612618565b610cd5565b3480156104a057600080fd5b506102086104af366004612776565b6110a6565b3480156104c057600080fd5b506104d46104cf366004612618565b6110ba565b6040516102329190612791565b3480156104ed57600080fd5b50610208611161565b34801561050257600080fd5b506000546001600160a01b03166102ec565b34801561052057600080fd5b506102be61052f366004612618565b611175565b34801561054057600080fd5b5061059061054f36600461280a565b60056020908152600092835260408084209091529082529020546001600160d01b03811690600160d01b810464ffffffffff1690600160f81b900460ff1683565b604080516001600160d01b03909416845264ffffffffff9092166020840152151590820152606001610232565b3480156105c957600080fd5b506102086105d8366004612618565b6111b1565b3480156105e957600080fd5b506102be611514565b3480156105fe57600080fd5b506102be61060d366004612618565b611531565b34801561061e57600080fd5b5061063261062d366004612618565b611546565b6040516102329190612836565b34801561064b57600080fd5b5061065f61065a366004612618565b611645565b60405161023291906128d1565b34801561067857600080fd5b506102be610687366004612923565b6116ca565b34801561069857600080fd5b506102be6119eb565b3480156106ad57600080fd5b506102086106bc3660046126b8565b6119fa565b3480156106cd57600080fd5b506102086106dc3660046126b8565b611a0b565b6102086106ef366004612966565b611a81565b34801561070057600080fd5b506002546102ec906001600160a01b031681565b61071c611f7d565b8160005b8181101561078e57826006600087878581811061073f5761073f6129db565b905060200201602081019061075491906126b8565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558061078681612a07565b915050610720565b507fcb2fef16ee9f3ea43e174daf88ffcdc8beee4ad884c7570093d998d7105869878484846040516107c293929190612a20565b60405180910390a150505050565b6107d861254b565b6000828152600460208190526040808320815160a081019092529092910190600590835b8282101561084457604080518082019091528483015464ffffffffff81168252600160281b90046001600160d01b0316602080830191909152908252600190920191016107fc565b505050509050919050565b6000818152600460205260409020610868816002611fd7565b80546001600160a01b03163381146108945761089461088f6000546001600160a01b031690565b612024565b6009820180546000826108a8600184612a77565b815481106108b8576108b86129db565b906000526020600020906003020160000160059054906101000a900464ffffffffff1664ffffffffff169050600085600a01805480602002602001604051908101604052809291908181526020016000905b82821015610957576000848152602090819020604080518082019091529084015464ffffffffff81168252600160281b90046001600160a01b03168183015282526001909201910161090a565b5050825192935060009150839050610970600184612a77565b81518110610980576109806129db565b60200260200101516000015164ffffffffff16905060008267ffffffffffffffff8111156109b0576109b0612a8a565b6040519080825280602002602001820160405280156109d9578160200160208202803683370190505b50905060005b83811015610a3b578481815181106109f9576109f96129db565b60200260200101516000015164ffffffffff16828281518110610a1e57610a1e6129db565b602090810291909101015280610a3381612a07565b9150506109df565b5060008667ffffffffffffffff811115610a5757610a57612a8a565b604051908082528060200260200182016040528015610a80578160200160208202803683370190505b50905060005b87811015610af957888181548110610aa057610aa06129db565b906000526020600020906003020160000160059054906101000a900464ffffffffff1664ffffffffff16828281518110610adc57610adc6129db565b602090810291909101015280610af181612a07565b915050610a86565b5060028a01546000905b8781108015610b1a57506103e864ffffffffff8316105b15610c6157600085610b2b83611175565b610b359190612ab6565b90508c600b0160405180608001604052808a610b5a858a61204d90919063ffffffff16565b81518110610b6a57610b6a6129db565b6020026020010151602001516001600160a01b03168152602001600015158152602001610ba4856001610b9d9190612aca565b889061204d565b60ff908116825264ffffffffff85811660209384015284546001810186556000958652948390208451950180549385015160408601516060909601516001600160a01b039097166001600160a81b031990951694909417600160a01b941515949094029390931765ffffffffffff60a81b1916600160a81b949092169390930264ffffffffff60b01b191617600160b01b939092169290920217905582610c4a81612add565b935050508080610c5990612a07565b915050610b03565b60028c01819055878110610c7b57610c7b8c8e60036120fd565b50505050505050505050505050565b60008183610c966119eb565b17604051602001610ca991815260200190565b6040516020818303038152906040528051906020012060001c610ccc9190612ab6565b90505b92915050565b60008082118015610ce857506003548211155b610d2d5760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081c9859999b19481251607a1b60448201526064015b60405180910390fd5b60008281526004602081815260408084208151610180810190925280546001600160a01b038116835291939092840191600160a01b900460ff1690811115610d7757610d776126d3565b6004811115610d8857610d886126d3565b8152815460ff600160a81b8204161515602083015264ffffffffff600160b01b82048116604080850191909152600160d81b909204811660608401526001840154166080830152600283015460a08084019190915260038401546001600160d01b031660c0840152815190810190915260e0909101906004830160056000835b82821015610e5057604080518082019091528483015464ffffffffff81168252600160281b90046001600160d01b031660208083019190915290825260019092019101610e08565b50505050815260200160098201805480602002602001604051908101604052809291908181526020016000905b82821015610f445760008481526020908190206040805160e08101825260038602909201805464ffffffffff8082168552600160281b82041694840194909452919290830190600160501b900460ff166001811115610ede57610ede6126d3565b6001811115610eef57610eef6126d3565b81528154600160581b810460ff16602080840191909152600160601b9091046001600160a01b031660408301526001808401546060840152600290930154608090920191909152918352929092019101610e7d565b505050508152602001600a8201805480602002602001604051908101604052809291908181526020016000905b82821015610fbe576000848152602090819020604080518082019091529084015464ffffffffff81168252600160281b90046001600160a01b031681830152825260019092019101610f71565b505050508152602001600b8201805480602002602001604051908101604052809291908181526020016000905b8282101561105a57600084815260209081902060408051608081018252918501546001600160a01b038116835260ff600160a01b82048116151584860152600160a81b8204169183019190915264ffffffffff600160b01b909104166060820152825260019092019101610feb565b5050509152505061012081015180519192509081611079600183612a77565b81518110611089576110896129db565b60200260200101516020015164ffffffffff169350505050919050565b6110ae611f7d565b6110b781612164565b50565b606060046000838152602001908152602001600020600b01805480602002602001604051908101604052809291908181526020016000905b8282101561084457600084815260209081902060408051608081018252918501546001600160a01b038116835260ff600160a01b82048116151584860152600160a81b8204169183019190915264ffffffffff600160b01b9091041660608201528252600190920191016110f2565b611169611f7d565b611173600061220c565b565b6000816111806119eb565b1760405160200161119391815260200190565b60408051601f19818403018152919052805160209091012092915050565b6111b961225c565b60008181526004602052604090206111d2816003611fd7565b80546001600160a01b03163381146111f9576111f961088f6000546001600160a01b031690565b600082600a01805480602002602001604051908101604052809291908181526020016000905b8282101561126c576000848152602090819020604080518082019091529084015464ffffffffff81168252600160281b90046001600160a01b03168183015282526001909201910161121f565b5050825192935060009150839050611285600184612a77565b81518110611295576112956129db565b602090810291909101015151600386015464ffffffffff90911691506001600160d01b031660006112c7836001612aca565b6007546112e29190600160a01b900464ffffffffff16612b01565b60025460405163095ea7b360e01b8152306004820152602481018590529192506001600160a01b03169063095ea7b3906044016020604051808303816000875af1158015611334573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113589190612b18565b61139a5760405162461bcd60e51b81526020600482015260136024820152721554d11508185c1c1c9bdd994819985a5b1959606a1b6044820152606401610d24565b6113a48183612a77565b6002546007546040516323b872dd60e01b81523060048201526001600160a01b0391821660248201526044810185905292945016906323b872dd906064016020604051808303816000875af1158015611401573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114259190612b18565b506002546040516323b872dd60e01b8152306004820152336024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af115801561147d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a19190612b18565b506003870180546001600160d01b03191690556114c0878960046120fd565b7fa1f87f32d0f17fab0242ca800d736293de8988c14b27747e218cf13d5c249f53886114ec8484612aca565b6040805192835260208301919091520160405180910390a1505050505050506110b760018055565b60405160009080602081848060185afa61152a57fe5b5051919050565b60008161153c6119eb565b610ccf9190612ab6565b606060046000838152602001908152602001600020600901805480602002602001604051908101604052809291908181526020016000905b828210156108445760008481526020908190206040805160e08101825260038602909201805464ffffffffff8082168552600160281b82041694840194909452919290830190600160501b900460ff1660018111156115df576115df6126d3565b60018111156115f0576115f06126d3565b81528154600160581b810460ff16602080840191909152600160601b9091046001600160a01b03166040830152600180840154606084015260029093015460809092019190915291835292909201910161157e565b606060046000838152602001908152602001600020600a01805480602002602001604051908101604052809291908181526020016000905b82821015610844576000848152602090819020604080518082019091529084015464ffffffffff81168252600160281b90046001600160a01b03168183015282526001909201910161167d565b60006116d4611f7d565b5060038054600101908190556040518181527f531a5ff512cc4a265a1e56d9ef645d991a549fee21061642db5ae17a4f6c7a139060200160405180910390a160006117226060840184612b35565b9150508015806117325750601481115b156117505760405163ab13062d60e01b815260040160405180910390fd5b60008281526004602052604081209080805b848110156118e55760006117796060890189612b35565b83818110611789576117896129db565b905060e0020180360381019061179f9190612b96565b90508260ff16816060015160ff1610156117cc57604051632f89717760e11b815260040160405180910390fd5b6117d5816122b5565b80516117e19085612c4f565b64ffffffffff8082166020808501918252606085015160098a018054600181810183556000928352939091208751600390920201805494518616600160281b0269ffffffffffffffffffff199095169190951617929092178084556040860151949850919650849391839160ff60501b1990911690600160501b90849081111561186d5761186d6126d3565b02179055506060820151815460808401516001600160a01b0316600160601b026bffffffffffffffffffffffff60ff909316600160581b02929092166affffffffffffffffffffff9091161717815560a0820151600182015560c09091015160029091015550806118dd81612a07565b915050611762565b5060006118f86040880160208901612776565b90508064ffffffffff168364ffffffffff16118061191e57506109c464ffffffffff8416115b1561193c576040516340250f0160e11b815260040160405180910390fd5b611949868860800161239c565b83546001600160a01b031916331784556119666020880188612c74565b8454600165ffffffffff0160a81b0316600160a81b911515919091026001600160d81b031617600160d81b64ffffffffff8316021784556119ad6060880160408901612776565b6001858101805464ffffffffff191664ffffffffff9390931692909217909155600060028601556119e190859088906120fd565b5050505050919050565b60006119f5611514565b919050565b611a02611f7d565b6110b78161248e565b611a13611f7d565b6001600160a01b038116611a785760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610d24565b6110b78161220c565b611a8961225c565b600254604051636eb1769f60e11b8152336004820152306024820152829160009182916001600160a01b03169063dd62ed3e90604401602060405180830381865afa158015611adc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b009190612c91565b905060005b83811015611ee85736868683818110611b2057611b206129db565b90506040020190506005816020013510611b4d576040516363df817160e01b815260040160405180910390fd5b80356000818152600460205260409020611b68816001611fd7565b600081600401846020013560058110611b8357611b836129db565b604080518082018252919092015464ffffffffff808216808452600160281b9092046001600160d01b031660208085019190915260008881526005825285812033825290915293842054929450611be192600160d01b900416612c4f565b600184015490915064ffffffffff9081169082161115611c145760405163d085f16160e01b815260040160405180910390fd5b60008481526005602090815260408083203384528252909120805464ffffffffff60d01b1916600160d01b64ffffffffff851602179055820151611c58818a612ca3565b985087896001600160d01b03161115611cad576040805180820182526014815273496e73756666696369656e742062616c616e636560601b6020820152905162461bcd60e51b8152610d249190600401612cc3565b600a840154600090808203611cd1578451611cca90600190612d11565b9150611d12565b8451600a8701611ce2600184612a77565b81548110611cf257611cf26129db565b600091825260209091200154611d0f919064ffffffffff16612c4f565b91505b8554600160a81b900460ff1615611d5657855464ffffffffff600160d81b909104811690831610611d56576040516334b3fb3b60e01b815260040160405180910390fd5b6040805180820190915264ffffffffff8084168252336020808401918252600a8a0180546001810182556000918252918120945194909101805492516001600160a01b0316600160281b026001600160c81b03199093169490931693909317179055600387018054859290611dd59084906001600160d01b0316612ca3565b82546101009290920a6001600160d01b038181021990931691831602179091556000898152600560209081526040808320338452909152812080548794509092611e2191859116612ca3565b82546101009290920a6001600160d01b038181021990931691831602179091558651604080518b815233602082015264ffffffffff9092169082015290851660608201527fc25cd4cec0cbfb9bc40ad8f59ac733efcddf6ed3b7519369c9b9ceb2ee784601915060800160405180910390a18554611eaf90600190600160d81b900464ffffffffff16612d11565b64ffffffffff168264ffffffffff1610611ecd57611ecd8787612503565b50505050505050508080611ee090612a07565b915050611b05565b506002546040516323b872dd60e01b81523360048201523060248201526001600160d01b03841660448201526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015611f48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6c9190612b18565b50505050611f7960018055565b5050565b6000546001600160a01b031633146111735760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610d24565b806004811115611fe957611fe96126d3565b8254600160a01b900460ff166004811115612006576120066126d3565b14611f79576040516307a92f1960e51b815260040160405180910390fd5b336001600160a01b038216146110b7576040516348f5c3ed60e01b815260040160405180910390fd5b6000825160000361206057506000610ccf565b82516000905b808210156120b257600061207a8383612530565b90508486828151811061208f5761208f6129db565b602002602001015111156120a5578091506120ac565b8060010192505b50612066565b6000821180156120e4575083856120ca600185612a77565b815181106120da576120da6129db565b6020026020010151145b156120f55750600019019050610ccf565b509050610ccf565b82548190849060ff60a01b1916600160a01b836004811115612121576121216126d3565b02179055507fc1191e7178b58ad510709587719f39ec315fa79e81ee7ba5c5ef3c894e94a6518282604051612157929190612d2f565b60405180910390a1505050565b60008164ffffffffff16116121af5760405162461bcd60e51b8152602060048201526011602482015270496e76616c69642066656520707269636560781b6044820152606401610d24565b6007805464ffffffffff60a01b1916600160a01b64ffffffffff8416908102919091179091556040519081527f27b7f58ff9b5d7747c74d7d1bc186900d393741413f16db047f574afa1249820906020015b60405180910390a150565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6002600154036122ae5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610d24565b6002600155565b6000816040015160018111156122cd576122cd6126d3565b03612310578060c0015160011415806122f25750806000015164ffffffffff16600114155b156110b757604051632f89717760e11b815260040160405180910390fd5b600181604001516001811115612328576123286126d3565b0361236a5760808101516001600160a01b031660009081526006602052604090205460ff1661236a57604051631eb3268560e31b815260040160405180910390fd5b60c081015115806122f25750805164ffffffffff166110b757604051632f89717760e11b815260040160405180910390fd5b60005b60058110156124895760008282600581106123bc576123bc6129db565b604002018036038101906123d09190612d43565b805160208201519192509064ffffffffff821615806123f657506001600160d01b038116155b1561241357604051625cba9760e51b815260040160405180910390fd5b60008681526004602081905260409091208491018560058110612438576124386129db565b8251910180546020909301516001600160d01b0316600160281b026001600160f81b031990931664ffffffffff9092169190911791909117905550829150612481905081612a07565b91505061239f565b505050565b6001600160a01b0381166124b557604051630ed1b8b360e31b815260040160405180910390fd5b600780546001600160a01b0319166001600160a01b0383169081179091556040519081527f7a7b5a0a132f9e0581eb8527f66eae9ee89c2a3e79d4ac7e41a1f1f4d48a7fc290602001612201565b61250f818360026120fd565b805464ffffffffff60b01b1916600160b01b4264ffffffffff160217905550565b600061253f6002848418612dba565b610ccc90848416612aca565b6040518060a001604052806005905b604080518082019091526000808252602082015281526020019060019003908161255a5790505090565b80151581146110b757600080fd5b6000806000604084860312156125a757600080fd5b833567ffffffffffffffff808211156125bf57600080fd5b818601915086601f8301126125d357600080fd5b8135818111156125e257600080fd5b8760208260051b85010111156125f757600080fd5b6020928301955093505084013561260d81612584565b809150509250925092565b60006020828403121561262a57600080fd5b5035919050565b6101408101818360005b6005811015612676578151805164ffffffffff1684526020908101516001600160d01b0316818501526040909301929091019060010161263b565b50505092915050565b6000806040838503121561269257600080fd5b50508035926020909101359150565b80356001600160a01b03811681146119f557600080fd5b6000602082840312156126ca57600080fd5b610ccc826126a1565b634e487b7160e01b600052602160045260246000fd5b600581106126f9576126f96126d3565b9052565b6001600160a01b0389168152610100810161271b602083018a6126e9565b961515604082015264ffffffffff958616606082015293851660808501529190931660a083015260c08201929092526001600160d01b0390911660e09091015292915050565b803564ffffffffff811681146119f557600080fd5b60006020828403121561278857600080fd5b610ccc82612761565b602080825282518282018190526000919060409081850190868401855b828110156127fd57815180516001600160a01b03168552868101511515878601528581015160ff168686015260609081015164ffffffffff1690850152608090930192908501906001016127ae565b5091979650505050505050565b6000806040838503121561281d57600080fd5b8235915061282d602084016126a1565b90509250929050565b602080825282518282018190526000919060409081850190868401855b828110156127fd578151805164ffffffffff90811686528782015116878601528581015160028110612887576128876126d3565b8587015260608181015160ff16908601526080808201516001600160a01b03169086015260a0808201519086015260c0908101519085015260e09093019290850190600101612853565b602080825282518282018190526000919060409081850190868401855b828110156127fd578151805164ffffffffff1685528601516001600160a01b03168685015292840192908501906001016128ee565b60006020828403121561293557600080fd5b813567ffffffffffffffff81111561294c57600080fd5b82016101c0818503121561295f57600080fd5b9392505050565b6000806020838503121561297957600080fd5b823567ffffffffffffffff8082111561299157600080fd5b818501915085601f8301126129a557600080fd5b8135818111156129b457600080fd5b8660208260061b85010111156129c957600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612a1957612a196129f1565b5060010190565b6040808252810183905260008460608301825b86811015612a61576001600160a01b03612a4c846126a1565b16825260209283019290910190600101612a33565b5080925050508215156020830152949350505050565b81810381811115610ccf57610ccf6129f1565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b600082612ac557612ac5612aa0565b500690565b80820180821115610ccf57610ccf6129f1565b600064ffffffffff808316818103612af757612af76129f1565b6001019392505050565b8082028115828204841417610ccf57610ccf6129f1565b600060208284031215612b2a57600080fd5b815161295f81612584565b6000808335601e19843603018112612b4c57600080fd5b83018035915067ffffffffffffffff821115612b6757600080fd5b602001915060e081023603821315612b7e57600080fd5b9250929050565b803560ff811681146119f557600080fd5b600060e08284031215612ba857600080fd5b60405160e0810181811067ffffffffffffffff82111715612bd957634e487b7160e01b600052604160045260246000fd5b604052612be583612761565b8152612bf360208401612761565b6020820152604083013560028110612c0a57600080fd5b6040820152612c1b60608401612b85565b6060820152612c2c608084016126a1565b608082015260a083013560a082015260c083013560c08201528091505092915050565b64ffffffffff818116838216019080821115612c6d57612c6d6129f1565b5092915050565b600060208284031215612c8657600080fd5b813561295f81612584565b60006020828403121561152a57600080fd5b6001600160d01b03818116838216019080821115612c6d57612c6d6129f1565b600060208083528351808285015260005b81811015612cf057858101830151858201604001528201612cd4565b506000604082860101526040601f19601f8301168501019250505092915050565b64ffffffffff828116828216039080821115612c6d57612c6d6129f1565b8281526040810161295f60208301846126e9565b600060408284031215612d5557600080fd5b6040516040810181811067ffffffffffffffff82111715612d8657634e487b7160e01b600052604160045260246000fd5b604052612d9283612761565b815260208301356001600160d01b0381168114612dae57600080fd5b60208201529392505050565b600082612dc957612dc9612aa0565b50049056fea2646970667358221220c8b0eb08bed0deea3904e5b6989440a1712b8ae42129bba6869af02272f1c46064736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimFees(uint256)": {
        "params": {
          "raffleId": "The id of the raffle."
        }
      },
      "constructor": {
        "params": {
          "_feeRecipient": "The recipient of the fees",
          "_usdtInterface": "The USDT address"
        }
      },
      "createRaffle((bool,uint40,uint40,(uint40,uint40,uint8,uint8,address,uint256,uint256)[],(uint40,uint208)[5]))": {
        "params": {
          "params": "The parameters of the raffle."
        },
        "returns": {
          "raffleId": "The id of the newly created raffle."
        }
      },
      "enterRaffles((uint256,uint256)[])": {
        "params": {
          "entries": "The entries to be made."
        }
      },
      "getEntries(uint256)": {
        "params": {
          "raffleId": "The id of the raffle."
        },
        "returns": {
          "entries": "The entries entered for the raffle."
        }
      },
      "getNextRandomNumber(uint256)": {
        "params": {
          "nextIndex": "The nextIndex to interate the RNG value by"
        },
        "returns": {
          "_0": "The randon number with an additional index iteration. This shold be used for multiple values in the same block"
        }
      },
      "getNextRandomRange(uint256,uint256)": {
        "params": {
          "max": "The maximum number the random number should be inclusive",
          "nextIndex": "The nextIndex to interate the RNG value by"
        },
        "returns": {
          "_0": "Random number between 0 & max"
        }
      },
      "getPricingOptions(uint256)": {
        "params": {
          "raffleId": "The id of the raffle."
        },
        "returns": {
          "pricingOptions": "The pricing options for the raffle."
        }
      },
      "getPrizes(uint256)": {
        "params": {
          "raffleId": "The id of the raffle."
        },
        "returns": {
          "prizes": "The prizes to be distributed."
        }
      },
      "getRandomBytes()": {
        "details": "Read here for how it works: https://docs.skale.network/tools/skale-specific/random-number-generator"
      },
      "getRandomNumber()": {
        "returns": {
          "_0": "The randon number"
        }
      },
      "getRandomRange(uint256)": {
        "params": {
          "max": "The maximum number the random number should be inclusive"
        },
        "returns": {
          "_0": "Random number between 0 & max"
        }
      },
      "getSelectWinnersCurrentPosition(uint256)": {
        "params": {
          "raffleId": "The id of the raffle."
        },
        "returns": {
          "currentPosition": "current postion of the selectWinners()."
        }
      },
      "getWinners(uint256)": {
        "params": {
          "raffleId": "The id of the raffle."
        },
        "returns": {
          "winners": "The winners of the raffle."
        }
      },
      "getWinnersCount(uint256)": {
        "params": {
          "raffleId": "The id of the raffle."
        },
        "returns": {
          "winnersCount": "The count of winners."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateCurrenciesStatus(address[],bool)": {
        "details": "Only callable by owner.",
        "params": {
          "currencies": "Currency addresses (address(0) for ETH)",
          "isAllowed": "Whether the currencies should be allowed for trading"
        }
      }
    },
    "stateVariables": {
      "raffles": {
        "details": "The key is the raffle ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "MAXIMUM_NUMBER_OF_PRIZES_PER_RAFFLE()": {
        "notice": "The maximum number of prizes per raffle.         Each individual ERC-721 counts as one prize.         Each ETH/ERC-20 with winnersCount > 1 counts as one prize."
      },
      "MAXIMUM_NUMBER_OF_WINNERS_PER_RAFFLE()": {
        "notice": "The maximum number of winners per raffle."
      },
      "PRICING_OPTIONS_PER_RAFFLE()": {
        "notice": "The number of pricing options per raffle."
      },
      "claimFees(uint256)": {
        "notice": "Claims the fees collected for a raffle."
      },
      "createRaffle((bool,uint40,uint40,(uint40,uint40,uint8,uint8,address,uint256,uint256)[],(uint40,uint208)[5]))": {
        "notice": "Creates a new raffle."
      },
      "enterRaffles((uint256,uint256)[])": {
        "notice": "Enters a raffle or multiple raffles."
      },
      "feeRecipient()": {
        "notice": "The fee recipient."
      },
      "getEntries(uint256)": {
        "notice": "Gets the entries for a raffle."
      },
      "getPricingOptions(uint256)": {
        "notice": "Gets the pricing options for a raffle."
      },
      "getPrizes(uint256)": {
        "notice": "Gets the prizes for a raffle."
      },
      "getSelectWinnersCurrentPosition(uint256)": {
        "notice": "Track current postion of the selectWinners() to pick winners for the raffle."
      },
      "getWinners(uint256)": {
        "notice": "Gets the winners for a raffle."
      },
      "getWinnersCount(uint256)": {
        "notice": "Get count of winners."
      },
      "isCurrencyAllowed(address)": {
        "notice": "It checks whether the currency is allowed."
      },
      "raffles(uint256)": {
        "notice": "The raffles created."
      },
      "rafflesCount()": {
        "notice": "The number of raffles created."
      },
      "updateCurrenciesStatus(address[],bool)": {
        "notice": "This function allows the owner to update currency statuses."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2816,
        "contract": "contracts/LasmRaffle.sol:LasmRaffle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2932,
        "contract": "contracts/LasmRaffle.sol:LasmRaffle",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 888,
        "contract": "contracts/LasmRaffle.sol:LasmRaffle",
        "label": "USDTInterface",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)2698"
      },
      {
        "astId": 891,
        "contract": "contracts/LasmRaffle.sol:LasmRaffle",
        "label": "rafflesCount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 897,
        "contract": "contracts/LasmRaffle.sol:LasmRaffle",
        "label": "raffles",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Raffle)2389_storage)"
      },
      {
        "astId": 904,
        "contract": "contracts/LasmRaffle.sol:LasmRaffle",
        "label": "rafflesParticipantsStats",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(ParticipantStats)2397_storage))"
      },
      {
        "astId": 909,
        "contract": "contracts/LasmRaffle.sol:LasmRaffle",
        "label": "isCurrencyAllowed",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 923,
        "contract": "contracts/LasmRaffle.sol:LasmRaffle",
        "label": "feeRecipient",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 926,
        "contract": "contracts/LasmRaffle.sol:LasmRaffle",
        "label": "feePrice",
        "offset": 20,
        "slot": "7",
        "type": "t_uint40"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Entry)2326_storage)dyn_storage": {
        "base": "t_struct(Entry)2326_storage",
        "encoding": "dynamic_array",
        "label": "struct ILasmRaffle.Entry[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PricingOption)2320_storage)5_storage": {
        "base": "t_struct(PricingOption)2320_storage",
        "encoding": "inplace",
        "label": "struct ILasmRaffle.PricingOption[5]",
        "numberOfBytes": "160"
      },
      "t_array(t_struct(Prize)2353_storage)dyn_storage": {
        "base": "t_struct(Prize)2353_storage",
        "encoding": "dynamic_array",
        "label": "struct ILasmRaffle.Prize[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Winner)2336_storage)dyn_storage": {
        "base": "t_struct(Winner)2336_storage",
        "encoding": "dynamic_array",
        "label": "struct ILasmRaffle.Winner[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)2698": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(RaffleStatus)2311": {
        "encoding": "inplace",
        "label": "enum ILasmRaffle.RaffleStatus",
        "numberOfBytes": "1"
      },
      "t_enum(TokenType)2314": {
        "encoding": "inplace",
        "label": "enum ILasmRaffle.TokenType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(ParticipantStats)2397_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ILasmRaffle.ParticipantStats)",
        "numberOfBytes": "32",
        "value": "t_struct(ParticipantStats)2397_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(ParticipantStats)2397_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct ILasmRaffle.ParticipantStats))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(ParticipantStats)2397_storage)"
      },
      "t_mapping(t_uint256,t_struct(Raffle)2389_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ILasmRaffle.Raffle)",
        "numberOfBytes": "32",
        "value": "t_struct(Raffle)2389_storage"
      },
      "t_struct(Entry)2326_storage": {
        "encoding": "inplace",
        "label": "struct ILasmRaffle.Entry",
        "members": [
          {
            "astId": 2323,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "currentEntryIndex",
            "offset": 0,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 2325,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "participant",
            "offset": 5,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ParticipantStats)2397_storage": {
        "encoding": "inplace",
        "label": "struct ILasmRaffle.ParticipantStats",
        "members": [
          {
            "astId": 2392,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "amountPaid",
            "offset": 0,
            "slot": "0",
            "type": "t_uint208"
          },
          {
            "astId": 2394,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "entriesCount",
            "offset": 26,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 2396,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "refunded",
            "offset": 31,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PricingOption)2320_storage": {
        "encoding": "inplace",
        "label": "struct ILasmRaffle.PricingOption",
        "members": [
          {
            "astId": 2317,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "entriesCount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 2319,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "price",
            "offset": 5,
            "slot": "0",
            "type": "t_uint208"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Prize)2353_storage": {
        "encoding": "inplace",
        "label": "struct ILasmRaffle.Prize",
        "members": [
          {
            "astId": 2339,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "winnersCount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 2341,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "cumulativeWinnersCount",
            "offset": 5,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 2344,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "prizeType",
            "offset": 10,
            "slot": "0",
            "type": "t_enum(TokenType)2314"
          },
          {
            "astId": 2346,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "prizeTier",
            "offset": 11,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2348,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "prizeAddress",
            "offset": 12,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2350,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "prizeId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2352,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "prizeAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Raffle)2389_storage": {
        "encoding": "inplace",
        "label": "struct ILasmRaffle.Raffle",
        "members": [
          {
            "astId": 2356,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2359,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "status",
            "offset": 20,
            "slot": "0",
            "type": "t_enum(RaffleStatus)2311"
          },
          {
            "astId": 2361,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "isMinimumEntriesFixed",
            "offset": 21,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2363,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "drawnAt",
            "offset": 22,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 2365,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "minimumEntries",
            "offset": 27,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 2367,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "maximumEntriesPerParticipant",
            "offset": 0,
            "slot": "1",
            "type": "t_uint40"
          },
          {
            "astId": 2369,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "selectWinnersStartPosition",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2371,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "claimableFees",
            "offset": 0,
            "slot": "3",
            "type": "t_uint208"
          },
          {
            "astId": 2376,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "pricingOptions",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_struct(PricingOption)2320_storage)5_storage"
          },
          {
            "astId": 2380,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "prizes",
            "offset": 0,
            "slot": "9",
            "type": "t_array(t_struct(Prize)2353_storage)dyn_storage"
          },
          {
            "astId": 2384,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "entries",
            "offset": 0,
            "slot": "10",
            "type": "t_array(t_struct(Entry)2326_storage)dyn_storage"
          },
          {
            "astId": 2388,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "winners",
            "offset": 0,
            "slot": "11",
            "type": "t_array(t_struct(Winner)2336_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(Winner)2336_storage": {
        "encoding": "inplace",
        "label": "struct ILasmRaffle.Winner",
        "members": [
          {
            "astId": 2329,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "participant",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2331,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "claimed",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2333,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "prizeIndex",
            "offset": 21,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2335,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "entryIndex",
            "offset": 22,
            "slot": "0",
            "type": "t_uint40"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint208": {
        "encoding": "inplace",
        "label": "uint208",
        "numberOfBytes": "26"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}