{
  "address": "0xFDCedBCe4f294491cdDE498896E505Fd82Cd32E0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdtInterface",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyRefunded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DrawExpirationTimeNotReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20TransferFail",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20TransferFromFail",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721TransferFromFail",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientNativeTokensSupplied",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCurrency",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFeeRecipient",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidIndex",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPricingOption",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPrize",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPrizesCount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStatus",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidWinnersCount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaximumEntriesPerParticipantReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaximumEntriesReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PrizeAlreadyClaimed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "currencies",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isAllowed",
          "type": "bool"
        }
      ],
      "name": "CurrenciesStatusUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "raffleId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint208",
          "name": "amount",
          "type": "uint208"
        }
      ],
      "name": "EntryRefunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "raffleId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint40",
          "name": "entriesCount",
          "type": "uint40"
        },
        {
          "indexed": false,
          "internalType": "uint208",
          "name": "price",
          "type": "uint208"
        }
      ],
      "name": "EntrySold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "protocolFeeRecipient",
          "type": "address"
        }
      ],
      "name": "FeeRecipientUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "raffleId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FeesClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "raffleId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "winnerIndex",
          "type": "uint256[]"
        }
      ],
      "name": "PrizesClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "raffleId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum ILasmRaffle.RaffleStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "RaffleStatusUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FEE_PRICE",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAXIMUM_NUMBER_OF_PRIZES_PER_RAFFLE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAXIMUM_NUMBER_OF_WINNERS_PER_RAFFLE",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ONE_HUNDRED_PERCENT_BP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICING_OPTIONS_PER_RAFFLE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDTInterface",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "raffleId",
          "type": "uint256"
        }
      ],
      "name": "claimFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "raffleId",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "winnerIndices",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct ILasmRaffle.ClaimPrizesCalldata[]",
          "name": "claimPrizesCalldata",
          "type": "tuple[]"
        }
      ],
      "name": "claimPrizes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isMinimumEntriesFixed",
              "type": "bool"
            },
            {
              "internalType": "uint40",
              "name": "minimumEntries",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "maximumEntriesPerParticipant",
              "type": "uint40"
            },
            {
              "components": [
                {
                  "internalType": "uint40",
                  "name": "winnersCount",
                  "type": "uint40"
                },
                {
                  "internalType": "uint40",
                  "name": "cumulativeWinnersCount",
                  "type": "uint40"
                },
                {
                  "internalType": "enum ILasmRaffle.TokenType",
                  "name": "prizeType",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "prizeTier",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "prizeAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "prizeId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "prizeAmount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ILasmRaffle.Prize[]",
              "name": "prizes",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint40",
                  "name": "entriesCount",
                  "type": "uint40"
                },
                {
                  "internalType": "uint208",
                  "name": "price",
                  "type": "uint208"
                }
              ],
              "internalType": "struct ILasmRaffle.PricingOption[5]",
              "name": "pricingOptions",
              "type": "tuple[5]"
            }
          ],
          "internalType": "struct ILasmRaffle.CreateRaffleCalldata",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createRaffle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "raffleId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "raffleId",
          "type": "uint256"
        }
      ],
      "name": "depositPrizes",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "raffleId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pricingOptionIndex",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILasmRaffle.EntryCalldata[]",
          "name": "entries",
          "type": "tuple[]"
        }
      ],
      "name": "enterRaffles",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "raffleId",
          "type": "uint256"
        }
      ],
      "name": "getEntries",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint40",
              "name": "currentEntryIndex",
              "type": "uint40"
            },
            {
              "internalType": "address",
              "name": "participant",
              "type": "address"
            }
          ],
          "internalType": "struct ILasmRaffle.Entry[]",
          "name": "entries",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nextIndex",
          "type": "uint256"
        }
      ],
      "name": "getNextRandomNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nextIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "getNextRandomRange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "raffleId",
          "type": "uint256"
        }
      ],
      "name": "getPricingOptions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint40",
              "name": "entriesCount",
              "type": "uint40"
            },
            {
              "internalType": "uint208",
              "name": "price",
              "type": "uint208"
            }
          ],
          "internalType": "struct ILasmRaffle.PricingOption[5]",
          "name": "pricingOptions",
          "type": "tuple[5]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "raffleId",
          "type": "uint256"
        }
      ],
      "name": "getPrizes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint40",
              "name": "winnersCount",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "cumulativeWinnersCount",
              "type": "uint40"
            },
            {
              "internalType": "enum ILasmRaffle.TokenType",
              "name": "prizeType",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "prizeTier",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "prizeAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "prizeId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "prizeAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILasmRaffle.Prize[]",
          "name": "prizes",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRandomBytes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "addr",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRandomNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "getRandomRange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "raffleId",
          "type": "uint256"
        }
      ],
      "name": "getWinners",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "participant",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "claimed",
              "type": "bool"
            },
            {
              "internalType": "uint8",
              "name": "prizeIndex",
              "type": "uint8"
            },
            {
              "internalType": "uint40",
              "name": "entryIndex",
              "type": "uint40"
            }
          ],
          "internalType": "struct ILasmRaffle.Winner[]",
          "name": "winners",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isCurrencyAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "raffles",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "enum ILasmRaffle.RaffleStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "isMinimumEntriesFixed",
          "type": "bool"
        },
        {
          "internalType": "uint40",
          "name": "drawnAt",
          "type": "uint40"
        },
        {
          "internalType": "uint40",
          "name": "minimumEntries",
          "type": "uint40"
        },
        {
          "internalType": "uint40",
          "name": "maximumEntriesPerParticipant",
          "type": "uint40"
        },
        {
          "internalType": "uint208",
          "name": "claimableFees",
          "type": "uint208"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rafflesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rafflesParticipantsStats",
      "outputs": [
        {
          "internalType": "uint208",
          "name": "amountPaid",
          "type": "uint208"
        },
        {
          "internalType": "uint40",
          "name": "entriesCount",
          "type": "uint40"
        },
        {
          "internalType": "bool",
          "name": "refunded",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "raffleId",
          "type": "uint256"
        }
      ],
      "name": "selectWinners",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        }
      ],
      "name": "setFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "currencies",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "isAllowed",
          "type": "bool"
        }
      ],
      "name": "updateCurrenciesStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2049c8e75eaaa8a1bb40a436388c31e9a0686f7388549bfdf745b193a648a73b",
  "receipt": {
    "to": null,
    "from": "0xf946cE2Fe9f127F83835dB47526b885775727628",
    "contractAddress": "0xFDCedBCe4f294491cdDE498896E505Fd82Cd32E0",
    "transactionIndex": 2,
    "gasUsed": "2949691",
    "logsBloom": "0x
    "blockHash": "0x37f1b12aa33c349fa7546818a881aed29a9ee0b4f587ab9cdd036391e8969169",
    "transactionHash": "0x2049c8e75eaaa8a1bb40a436388c31e9a0686f7388549bfdf745b193a648a73b",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 40839528,
        "transactionHash": "0x2049c8e75eaaa8a1bb40a436388c31e9a0686f7388549bfdf745b193a648a73b",
        "address": "0xFDCedBCe4f294491cdDE498896E505Fd82Cd32E0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f946ce2fe9f127f83835db47526b885775727628"
        ],
        "data": "0x",
        "logIndex": 12,
        "blockHash": "0x37f1b12aa33c349fa7546818a881aed29a9ee0b4f587ab9cdd036391e8969169"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 40839528,
        "transactionHash": "0x2049c8e75eaaa8a1bb40a436388c31e9a0686f7388549bfdf745b193a648a73b",
        "address": "0xFDCedBCe4f294491cdDE498896E505Fd82Cd32E0",
        "topics": [
          "0x7a7b5a0a132f9e0581eb8527f66eae9ee89c2a3e79d4ac7e41a1f1f4d48a7fc2"
        ],
        "data": "0x000000000000000000000000f946ce2fe9f127f83835db47526b885775727628",
        "logIndex": 13,
        "blockHash": "0x37f1b12aa33c349fa7546818a881aed29a9ee0b4f587ab9cdd036391e8969169"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 40839528,
        "transactionHash": "0x2049c8e75eaaa8a1bb40a436388c31e9a0686f7388549bfdf745b193a648a73b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000f946ce2fe9f127f83835db47526b885775727628",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001d727771ef7fd00000000000000000000000000000000000000000000000001c885c5bba21aa0c0000000000000000000000000000000000000000000034a8b13234baa083904b0000000000000000000000000000000000000000000000001c6ae9e448322a3c0000000000000000000000000000000000000000000034a8b14fa7321273101b",
        "logIndex": 14,
        "blockHash": "0x37f1b12aa33c349fa7546818a881aed29a9ee0b4f587ab9cdd036391e8969169"
      }
    ],
    "blockNumber": 40839528,
    "cumulativeGasUsed": "3212278",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5b9fB61efc8c3AE053Bdb99d372234a94Bea1499",
    "0xf946cE2Fe9f127F83835dB47526b885775727628"
  ],
  "numDeployments": 1,
  "solcInputHash": "ccfe72be5bd764e1373fc090f2ae977e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdtInterface\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyRefunded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DrawExpirationTimeNotReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20TransferFail\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20TransferFromFail\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721TransferFromFail\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientNativeTokensSupplied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCurrency\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFeeRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPricingOption\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPrize\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPrizesCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStatus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWinnersCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaximumEntriesPerParticipantReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaximumEntriesReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PrizeAlreadyClaimed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"currencies\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\"}],\"name\":\"CurrenciesStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint208\",\"name\":\"amount\",\"type\":\"uint208\"}],\"name\":\"EntryRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"entriesCount\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"uint208\",\"name\":\"price\",\"type\":\"uint208\"}],\"name\":\"EntrySold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"protocolFeeRecipient\",\"type\":\"address\"}],\"name\":\"FeeRecipientUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeesClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"winnerIndex\",\"type\":\"uint256[]\"}],\"name\":\"PrizesClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ILasmRaffle.RaffleStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"RaffleStatusUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_PRICE\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_NUMBER_OF_PRIZES_PER_RAFFLE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_NUMBER_OF_WINNERS_PER_RAFFLE\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_HUNDRED_PERCENT_BP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICING_OPTIONS_PER_RAFFLE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTInterface\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"name\":\"claimFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"winnerIndices\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ILasmRaffle.ClaimPrizesCalldata[]\",\"name\":\"claimPrizesCalldata\",\"type\":\"tuple[]\"}],\"name\":\"claimPrizes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isMinimumEntriesFixed\",\"type\":\"bool\"},{\"internalType\":\"uint40\",\"name\":\"minimumEntries\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"maximumEntriesPerParticipant\",\"type\":\"uint40\"},{\"components\":[{\"internalType\":\"uint40\",\"name\":\"winnersCount\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"cumulativeWinnersCount\",\"type\":\"uint40\"},{\"internalType\":\"enum ILasmRaffle.TokenType\",\"name\":\"prizeType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"prizeTier\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"prizeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"prizeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prizeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ILasmRaffle.Prize[]\",\"name\":\"prizes\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint40\",\"name\":\"entriesCount\",\"type\":\"uint40\"},{\"internalType\":\"uint208\",\"name\":\"price\",\"type\":\"uint208\"}],\"internalType\":\"struct ILasmRaffle.PricingOption[5]\",\"name\":\"pricingOptions\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct ILasmRaffle.CreateRaffleCalldata\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createRaffle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"name\":\"depositPrizes\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricingOptionIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct ILasmRaffle.EntryCalldata[]\",\"name\":\"entries\",\"type\":\"tuple[]\"}],\"name\":\"enterRaffles\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"name\":\"getEntries\",\"outputs\":[{\"components\":[{\"internalType\":\"uint40\",\"name\":\"currentEntryIndex\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"internalType\":\"struct ILasmRaffle.Entry[]\",\"name\":\"entries\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nextIndex\",\"type\":\"uint256\"}],\"name\":\"getNextRandomNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nextIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"getNextRandomRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"name\":\"getPricingOptions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint40\",\"name\":\"entriesCount\",\"type\":\"uint40\"},{\"internalType\":\"uint208\",\"name\":\"price\",\"type\":\"uint208\"}],\"internalType\":\"struct ILasmRaffle.PricingOption[5]\",\"name\":\"pricingOptions\",\"type\":\"tuple[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"name\":\"getPrizes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint40\",\"name\":\"winnersCount\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"cumulativeWinnersCount\",\"type\":\"uint40\"},{\"internalType\":\"enum ILasmRaffle.TokenType\",\"name\":\"prizeType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"prizeTier\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"prizeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"prizeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prizeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ILasmRaffle.Prize[]\",\"name\":\"prizes\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRandomBytes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"addr\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRandomNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"getRandomRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"name\":\"getWinners\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"prizeIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint40\",\"name\":\"entryIndex\",\"type\":\"uint40\"}],\"internalType\":\"struct ILasmRaffle.Winner[]\",\"name\":\"winners\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isCurrencyAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"raffles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"enum ILasmRaffle.RaffleStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isMinimumEntriesFixed\",\"type\":\"bool\"},{\"internalType\":\"uint40\",\"name\":\"drawnAt\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"minimumEntries\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"maximumEntriesPerParticipant\",\"type\":\"uint40\"},{\"internalType\":\"uint208\",\"name\":\"claimableFees\",\"type\":\"uint208\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rafflesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rafflesParticipantsStats\",\"outputs\":[{\"internalType\":\"uint208\",\"name\":\"amountPaid\",\"type\":\"uint208\"},{\"internalType\":\"uint40\",\"name\":\"entriesCount\",\"type\":\"uint40\"},{\"internalType\":\"bool\",\"name\":\"refunded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"name\":\"selectWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"currencies\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\"}],\"name\":\"updateCurrenciesStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimFees(uint256)\":{\"params\":{\"raffleId\":\"The id of the raffle.\"}},\"claimPrizes((uint256,uint256[])[])\":{\"params\":{\"claimPrizesCalldata\":\"The calldata for claiming prizes.\"}},\"constructor\":{\"params\":{\"_feeRecipient\":\"The recipient of the fees\",\"_usdtInterface\":\"The USDT address\"}},\"createRaffle((bool,uint40,uint40,(uint40,uint40,uint8,uint8,address,uint256,uint256)[],(uint40,uint208)[5]))\":{\"params\":{\"params\":\"The parameters of the raffle.\"},\"returns\":{\"raffleId\":\"The id of the newly created raffle.\"}},\"depositPrizes(uint256)\":{\"params\":{\"raffleId\":\"The id of the raffle.\"}},\"enterRaffles((uint256,uint256)[])\":{\"params\":{\"entries\":\"The entries to be made.\"}},\"getEntries(uint256)\":{\"params\":{\"raffleId\":\"The id of the raffle.\"},\"returns\":{\"entries\":\"The entries entered for the raffle.\"}},\"getNextRandomNumber(uint256)\":{\"params\":{\"nextIndex\":\"The nextIndex to interate the RNG value by\"},\"returns\":{\"_0\":\"The randon number with an additional index iteration. This shold be used for multiple values in the same block\"}},\"getNextRandomRange(uint256,uint256)\":{\"params\":{\"max\":\"The maximum number the random number should be inclusive\",\"nextIndex\":\"The nextIndex to interate the RNG value by\"},\"returns\":{\"_0\":\"Random number between 0 & max\"}},\"getPricingOptions(uint256)\":{\"params\":{\"raffleId\":\"The id of the raffle.\"},\"returns\":{\"pricingOptions\":\"The pricing options for the raffle.\"}},\"getPrizes(uint256)\":{\"params\":{\"raffleId\":\"The id of the raffle.\"},\"returns\":{\"prizes\":\"The prizes to be distributed.\"}},\"getRandomBytes()\":{\"details\":\"Read here for how it works: https://docs.skale.network/tools/skale-specific/random-number-generator\"},\"getRandomNumber()\":{\"returns\":{\"_0\":\"The randon number\"}},\"getRandomRange(uint256)\":{\"params\":{\"max\":\"The maximum number the random number should be inclusive\"},\"returns\":{\"_0\":\"Random number between 0 & max\"}},\"getWinners(uint256)\":{\"params\":{\"raffleId\":\"The id of the raffle.\"},\"returns\":{\"winners\":\"The winners of the raffle.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateCurrenciesStatus(address[],bool)\":{\"details\":\"Only callable by owner.\",\"params\":{\"currencies\":\"Currency addresses (address(0) for ETH)\",\"isAllowed\":\"Whether the currencies should be allowed for trading\"}}},\"stateVariables\":{\"raffles\":{\"details\":\"The key is the raffle ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"MAXIMUM_NUMBER_OF_PRIZES_PER_RAFFLE()\":{\"notice\":\"The maximum number of prizes per raffle.         Each individual ERC-721 counts as one prize.         Each ETH/ERC-20 with winnersCount > 1 counts as one prize.\"},\"MAXIMUM_NUMBER_OF_WINNERS_PER_RAFFLE()\":{\"notice\":\"The maximum number of winners per raffle.\"},\"ONE_HUNDRED_PERCENT_BP()\":{\"notice\":\"100% in basis points.\"},\"PRICING_OPTIONS_PER_RAFFLE()\":{\"notice\":\"The number of pricing options per raffle.\"},\"claimFees(uint256)\":{\"notice\":\"Claims the fees collected for a raffle.\"},\"claimPrizes((uint256,uint256[])[])\":{\"notice\":\"Claims the prizes for a winner. A winner can claim multiple prizes         from multiple raffles in a single transaction.\"},\"createRaffle((bool,uint40,uint40,(uint40,uint40,uint8,uint8,address,uint256,uint256)[],(uint40,uint208)[5]))\":{\"notice\":\"Creates a new raffle.\"},\"depositPrizes(uint256)\":{\"notice\":\"Deposits prizes for a raffle.\"},\"enterRaffles((uint256,uint256)[])\":{\"notice\":\"Enters a raffle or multiple raffles.\"},\"feeRecipient()\":{\"notice\":\"The fee recipient.\"},\"getEntries(uint256)\":{\"notice\":\"Gets the entries for a raffle.\"},\"getPricingOptions(uint256)\":{\"notice\":\"Gets the pricing options for a raffle.\"},\"getPrizes(uint256)\":{\"notice\":\"Gets the prizes for a raffle.\"},\"getWinners(uint256)\":{\"notice\":\"Gets the winners for a raffle.\"},\"isCurrencyAllowed(address)\":{\"notice\":\"It checks whether the currency is allowed.\"},\"raffles(uint256)\":{\"notice\":\"The raffles created.\"},\"rafflesCount()\":{\"notice\":\"The number of raffles created.\"},\"updateCurrenciesStatus(address[],bool)\":{\"notice\":\"This function allows the owner to update currency statuses.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LasmRaffle.sol\":\"LasmRaffle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@dirtroad/skale-rng/contracts/RNG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/**\\n * RNG Endpoint Code for Function getRandomBytes() is taken from the SKALE Network Documentation here: https://docs.skale.network/tools/skale-specific/random-number-generator\\n */\\ncontract RNG {\\n\\n    /**\\n     * @dev Read here for how it works: https://docs.skale.network/tools/skale-specific/random-number-generator\\n     */\\n    function getRandomBytes() public view returns (bytes32 addr) {\\n        assembly {\\n            let freemem := mload(0x40)\\n            let start_addr := add(freemem, 0)\\n            if iszero(staticcall(gas(), 0x18, 0, 0, start_addr, 32)) {\\n              invalid()\\n            }\\n            addr := mload(freemem)\\n        }\\n    }\\n    \\n    /**\\n     * @return The randon number\\n     */\\n\\tfunction getRandomNumber() public view returns (uint256) {\\n\\t\\treturn uint256(getRandomBytes());\\n\\t}\\n    \\n    /**\\n     * @param nextIndex The nextIndex to interate the RNG value by\\n     * @return The randon number with an additional index iteration. This shold be used for multiple values in the same block\\n     */\\n\\tfunction getNextRandomNumber(uint256 nextIndex) public view returns (uint256) {\\n\\t\\treturn uint256(keccak256(abi.encode(getRandomNumber() | nextIndex)));\\n\\t}\\n\\n\\n    /**\\n     * @param nextIndex The nextIndex to interate the RNG value by\\n     * @param max The maximum number the random number should be inclusive\\n     * @return Random number between 0 & max\\n     */\\n\\tfunction getNextRandomRange(uint256 nextIndex, uint256 max) public view returns (uint256) {\\n\\t\\treturn uint256(keccak256(abi.encode(getRandomNumber() | nextIndex))) % max;\\n\\t}\\n    \\n    /**\\n     * @param max The maximum number the random number should be inclusive\\n     * @return Random number between 0 & max\\n     */\\n\\tfunction getRandomRange(uint256 max) public view returns (uint256) {\\n\\t\\treturn getRandomNumber() % max;\\n\\t}\\n}\\n\",\"keccak256\":\"0xcf843a8380b7fd633d51c8df1eb311602b814ce3fa552f9ece6d483185961ef4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"contracts/LasmRaffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@dirtroad/skale-rng/contracts/RNG.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/ILasmRaffle.sol\\\";\\nimport \\\"./interfaces/generic/IERC721.sol\\\";\\nimport \\\"./interfaces/generic/IERC20.sol\\\";\\nimport \\\"./libraries/Arrays.sol\\\";\\n\\ncontract LasmRaffle is ILasmRaffle, RNG, Ownable, ReentrancyGuard {\\n\\tusing Arrays for uint256[];\\n\\n    IERC20 public USDTInterface;\\n\\n    /**\\n     * @notice 100% in basis points.\\n     */\\n    uint256 public constant ONE_HUNDRED_PERCENT_BP = 10_000;\\n\\n    /**\\n     * @notice The number of raffles created.\\n     */\\n    uint256 public rafflesCount;\\n\\n    /**\\n     * @notice The raffles created.\\n     * @dev The key is the raffle ID.\\n     */\\n    mapping(uint256 => Raffle) public raffles;\\n\\n    mapping(uint256 => mapping(address => ParticipantStats)) public rafflesParticipantsStats;\\n\\n    /**\\n     * @notice It checks whether the currency is allowed.\\n     */\\n    mapping(address => bool) public isCurrencyAllowed;\\n\\n    /**\\n     * @notice The maximum number of prizes per raffle.\\n     *         Each individual ERC-721 counts as one prize.\\n     *         Each ETH/ERC-20 with winnersCount > 1 counts as one prize.\\n     */\\n    uint256 public constant MAXIMUM_NUMBER_OF_PRIZES_PER_RAFFLE = 20;\\n\\n    /**\\n     * @notice The maximum number of winners per raffle.\\n     */\\n    uint40 public constant MAXIMUM_NUMBER_OF_WINNERS_PER_RAFFLE = 250;\\n\\n    /**\\n     * @notice The fee recipient.\\n     */\\n    address public feeRecipient;\\n\\n    uint40 public constant FEE_PRICE = 5e3;\\n\\n    /**\\n     * @notice The number of pricing options per raffle.\\n     */\\n    uint256 public constant PRICING_OPTIONS_PER_RAFFLE = 5;\\n\\n    /**\\n     * @param _feeRecipient The recipient of the fees\\n     * @param _usdtInterface The USDT address\\n     */\\n    constructor( address _usdtInterface, address _feeRecipient) {\\n        require(_usdtInterface != address(0), \\\"Zero USDT Interface Address\\\");\\n\\n        if(_feeRecipient == address(0)) {\\n            _setFeeRecipient(msg.sender);\\n        } else {\\n            _setFeeRecipient(_feeRecipient);\\n        }\\n\\n        USDTInterface = IERC20(_usdtInterface);\\n    }\\n\\n    function createRaffle(CreateRaffleCalldata calldata params) external returns(uint256 raffleId) {\\n    \\t\\n\\n        uint256 prizesCount = params.prizes.length;\\n        if (prizesCount == 0 || prizesCount > MAXIMUM_NUMBER_OF_PRIZES_PER_RAFFLE) {\\n            revert InvalidPrizesCount();\\n        }\\n\\n        Raffle storage raffle = raffles[raffleId];\\n\\n        uint40 cumulativeWinnersCount;\\n\\t\\tuint8 currentPrizeTier;\\n\\t\\tfor(uint256 i = 0; i < prizesCount; i ++) {\\n\\t\\t\\tPrize memory prize = params.prizes[i];\\n\\t\\t\\tif(prize.prizeTier < currentPrizeTier) {\\n\\t\\t\\t\\trevert InvalidPrize();\\n\\t\\t\\t}\\n\\t\\t\\t_validatePrize(prize);\\n\\n\\t\\t\\tcumulativeWinnersCount += prize.winnersCount;\\n\\t\\t\\tprize.cumulativeWinnersCount = cumulativeWinnersCount;\\n\\t\\t\\tcurrentPrizeTier = prize.prizeTier;\\n\\t\\t\\traffle.prizes.push(prize);\\n\\t\\t}\\n\\n\\t\\tuint40 minimumEntries = params.minimumEntries;\\n\\t\\tif (cumulativeWinnersCount > minimumEntries || cumulativeWinnersCount > MAXIMUM_NUMBER_OF_WINNERS_PER_RAFFLE) {\\n            // revert InvalidWinnersCount();\\n        }\\n        _validateAndSetPricingOptions(raffleId, params.pricingOptions);\\n\\n        raffle.owner = msg.sender;\\n        raffle.isMinimumEntriesFixed = params.isMinimumEntriesFixed;\\n        raffle.minimumEntries = minimumEntries;\\n        raffle.maximumEntriesPerParticipant = params.maximumEntriesPerParticipant;\\n\\n        _setRaffleStatus(raffle, raffleId, RaffleStatus.Created);\\n\\n        rafflesCount = rafflesCount + 1;\\n\\n        raffleId = rafflesCount;\\n    }\\n\\n    function depositPrizes(uint256 raffleId) external payable nonReentrant {\\n    \\tRaffle storage raffle = raffles[raffleId];\\n\\n    \\t_validateRaffleStatus(raffle, RaffleStatus.Created);\\n        _validateCaller(raffle.owner);\\n\\n        Prize[] storage prizes = raffle.prizes;\\n        uint256 prizesCount = prizes.length;\\n        for (uint256 i = 0; i < prizesCount; i ++) {\\n            Prize storage prize = prizes[i];\\n            TokenType prizeType = prize.prizeType;\\n            if (prizeType == TokenType.ERC721) {\\n                _executeERC721TransferFrom(prize.prizeAddress, msg.sender, address(this), prize.prizeId);\\n            } else if (prizeType == TokenType.ERC20) {\\n                _executeERC20TransferFrom(\\n                    prize.prizeAddress,\\n                    msg.sender,\\n                    address(this),\\n                    prize.prizeAmount * prize.winnersCount\\n                );\\n            } else {\\n            \\trevert InvalidPrize();\\n            }\\n        }\\n\\n        _setRaffleStatus(raffle, raffleId, RaffleStatus.Open);\\n    }\\n\\n    function enterRaffles(EntryCalldata[] calldata entries) external payable nonReentrant {\\n    \\tuint256 entriesCount = entries.length;\\n    \\tuint208 expectedUSDTValue;\\n    \\tuint256 userUSDTBalance = USDTInterface.allowance(msg.sender, address(this));\\n\\n    \\tfor (uint256 i = 0; i < entriesCount; i ++) {\\n    \\t\\tEntryCalldata calldata entry = entries[i];\\n\\n    \\t\\tif (entry.pricingOptionIndex >= PRICING_OPTIONS_PER_RAFFLE) {\\n                revert InvalidIndex();\\n            }\\n\\n            uint256 raffleId = entry.raffleId;\\n            Raffle storage raffle = raffles[raffleId];\\n\\n            _validateRaffleStatus(raffle, RaffleStatus.Open);\\n\\n            PricingOption memory pricingOption = raffle.pricingOptions[entry.pricingOptionIndex];\\n\\n            uint40 newParticipantEntriesCount = rafflesParticipantsStats[raffleId][msg.sender].entriesCount + pricingOption.entriesCount;\\n            if (newParticipantEntriesCount > raffle.maximumEntriesPerParticipant) {\\n                revert MaximumEntriesPerParticipantReached();\\n            }\\n\\t\\t\\trafflesParticipantsStats[raffleId][msg.sender].entriesCount = newParticipantEntriesCount;\\n\\n\\t\\t\\tuint208 price = pricingOption.price;\\n\\t\\t\\texpectedUSDTValue += price;\\n\\n\\t\\t\\tif (expectedUSDTValue > userUSDTBalance) {\\n\\t\\t\\t\\trevert(string(\\\"insufficient balance\\\"));\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\tuint40 currentEntryIndex;\\n\\t\\t\\tuint256 raffleEntriesCount = raffle.entries.length;\\n\\t\\t\\tif (raffleEntriesCount == 0) {\\n                currentEntryIndex = uint40(_unsafeSubtract(pricingOption.entriesCount, 1));\\n            } else {\\n                currentEntryIndex = raffle.entries[_unsafeSubtract(raffleEntriesCount, 1)].currentEntryIndex + pricingOption.entriesCount;\\n            }\\n\\n            if (raffle.isMinimumEntriesFixed) {\\n                if (currentEntryIndex >= raffle.minimumEntries) {\\n                    revert MaximumEntriesReached();\\n                }\\n            }\\n\\n            raffle.entries.push(Entry({currentEntryIndex: currentEntryIndex, participant: msg.sender}));\\n            raffle.claimableFees += price;\\n\\n            rafflesParticipantsStats[raffleId][msg.sender].amountPaid += price;\\n\\n            emit EntrySold(raffleId, msg.sender, pricingOption.entriesCount, price);\\n\\n            if (currentEntryIndex >= _unsafeSubtract(raffle.minimumEntries, 1)) {\\n                _drawWinners(raffleId, raffle);\\n            }\\n    \\t}\\n\\n    \\tUSDTInterface.transferFrom(msg.sender, address(this), expectedUSDTValue);\\n    }\\n\\n    function selectWinners(uint256 raffleId) external {\\n\\t\\tRaffle storage raffle = raffles[raffleId];\\n\\t\\t_validateRaffleStatus(raffle, RaffleStatus.Drawing);\\n\\n        address raffleOwner = raffle.owner;\\n        if(msg.sender != raffleOwner) {\\n            _validateCaller(owner());\\n        }\\n\\n\\t\\tPrize[] storage prizes = raffle.prizes;\\n\\t\\tuint256 prizesCount = prizes.length;\\n\\t\\tuint256 winnersCount = prizes[prizesCount - 1].cumulativeWinnersCount;\\n\\n\\t\\tEntry[] memory entries = raffle.entries;\\n\\t\\tuint256 entriesCount = entries.length;\\n\\t\\tuint256 currentEntryIndex = uint256(entries[entriesCount - 1].currentEntryIndex);\\n        \\n        uint256[] memory currentEntryIndexArray = new uint256[](entriesCount);\\n\\t\\tfor (uint256 i = 0 ; i < entriesCount ; i ++) {\\n            currentEntryIndexArray[i] = entries[i].currentEntryIndex;\\n        }\\n\\n        uint256[] memory cumulativeWinnersCountArray = new uint256[](prizesCount);\\n        for (uint256 i = 0 ; i < prizesCount; i ++) {\\n            cumulativeWinnersCountArray[i] = prizes[i].cumulativeWinnersCount;\\n        }\\n\\n\\t\\tfor(uint256 i = 0; i < winnersCount; i ++) {\\n\\t\\t\\tuint256 winningEntry = getNextRandomRange(0, currentEntryIndex);\\n\\t\\t\\traffle.winners.push(\\n\\t\\t\\t\\tWinner({\\n\\t\\t\\t\\t\\tparticipant: entries[currentEntryIndexArray.findUpperBound(winningEntry)].participant,\\n\\t\\t\\t\\t\\tclaimed: false,\\n\\t\\t\\t\\t\\tprizeIndex: uint8(cumulativeWinnersCountArray.findUpperBound(_unsafeAdd(i, 1))),\\n\\t\\t\\t\\t\\tentryIndex: uint40(winningEntry)\\n\\t\\t\\t\\t})\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\t_setRaffleStatus(raffle, raffleId, RaffleStatus.Drawn);\\n    }\\n\\n    /**\\n     * @param raffleId The ID of the raffle to draw winners for.\\n     * @param raffle The raffle to draw winners for.\\n     */\\n    function _drawWinners(uint256 raffleId, Raffle storage raffle) private {\\n        _setRaffleStatus(raffle, raffleId, RaffleStatus.Drawing);\\n        raffle.drawnAt = uint40(block.timestamp);\\n    }\\n\\n    function claimPrizes(ClaimPrizesCalldata[] calldata claimPrizesCalldata) external nonReentrant {\\n        uint256 claimsCount = claimPrizesCalldata.length;\\n        for (uint256 i = 0; i < claimsCount; i ++) {\\n            _claimPrizesPerRaffle(claimPrizesCalldata[i]);\\n        }\\n    }\\n\\n    function claimFees(uint256 raffleId) external nonReentrant() {\\n        Raffle storage raffle = raffles[raffleId];\\n        _validateRaffleStatus(raffle, RaffleStatus.Drawn);\\n\\n        address raffleOwner = raffle.owner;\\n        if(msg.sender != raffleOwner) {\\n            _validateCaller(owner());\\n        }\\n\\n        Entry[] memory entries = raffle.entries;\\n\\t\\tuint256 entriesCount = entries.length;\\n\\t\\tuint256 currentEntryIndex = uint256(entries[entriesCount - 1].currentEntryIndex);\\n\\n        uint256 cliamableFee = raffle.claimableFees;\\n        uint256 protocolFees = FEE_PRICE * currentEntryIndex;\\n\\n        require(USDTInterface.approve(address(this), cliamableFee), \\\"USDT approve failed\\\");\\n\\n        cliamableFee = cliamableFee - protocolFees;\\n\\n        USDTInterface.transferFrom(address(this), feeRecipient, protocolFees);\\n        USDTInterface.transferFrom(address(this), msg.sender, cliamableFee);\\n\\n        raffle.claimableFees = 0;\\n\\n        _setRaffleStatus(raffle, raffleId, RaffleStatus.Complete);\\n\\n        emit FeesClaimed(raffleId, protocolFees + cliamableFee);\\n    }\\n\\n    function updateCurrenciesStatus(address[] calldata currencies, bool isAllowed) external onlyOwner {\\n        uint256 count = currencies.length;\\n        for (uint256 i = 0 ; i < count; i ++) {\\n            isCurrencyAllowed[currencies[i]] = isAllowed;\\n        }\\n        emit CurrenciesStatusUpdated(currencies, isAllowed);\\n    }\\n    \\n    function setFeeRecipient(address _feeRecipient) external onlyOwner {\\n        _setFeeRecipient(_feeRecipient);\\n    }\\n\\n    function getWinners(uint256 raffleId) external view returns (Winner[] memory winners) {\\n        winners = raffles[raffleId].winners;\\n    }\\n\\n    function getPrizes(uint256 raffleId) external view returns (Prize[] memory prizes) {\\n        prizes = raffles[raffleId].prizes;\\n    }\\n\\n    function getEntries(uint256 raffleId) external view returns (Entry[] memory entries) {\\n        entries = raffles[raffleId].entries;\\n    }\\n\\n    function getPricingOptions(uint256 raffleId) external view returns (PricingOption[PRICING_OPTIONS_PER_RAFFLE] memory pricingOptions) {\\n        pricingOptions = raffles[raffleId].pricingOptions;\\n    }\\n\\n    /**\\n     * @param claimPrizesCalldata The calldata for claiming prizes.\\n     */\\n    function _claimPrizesPerRaffle(ClaimPrizesCalldata calldata claimPrizesCalldata) private {\\n        uint256 raffleId = claimPrizesCalldata.raffleId;\\n        Raffle storage raffle = raffles[raffleId];\\n        RaffleStatus status = raffle.status;\\n        if (status != RaffleStatus.Drawn) {\\n            _validateRaffleStatus(raffle, RaffleStatus.Complete);\\n        }\\n\\n        Winner[] storage winners = raffle.winners;\\n        uint256[] calldata winnerIndices = claimPrizesCalldata.winnerIndices;\\n        uint256 winnersCount = winners.length;\\n        uint256 claimsCount = winnerIndices.length;\\n        for (uint256 i = 0; i < claimsCount; i ++) {\\n            uint256 winnerIndex = winnerIndices[i];\\n\\n            if (winnerIndex >= winnersCount) {\\n                revert InvalidIndex();\\n            }\\n\\n            Winner storage winner = winners[winnerIndex];\\n            if (winner.claimed) {\\n                revert PrizeAlreadyClaimed();\\n            }\\n            _validateCaller(winner.participant);\\n            winner.claimed = true;\\n\\n            Prize storage prize = raffle.prizes[winner.prizeIndex];\\n            _transferPrize({prize: prize, recipient: msg.sender, multiplier: 1});\\n        }\\n\\n        emit PrizesClaimed(raffleId, winnerIndices);\\n    }\\n\\n    /**\\n     * @param prize The prize to transfer.\\n     * @param recipient The recipient of the prize.\\n     * @param multiplier The multiplier to apply to the prize amount.\\n     */\\n    function _transferPrize(Prize storage prize, address recipient, uint256 multiplier) private {\\n        TokenType prizeType = prize.prizeType;\\n        address prizeAddress = prize.prizeAddress;\\n        if (prizeType == TokenType.ERC721) {\\n            _executeERC721TransferFrom(prizeAddress, address(this), recipient, prize.prizeId);\\n        } else {\\n            _executeERC20DirectTransfer(prizeAddress, recipient, prize.prizeAmount * multiplier);\\n        }\\n    }\\n\\n    /**\\n     * @notice Execute ERC721 transferFrom\\n     * @param collection Address of the collection\\n     * @param from Address of the sender\\n     * @param to Address of the recipient\\n     * @param tokenId tokenId to transfer\\n     */\\n    function _executeERC721TransferFrom(address collection, address from, address to, uint256 tokenId) internal {\\n        if (collection.code.length == 0) {\\n            revert NotAContract();\\n        }\\n\\n        (bool status, ) = collection.call(abi.encodeCall(IERC721.transferFrom, (from, to, tokenId)));\\n\\n        if (!status) {\\n            revert ERC721TransferFromFail();\\n        }\\n    }\\n\\n\\t/**\\n     * @notice Execute ERC20 transferFrom\\n     * @param currency Currency address\\n     * @param from Sender address\\n     * @param to Recipient address\\n     * @param amount Amount to transfer\\n     */\\n    function _executeERC20TransferFrom(address currency, address from, address to, uint256 amount) internal {\\n        if (currency.code.length == 0) {\\n            revert NotAContract();\\n        }\\n\\n        uint256 fromBalance = (IERC20)(currency).balanceOf(from);\\n\\n        if(amount > fromBalance) {\\n            revert(string(\\\"insufficient balance\\\"));\\n        }\\n\\n        (bool status, bytes memory data) = currency.call(abi.encodeCall(IERC20.transferFrom, (from, to, amount)));\\n\\n        if (!status) {\\n            revert ERC20TransferFromFail();\\n        }\\n\\n        if (data.length > 0) {\\n            if (!abi.decode(data, (bool))) {\\n                revert ERC20TransferFromFail();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Execute ERC20 (direct) transfer\\n     * @param currency Currency address\\n     * @param to Recipient address\\n     * @param amount Amount to transfer\\n     */\\n    function _executeERC20DirectTransfer(address currency, address to, uint256 amount) internal {\\n        if (currency.code.length == 0) {\\n            revert NotAContract();\\n        }\\n\\n        (bool status, bytes memory data) = currency.call(abi.encodeCall(IERC20.transfer, (to, amount)));\\n\\n        if (!status) {\\n            revert ERC20TransferFail();\\n        }\\n\\n        if (data.length > 0) {\\n            if (!abi.decode(data, (bool))) {\\n                revert ERC20TransferFail();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @param raffleId The ID of the raffle.\\n     * @param pricingOptions The pricing options for the raffle.\\n     */\\n    function _validateAndSetPricingOptions(uint256 raffleId, PricingOption[PRICING_OPTIONS_PER_RAFFLE] calldata pricingOptions) private {\\n        for (uint256 i = 0 ; i < PRICING_OPTIONS_PER_RAFFLE; i ++) {\\n            PricingOption memory pricingOption = pricingOptions[i];\\n\\n            uint40 entriesCount = pricingOption.entriesCount;\\n            uint208 price = pricingOption.price;\\n\\n            if (i == 0) {\\n                if (entriesCount != 1 || price == 0) {\\n                    revert InvalidPricingOption();\\n                }\\n            } else {\\n                PricingOption memory lastPricingOption = pricingOptions[_unsafeSubtract(i, 1)];\\n                uint208 lastPrice = lastPricingOption.price;\\n                uint40 lastEntriesCount = lastPricingOption.entriesCount;\\n\\n                if (\\n                    price % entriesCount != 0 ||\\n                    entriesCount <= lastEntriesCount ||\\n                    price <= lastPrice ||\\n                    price / entriesCount > lastPrice / lastEntriesCount\\n                ) {\\n                    revert InvalidPricingOption();\\n                }\\n            }\\n\\n            raffles[raffleId].pricingOptions[i] = pricingOption;\\n        }\\n    }\\n\\n    /**\\n     * @param prize The prize.\\n     */\\n    function _validatePrize(Prize memory prize) private view {\\n        if (prize.prizeType == TokenType.ERC721) {\\n            if (prize.prizeAmount != 1 || prize.winnersCount != 1) {\\n                revert InvalidPrize();\\n            }\\n        } else {\\n            if (prize.prizeType == TokenType.ERC20) {\\n                if (!isCurrencyAllowed[prize.prizeAddress]) {\\n                    revert InvalidCurrency();\\n                }\\n            }\\n\\n            if (prize.prizeAmount == 0 || prize.winnersCount == 0) {\\n                revert InvalidPrize();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @param raffle The raffle to check the status of.\\n     * @param status The expected status of the raffle\\n     */\\n    function _validateRaffleStatus(Raffle storage raffle, RaffleStatus status) private view {\\n        if (raffle.status != status) {\\n            revert InvalidStatus();\\n        }\\n    }\\n\\n    /**\\n     * @param caller The expected caller.\\n     */\\n    function _validateCaller(address caller) private view {\\n        if (msg.sender != caller) {\\n            revert InvalidCaller();\\n        }\\n    }\\n\\n    /**\\n     * @param _feeRecipient The new fee recipient address\\n     */\\n    function _setFeeRecipient(address _feeRecipient) private {\\n        if (_feeRecipient == address(0)) {\\n            revert InvalidFeeRecipient();\\n        }\\n        feeRecipient = _feeRecipient;\\n        emit FeeRecipientUpdated(_feeRecipient);\\n    }\\n\\n    /**\\n     * @param raffle The raffle to set the status of.\\n     * @param raffleId The ID of the raffle to set the status of.\\n     * @param status The status to set.\\n     */\\n    function _setRaffleStatus(Raffle storage raffle, uint256 raffleId, RaffleStatus status) private {\\n        raffle.status = status;\\n        emit RaffleStatusUpdated(raffleId, status);\\n    }\\n\\n    function _unsafeAdd(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    function _unsafeSubtract(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x71679887f1d0eba8acac428a8f360899b11c42333b305dfa455d709c48cc3894\",\"license\":\"MIT\"},\"contracts/interfaces/ILasmRaffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface ILasmRaffle {\\n    enum RaffleStatus {\\n        None,\\n        Created,\\n        Open,\\n        Drawing,\\n        Drawn,\\n        Complete\\n    }\\n\\n    enum TokenType {\\n        ERC721,\\n        ERC20\\n    }\\n\\n    /**\\n     * @param entriesCount The number of entries that can be purchased for the given price.\\n     * @param price The price of the entries.\\n     */\\n    struct PricingOption {\\n        uint40 entriesCount;\\n        uint208 price;\\n    }\\n\\n    /**\\n     * @param currentEntryIndex The cumulative number of entries in the raffle.\\n     * @param participant The address of the participant.\\n     */\\n    struct Entry {\\n        uint40 currentEntryIndex;\\n        address participant;\\n    }\\n\\n    /**\\n     * @param participant The address of the winner.\\n     * @param claimed Whether the winner has claimed the prize.\\n     * @param prizeIndex The index of the prize that was won.\\n     * @param entryIndex The index of the entry that won.\\n     */\\n    struct Winner {\\n        address participant;\\n        bool claimed;\\n        uint8 prizeIndex;\\n        uint40 entryIndex;\\n    }\\n\\n    /**\\n     * @param winnersCount The number of winners.\\n     * @param cumulativeWinnersCount The cumulative number of winners in the raffle.\\n     * @param prizeType The type of the prize.\\n     * @param prizeTier The tier of the prize.\\n     * @param prizeAddress The address of the prize.\\n     * @param prizeId The id of the prize.\\n     * @param prizeAmount The amount of the prize.\\n     */\\n    struct Prize {\\n        uint40 winnersCount;\\n        uint40 cumulativeWinnersCount;\\n        TokenType prizeType;\\n        uint8 prizeTier;\\n        address prizeAddress;\\n        uint256 prizeId;\\n        uint256 prizeAmount;\\n    }\\n\\n    /**\\n     * @param owner The address of the raffle owner.\\n     * @param status The status of the raffle.\\n     * @param isMinimumEntriesFixed Whether the minimum number of entries is fixed.\\n     * @param drawnAt The time at which the raffle was drawn. It is still pending Chainlink to fulfill the randomness request.\\n     * @param minimumEntries The minimum number of entries required to draw the raffle.\\n     * @param maximumEntriesPerParticipant The maximum number of entries allowed per participant.\\n     * @param claimableFees The amount of fees collected from selling entries.\\n     * @param pricingOptions The pricing options for the raffle.\\n     * @param prizes The prizes to be distributed.\\n     * @param entries The entries that have been sold.\\n     * @param winners The winners of the raffle.\\n     */\\n    struct Raffle {\\n        address owner;\\n        RaffleStatus status;\\n        bool isMinimumEntriesFixed;\\n        uint40 drawnAt;\\n        uint40 minimumEntries;\\n        uint40 maximumEntriesPerParticipant;\\n        uint208 claimableFees;\\n        PricingOption[5] pricingOptions;\\n        Prize[] prizes;\\n        Entry[] entries;\\n        Winner[] winners;\\n    }\\n\\n    /**\\n     * @param amountPaid The amount paid by the participant.\\n     * @param entriesCount The number of entries purchased by the participant.\\n     * @param refunded Whether the participant has been refunded.\\n     */\\n    struct ParticipantStats {\\n        uint208 amountPaid;\\n        uint40 entriesCount;\\n        bool refunded;\\n    }\\n\\n    /**\\n     * @param raffleId The id of the raffle.\\n     * @param pricingOptionIndex The index of the selected pricing option.\\n     */\\n    struct EntryCalldata {\\n        uint256 raffleId;\\n        uint256 pricingOptionIndex;\\n    }\\n\\n    /**\\n     * @param minimumEntries The minimum number of entries required to draw the raffle.\\n     * @param isMinimumEntriesFixed Whether the minimum number of entries is fixed.\\n     * @param maximumEntriesPerParticipant The maximum number of entries allowed per participant.\\n     * @param prizes The prizes to be distributed.\\n     * @param pricingOptions The pricing options for the raffle.\\n     */\\n    struct CreateRaffleCalldata {\\n        bool isMinimumEntriesFixed;\\n        uint40 minimumEntries;\\n        uint40 maximumEntriesPerParticipant;\\n        Prize[] prizes;\\n        PricingOption[5] pricingOptions;\\n    }\\n\\n    struct ClaimPrizesCalldata {\\n        uint256 raffleId;\\n        uint256[] winnerIndices;\\n    }\\n\\n    event CurrenciesStatusUpdated(address[] currencies, bool isAllowed);\\n    event EntryRefunded(uint256 raffleId, address buyer, uint208 amount);\\n    event EntrySold(uint256 raffleId, address buyer, uint40 entriesCount, uint208 price);\\n    event FeesClaimed(uint256 raffleId, uint256 amount);\\n    event PrizesClaimed(uint256 raffleId, uint256[] winnerIndex);\\n    event FeeRecipientUpdated(address protocolFeeRecipient);\\n    event RaffleStatusUpdated(uint256 raffleId, RaffleStatus status);\\n\\n    error AlreadyRefunded();\\n    error DrawExpirationTimeNotReached();\\n    error InsufficientNativeTokensSupplied();\\n    error InvalidCaller();\\n    error InvalidCurrency();\\n    error InvalidIndex();\\n    error InvalidPricingOption();\\n    error InvalidPrize();\\n    error InvalidPrizesCount();\\n    error InvalidFeeRecipient();\\n    error InvalidStatus();\\n    error InvalidWinnersCount();\\n    error ERC721TransferFromFail();\\n    error ERC20TransferFromFail();\\n    error ERC20TransferFail();\\n    error MaximumEntriesPerParticipantReached();\\n    error MaximumEntriesReached();\\n    error NotAContract();\\n    error PrizeAlreadyClaimed();\\n\\n    /**\\n     * @notice Creates a new raffle.\\n     * @param params The parameters of the raffle.\\n     * @return raffleId The id of the newly created raffle.\\n     */\\n    function createRaffle(CreateRaffleCalldata calldata params) external returns (uint256 raffleId);\\n\\n    /**\\n     * @notice Deposits prizes for a raffle.\\n     * @param raffleId The id of the raffle.\\n     */\\n    function depositPrizes(uint256 raffleId) external payable;\\n\\n    /**\\n     * @notice Enters a raffle or multiple raffles.\\n     * @param entries The entries to be made.\\n     */\\n    function enterRaffles(EntryCalldata[] calldata entries) external payable;\\n\\n    /**\\n     * @notice Select the winners for a raffle based on the random words returned by Chainlink.\\n     * @param requestId The request id returned by Chainlink.\\n     */\\n    function selectWinners(uint256 requestId) external;\\n\\n    /**\\n     * @notice Claims the prizes for a winner. A winner can claim multiple prizes\\n     *         from multiple raffles in a single transaction.\\n     * @param claimPrizesCalldata The calldata for claiming prizes.\\n     */\\n    function claimPrizes(ClaimPrizesCalldata[] calldata claimPrizesCalldata) external;\\n\\n    /**\\n     * @notice Claims the fees collected for a raffle.\\n     * @param raffleId The id of the raffle.\\n     */\\n    function claimFees(uint256 raffleId) external;\\n\\n    /**\\n     * @notice Sets the protocol fee recipient. Only callable by contract owner.\\n     * @param protocolFeeRecipient The protocol fee recipient.\\n     */\\n    function setFeeRecipient(address protocolFeeRecipient) external;\\n\\n    /**\\n     * @notice This function allows the owner to update currency statuses.\\n     * @param currencies Currency addresses (address(0) for ETH)\\n     * @param isAllowed Whether the currencies should be allowed for trading\\n     * @dev Only callable by owner.\\n     */\\n    function updateCurrenciesStatus(address[] calldata currencies, bool isAllowed) external;\\n\\n    /**\\n     * @notice Gets the winners for a raffle.\\n     * @param raffleId The id of the raffle.\\n     * @return winners The winners of the raffle.\\n     */\\n    function getWinners(uint256 raffleId) external view returns (Winner[] memory);\\n\\n    /**\\n     * @notice Gets the pricing options for a raffle.\\n     * @param raffleId The id of the raffle.\\n     * @return pricingOptions The pricing options for the raffle.\\n     */\\n    function getPricingOptions(uint256 raffleId) external view returns (PricingOption[5] memory);\\n\\n    /**\\n     * @notice Gets the prizes for a raffle.\\n     * @param raffleId The id of the raffle.\\n     * @return prizes The prizes to be distributed.\\n     */\\n    function getPrizes(uint256 raffleId) external view returns (Prize[] memory);\\n\\n    /**\\n     * @notice Gets the entries for a raffle.\\n     * @param raffleId The id of the raffle.\\n     * @return entries The entries entered for the raffle.\\n     */\\n    function getEntries(uint256 raffleId) external view returns (Entry[] memory);\\n}\\n\",\"keccak256\":\"0x57d515e17e457c77ef52e11b932b1fd7ddff23f2d148db4cdb4c973dfe3dd007\",\"license\":\"MIT\"},\"contracts/interfaces/generic/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IERC20 {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x00de5900712b4cf6d4eb739d325f83aec5a357b25571aaae440aad43eb1e4f05\",\"license\":\"MIT\"},\"contracts/interfaces/generic/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IERC721 {\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x806cc2571b8858cfd077a235304798306763d547223f838a300e12037bec7c73\",\"license\":\"MIT\"},\"contracts/libraries/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n *      Modified from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Arrays.sol\\n */\\nlibrary Arrays {\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] memory array, uint256 element) internal pure returns (uint256) {\\n        if (array.length == 0) {\\n            return 0;\\n        }\\n\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds down (it does integer division with truncation).\\n            if (array[mid] > element) {\\n                high = mid;\\n            } else {\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && array[low - 1] == element) {\\n            unchecked {\\n                return low - 1;\\n            }\\n        } else {\\n            return low;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa14fe4dbe819f18a45cf2fe450e751de97d14ab10f166fecd49832ea6dc21999\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620034b5380380620034b58339810160408190526200003491620001d9565b6200003f33620000f0565b600180556001600160a01b0382166200009e5760405162461bcd60e51b815260206004820152601b60248201527f5a65726f205553445420496e7465726661636520416464726573730000000000604482015260640160405180910390fd5b6001600160a01b038116620000be57620000b83362000140565b620000c9565b620000c98162000140565b50600280546001600160a01b0319166001600160a01b039290921691909117905562000211565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381166200016857604051630ed1b8b360e31b815260040160405180910390fd5b600780546001600160a01b0319166001600160a01b0383169081179091556040519081527f7a7b5a0a132f9e0581eb8527f66eae9ee89c2a3e79d4ac7e41a1f1f4d48a7fc29060200160405180910390a150565b80516001600160a01b0381168114620001d457600080fd5b919050565b60008060408385031215620001ed57600080fd5b620001f883620001bc565b91506200020860208401620001bc565b90509250929050565b61329480620002216000396000f3fe6080604052600436106101d85760003560e01c806382d6848c11610102578063cfc242f611610095578063e74b981b11610064578063e74b981b1461064b578063f2fde38b1461066b578063f42df1321461068b578063f597573f1461069e57600080fd5b8063cfc242f6146105d3578063d3549ebd146105e9578063db4f160b14610616578063dbdff2c11461063657600080fd5b8063ac68a748116100d1578063ac68a74814610551578063ba23ec8e14610571578063c46e63f414610586578063cc307795146105a657600080fd5b806382d6848c146104775780638da5cb5b1461048a57806395fa9135146104a8578063a17be154146104c857600080fd5b80635708b5021161017a578063689869121161014957806368986912146104005780636b1426a4146104155780636f30d7b514610442578063715018a61461046257600080fd5b80635708b502146102fc5780635a195d19146103125780635d4bc0ce1461035257806365d697f7146103eb57600080fd5b80633b6cb153116101b65780633b6cb153146102555780633c051a921461028057806346904840146102ae5780634d2c53cd146102e657600080fd5b80631e9f1a82146101dd57806331fe74a9146101ff57806339a2eb2a14610235575b600080fd5b3480156101e957600080fd5b506101fd6101f836600461292d565b6106be565b005b34801561020b57600080fd5b5061021f61021a366004612984565b61077a565b60405161022c919061299d565b60405180910390f35b34801561024157600080fd5b506101fd610250366004612984565b6107fa565b34801561026157600080fd5b5061026a60fa81565b60405164ffffffffff909116815260200161022c565b34801561028c57600080fd5b506102a061029b3660046129eb565b610bf4565b60405190815260200161022c565b3480156102ba57600080fd5b506007546102ce906001600160a01b031681565b6040516001600160a01b03909116815260200161022c565b3480156102f257600080fd5b506102a060035481565b34801561030857600080fd5b506102a061271081565b34801561031e57600080fd5b5061034261032d366004612a24565b60066020526000908152604090205460ff1681565b604051901515815260200161022c565b34801561035e57600080fd5b506103d861036d366004612984565b600460205260009081526040902080546001909101546001600160a01b0382169160ff600160a01b8204811692600160a81b83049091169164ffffffffff600160b01b8204811692600160d81b909204811691908116906001600160d01b03600160281b9091041687565b60405161022c9796959493929190612a69565b3480156103f757600080fd5b506102a0601481565b34801561040c57600080fd5b506102a0600581565b34801561042157600080fd5b50610435610430366004612984565b610c3f565b60405161022c9190612ac2565b34801561044e57600080fd5b506101fd61045d366004612b3b565b610ce6565b34801561046e57600080fd5b506101fd610d47565b6101fd610485366004612984565b610d5b565b34801561049657600080fd5b506000546001600160a01b03166102ce565b3480156104b457600080fd5b506102a06104c3366004612984565b610eaf565b3480156104d457600080fd5b506105246104e3366004612b7d565b60056020908152600092835260408084209091529082529020546001600160d01b03811690600160d01b810464ffffffffff1690600160f81b900460ff1683565b604080516001600160d01b03909416845264ffffffffff909216602084015215159082015260600161022c565b34801561055d57600080fd5b506101fd61056c366004612984565b610eeb565b34801561057d57600080fd5b506102a0611242565b34801561059257600080fd5b506102a06105a1366004612984565b61125f565b3480156105b257600080fd5b506105c66105c1366004612984565b611274565b60405161022c9190612ba9565b3480156105df57600080fd5b5061026a61138881565b3480156105f557600080fd5b50610609610604366004612984565b611373565b60405161022c9190612c44565b34801561062257600080fd5b506102a0610631366004612c96565b6113f8565b34801561064257600080fd5b506102a06116c3565b34801561065757600080fd5b506101fd610666366004612a24565b6116d2565b34801561067757600080fd5b506101fd610686366004612a24565b6116e3565b6101fd610699366004612cd9565b611759565b3480156106aa57600080fd5b506002546102ce906001600160a01b031681565b6106c6611c54565b8160005b818110156107385782600660008787858181106106e9576106e9612d4e565b90506020020160208101906106fe9190612a24565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558061073081612d7a565b9150506106ca565b507fcb2fef16ee9f3ea43e174daf88ffcdc8beee4ad884c7570093d998d71058698784848460405161076c93929190612d93565b60405180910390a150505050565b61078261289a565b600082815260046020526040808220815160a081019092529091600290910190600590835b828210156107ef57604080518082019091528483015464ffffffffff81168252600160281b90046001600160d01b0316602080830191909152908252600190920191016107a7565b505050509050919050565b6000818152600460205260409020610813816003611cae565b80546001600160a01b031633811461083f5761083f61083a6000546001600160a01b031690565b611cfb565b600782018054600082610853600184612dea565b8154811061086357610863612d4e565b906000526020600020906003020160000160059054906101000a900464ffffffffff1664ffffffffff169050600085600801805480602002602001604051908101604052809291908181526020016000905b82821015610902576000848152602090819020604080518082019091529084015464ffffffffff81168252600160281b90046001600160a01b0316818301528252600190920191016108b5565b505082519293506000915083905061091b600184612dea565b8151811061092b5761092b612d4e565b60200260200101516000015164ffffffffff16905060008267ffffffffffffffff81111561095b5761095b612dfd565b604051908082528060200260200182016040528015610984578160200160208202803683370190505b50905060005b838110156109e6578481815181106109a4576109a4612d4e565b60200260200101516000015164ffffffffff168282815181106109c9576109c9612d4e565b6020908102919091010152806109de81612d7a565b91505061098a565b5060008667ffffffffffffffff811115610a0257610a02612dfd565b604051908082528060200260200182016040528015610a2b578160200160208202803683370190505b50905060005b87811015610aa457888181548110610a4b57610a4b612d4e565b906000526020600020906003020160000160059054906101000a900464ffffffffff1664ffffffffff16828281518110610a8757610a87612d4e565b602090810291909101015280610a9c81612d7a565b915050610a31565b5060005b86811015610bda576000610abd600086610bf4565b90508b600901604051806080016040528089610ae28589611d2490919063ffffffff16565b81518110610af257610af2612d4e565b6020026020010151602001516001600160a01b03168152602001600015158152602001610b2a610b23866001611dd4565b8790611d24565b60ff908116825264ffffffffff9485166020928301528354600181018555600094855293829020835194018054928401516040850151606090950151909616600160b01b0264ffffffffff60b01b1994909216600160a81b029390931665ffffffffffff60a81b19951515600160a01b026001600160a81b03199093166001600160a01b039095169490941791909117939093169190911791909117905580610bd281612d7a565b915050610aa8565b50610be78a8c6004611de0565b5050505050505050505050565b60008183610c006116c3565b17604051602001610c1391815260200190565b6040516020818303038152906040528051906020012060001c610c369190612e29565b90505b92915050565b606060046000838152602001908152602001600020600901805480602002602001604051908101604052809291908181526020016000905b828210156107ef57600084815260209081902060408051608081018252918501546001600160a01b038116835260ff600160a01b82048116151584860152600160a81b8204169183019190915264ffffffffff600160b01b909104166060820152825260019092019101610c77565b610cee611e47565b8060005b81811015610d3857610d26848483818110610d0f57610d0f612d4e565b9050602002810190610d219190612e3d565b611ea0565b80610d3081612d7a565b915050610cf2565b5050610d4360018055565b5050565b610d4f611c54565b610d596000612056565b565b610d63611e47565b6000818152600460205260409020610d7c816001611cae565b8054610d90906001600160a01b0316611cfb565b60078101805460005b81811015610e93576000838281548110610db557610db5612d4e565b600091825260208220600390910201805490925060ff600160501b9091041690816001811115610de757610de7612a3f565b03610e165781546001830154610e1191600160601b90046001600160a01b031690339030906120a6565b610e7e565b6001816001811115610e2a57610e2a612a3f565b03610e655781546002830154610e11916001600160a01b03600160601b8204169133913091610e609164ffffffffff1690612e5d565b612192565b604051632f89717760e11b815260040160405180910390fd5b50508080610e8b90612d7a565b915050610d99565b50610ea083856002611de0565b505050610eac60018055565b50565b600081610eba6116c3565b17604051602001610ecd91815260200190565b60408051601f19818403018152919052805160209091012092915050565b610ef3611e47565b600081815260046020819052604090912090610f10908290611cae565b80546001600160a01b0316338114610f3757610f3761083a6000546001600160a01b031690565b600082600801805480602002602001604051908101604052809291908181526020016000905b82821015610faa576000848152602090819020604080518082019091529084015464ffffffffff81168252600160281b90046001600160a01b031681830152825260019092019101610f5d565b5050825192935060009150839050610fc3600184612dea565b81518110610fd357610fd3612d4e565b602090810291909101015151600186015464ffffffffff9091169150600160281b90046001600160d01b0316600061100d83611388612e5d565b60025460405163095ea7b360e01b8152306004820152602481018590529192506001600160a01b03169063095ea7b3906044016020604051808303816000875af115801561105f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110839190612e74565b6110ca5760405162461bcd60e51b81526020600482015260136024820152721554d11508185c1c1c9bdd994819985a5b1959606a1b60448201526064015b60405180910390fd5b6110d48183612dea565b6002546007546040516323b872dd60e01b81529294506001600160a01b03918216926323b872dd9261110f9230929116908690600401612e91565b6020604051808303816000875af115801561112e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111529190612e74565b506002546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061118790309033908790600401612e91565b6020604051808303816000875af11580156111a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ca9190612e74565b5060018701805465010000000000600160f81b03191690556111ee87896005611de0565b7fa1f87f32d0f17fab0242ca800d736293de8988c14b27747e218cf13d5c249f538861121a8484612eb5565b6040805192835260208301919091520160405180910390a150505050505050610eac60018055565b60405160009080602081848060185afa61125857fe5b5051919050565b60008161126a6116c3565b610c399190612e29565b606060046000838152602001908152602001600020600701805480602002602001604051908101604052809291908181526020016000905b828210156107ef5760008481526020908190206040805160e08101825260038602909201805464ffffffffff8082168552600160281b82041694840194909452919290830190600160501b900460ff16600181111561130d5761130d612a3f565b600181111561131e5761131e612a3f565b81528154600160581b810460ff16602080840191909152600160601b9091046001600160a01b0316604083015260018084015460608401526002909301546080909201919091529183529290920191016112ac565b606060046000838152602001908152602001600020600801805480602002602001604051908101604052809291908181526020016000905b828210156107ef576000848152602090819020604080518082019091529084015464ffffffffff81168252600160281b90046001600160a01b0316818301528252600190920191016113ab565b6000806114086060840184612ec8565b9150508015806114185750601481115b156114365760405163ab13062d60e01b815260040160405180910390fd5b60008281526004602052604081209080805b848110156115cb57600061145f6060890189612ec8565b8381811061146f5761146f612d4e565b905060e002018036038101906114859190612f37565b90508260ff16816060015160ff1610156114b257604051632f89717760e11b815260040160405180910390fd5b6114bb81612374565b80516114c79085612ff0565b64ffffffffff8082166020808501918252606085015160078a018054600181810183556000928352939091208751600390920201805494518616600160281b0269ffffffffffffffffffff199095169190951617929092178084556040860151949850919650849391839160ff60501b1990911690600160501b90849081111561155357611553612a3f565b02179055506060820151815460808401516001600160a01b0316600160601b026bffffffffffffffffffffffff60ff909316600160581b02929092166affffffffffffffffffffff9091161717815560a0820151600182015560c09091015160029091015550806115c381612d7a565b915050611448565b5060006115de6040880160208901613015565b90508064ffffffffff168364ffffffffff161180611603575060fa64ffffffffff8416115b50611611868860800161245b565b83546001600160a01b0319163317845561162e6020880188613030565b8454600165ffffffffff0160a81b0316600160a81b911515919091026001600160d81b031617600160d81b64ffffffffff8316021784556116756060880160408901613015565b8460010160006101000a81548164ffffffffff021916908364ffffffffff1602179055506116a584876001611de0565b6003546116b3906001612eb5565b6003819055979650505050505050565b60006116cd611242565b919050565b6116da611c54565b610eac81612649565b6116eb611c54565b6001600160a01b0381166117505760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016110c1565b610eac81612056565b611761611e47565b600254604051636eb1769f60e11b8152336004820152306024820152829160009182916001600160a01b03169063dd62ed3e90604401602060405180830381865afa1580156117b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d8919061304d565b905060005b83811015611bc357368686838181106117f8576117f8612d4e565b90506040020190506005816020013510611825576040516363df817160e01b815260040160405180910390fd5b80356000818152600460205260409020611840816002611cae565b60008160020184602001356005811061185b5761185b612d4e565b604080518082018252919092015464ffffffffff808216808452600160281b9092046001600160d01b0316602080850191909152600088815260058252858120338252909152938420549294506118b992600160d01b900416612ff0565b600184015490915064ffffffffff90811690821611156118ec5760405163d085f16160e01b815260040160405180910390fd5b60008481526005602090815260408083203384528252909120805464ffffffffff60d01b1916600160d01b64ffffffffff851602179055820151611930818a61305f565b985087896001600160d01b03161115611985576040805180820182526014815273696e73756666696369656e742062616c616e636560601b6020820152905162461bcd60e51b81526110c191906004016130a3565b60088401546000908082036119af5784516119a89064ffffffffff1660016126c4565b91506119f0565b8451600887016119c08360016126c4565b815481106119d0576119d0612d4e565b6000918252602090912001546119ed919064ffffffffff16612ff0565b91505b8554600160a81b900460ff1615611a3457855464ffffffffff600160d81b909104811690831610611a34576040516334b3fb3b60e01b815260040160405180910390fd5b6040805180820190915264ffffffffff838116825233602080840191825260088a018054600180820183556000928352929091209451940180549251949093166001600160c81b031990921691909117600160281b6001600160a01b03909416840217909155870180548592600591611ab8918591046001600160d01b031661305f565b82546101009290920a6001600160d01b038181021990931691831602179091556000898152600560209081526040808320338452909152812080548794509092611b049185911661305f565b82546101009290920a6001600160d01b038181021990931691831602179091558651604080518b815233602082015264ffffffffff9092169082015290851660608201527fc25cd4cec0cbfb9bc40ad8f59ac733efcddf6ed3b7519369c9b9ceb2ee784601915060800160405180910390a18554611b9190600160d81b900464ffffffffff1660016126c4565b8264ffffffffff1610611ba857611ba887876126d0565b50505050505050508080611bbb90612d7a565b9150506117dd565b506002546040516323b872dd60e01b81523360048201523060248201526001600160d01b03841660448201526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015611c23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c479190612e74565b50505050610d4360018055565b6000546001600160a01b03163314610d595760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016110c1565b806005811115611cc057611cc0612a3f565b8254600160a01b900460ff166005811115611cdd57611cdd612a3f565b14610d43576040516307a92f1960e51b815260040160405180910390fd5b336001600160a01b03821614610eac576040516348f5c3ed60e01b815260040160405180910390fd5b60008251600003611d3757506000610c39565b82516000905b80821015611d89576000611d5183836126fd565b905084868281518110611d6657611d66612d4e565b60200260200101511115611d7c57809150611d83565b8060010192505b50611d3d565b600082118015611dbb57508385611da1600185612dea565b81518110611db157611db1612d4e565b6020026020010151145b15611dcc5750600019019050610c39565b509050610c39565b6000610c368284612eb5565b82548190849060ff60a01b1916600160a01b836005811115611e0457611e04612a3f565b02179055507fc1191e7178b58ad510709587719f39ec315fa79e81ee7ba5c5ef3c894e94a6518282604051611e3a9291906130d6565b60405180910390a1505050565b600260015403611e995760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016110c1565b6002600155565b8035600081815260046020819052604090912080549091600160a01b90910460ff1690816005811115611ed557611ed5612a3f565b14611ee557611ee5826005611cae565b60098201366000611ef960208801886130ea565b845491935091508160005b8181101561200f576000858583818110611f2057611f20612d4e565b905060200201359050838110611f49576040516363df817160e01b815260040160405180910390fd5b6000878281548110611f5d57611f5d612d4e565b60009182526020909120018054909150600160a01b900460ff1615611f955760405163611ab18960e11b815260040160405180910390fd5b8054611fa9906001600160a01b0316611cfb565b805460ff60a01b1916600160a01b1780825560078b018054600092600160a81b900460ff16908110611fdd57611fdd612d4e565b90600052602060002090600302019050611ff981336001612718565b505050808061200790612d7a565b915050611f04565b507f0d0ab4a45afc0276ae825be9eeb4552011b19aad5c92b4bb782f3ca0356fedc588858560405161204393929190613134565b60405180910390a1505050505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b836001600160a01b03163b6000036120d1576040516309ee12d560e01b815260040160405180910390fd5b6000846001600160a01b03168484846040516024016120f293929190612e91565b60408051601f198184030181529181526020820180516001600160e01b03166323b872dd60e01b179052516121279190613175565b6000604051808303816000865af19150503d8060008114612164576040519150601f19603f3d011682016040523d82523d6000602084013e612169565b606091505b505090508061218b57604051631c1eb8a160e31b815260040160405180910390fd5b5050505050565b836001600160a01b03163b6000036121bd576040516309ee12d560e01b815260040160405180910390fd5b6040516370a0823160e01b81526001600160a01b038481166004830152600091908616906370a0823190602401602060405180830381865afa158015612207573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222b919061304d565b905080821115612277576040805180820182526014815273696e73756666696369656e742062616c616e636560601b6020820152905162461bcd60e51b81526110c191906004016130a3565b600080866001600160a01b031686868660405160240161229993929190612e91565b60408051601f198184030181529181526020820180516001600160e01b03166323b872dd60e01b179052516122ce9190613175565b6000604051808303816000865af19150503d806000811461230b576040519150601f19603f3d011682016040523d82523d6000602084013e612310565b606091505b5091509150816123335760405163e560521360e01b815260040160405180910390fd5b80511561236b578080602001905181019061234e9190612e74565b61236b5760405163e560521360e01b815260040160405180910390fd5b50505050505050565b60008160400151600181111561238c5761238c612a3f565b036123cf578060c0015160011415806123b15750806000015164ffffffffff16600114155b15610eac57604051632f89717760e11b815260040160405180910390fd5b6001816040015160018111156123e7576123e7612a3f565b036124295760808101516001600160a01b031660009081526006602052604090205460ff1661242957604051631eb3268560e31b815260040160405180910390fd5b60c081015115806123b15750805164ffffffffff16610eac57604051632f89717760e11b815260040160405180910390fd5b60005b600581101561264457600082826005811061247b5761247b612d4e565b6040020180360381019061248f9190613187565b805160208201519192509060008490036124e3578164ffffffffff1660011415806124c157506001600160d01b038116155b156124de57604051625cba9760e51b815260040160405180910390fd5b6125cf565b6000856124f18660016126c4565b6005811061250157612501612d4e565b604002018036038101906125159190613187565b602081015181519192509061253164ffffffffff8616856131fe565b6001600160d01b031615158061255557508064ffffffffff168564ffffffffff1611155b806125725750816001600160d01b0316846001600160d01b031611155b806125ae575061258964ffffffffff821683613224565b6001600160d01b03166125a364ffffffffff871686613224565b6001600160d01b0316115b156125cb57604051625cba9760e51b815260040160405180910390fd5b5050505b6000868152600460205260409020839060020185600581106125f3576125f3612d4e565b8251910180546020909301516001600160d01b0316600160281b026001600160f81b031990931664ffffffffff909216919091179190911790555082915061263c905081612d7a565b91505061245e565b505050565b6001600160a01b03811661267057604051630ed1b8b360e31b815260040160405180910390fd5b600780546001600160a01b0319166001600160a01b0383169081179091556040519081527f7a7b5a0a132f9e0581eb8527f66eae9ee89c2a3e79d4ac7e41a1f1f4d48a7fc29060200160405180910390a150565b6000610c368284612dea565b6126dc81836003611de0565b805464ffffffffff60b01b1916600160b01b4264ffffffffff160217905550565b600061270c600284841861324a565b610c3690848416612eb5565b8254600160501b810460ff1690600160601b90046001600160a01b0316600082600181111561274957612749612a3f565b036127635761275e81308688600101546120a6565b61218b565b61218b81858588600201546127789190612e5d565b826001600160a01b03163b6000036127a3576040516309ee12d560e01b815260040160405180910390fd5b6040516001600160a01b03838116602483015260448201839052600091829186169060640160408051601f198184030181529181526020820180516001600160e01b031663a9059cbb60e01b179052516127fd9190613175565b6000604051808303816000865af19150503d806000811461283a576040519150601f19603f3d011682016040523d82523d6000602084013e61283f565b606091505b5091509150816128625760405163f1568f9560e01b815260040160405180910390fd5b80511561218b578080602001905181019061287d9190612e74565b61218b5760405163f1568f9560e01b815260040160405180910390fd5b6040518060a001604052806005905b60408051808201909152600080825260208201528152602001906001900390816128a95790505090565b60008083601f8401126128e557600080fd5b50813567ffffffffffffffff8111156128fd57600080fd5b6020830191508360208260051b850101111561291857600080fd5b9250929050565b8015158114610eac57600080fd5b60008060006040848603121561294257600080fd5b833567ffffffffffffffff81111561295957600080fd5b612965868287016128d3565b90945092505060208401356129798161291f565b809150509250925092565b60006020828403121561299657600080fd5b5035919050565b6101408101818360005b60058110156129e2578151805164ffffffffff1684526020908101516001600160d01b031681850152604090930192909101906001016129a7565b50505092915050565b600080604083850312156129fe57600080fd5b50508035926020909101359150565b80356001600160a01b03811681146116cd57600080fd5b600060208284031215612a3657600080fd5b610c3682612a0d565b634e487b7160e01b600052602160045260246000fd5b60068110612a6557612a65612a3f565b9052565b6001600160a01b038816815260e08101612a866020830189612a55565b951515604082015264ffffffffff94851660608201529284166080840152921660a08201526001600160d01b0390911660c09091015292915050565b602080825282518282018190526000919060409081850190868401855b82811015612b2e57815180516001600160a01b03168552868101511515878601528581015160ff168686015260609081015164ffffffffff169085015260809093019290850190600101612adf565b5091979650505050505050565b60008060208385031215612b4e57600080fd5b823567ffffffffffffffff811115612b6557600080fd5b612b71858286016128d3565b90969095509350505050565b60008060408385031215612b9057600080fd5b82359150612ba060208401612a0d565b90509250929050565b602080825282518282018190526000919060409081850190868401855b82811015612b2e578151805164ffffffffff90811686528782015116878601528581015160028110612bfa57612bfa612a3f565b8587015260608181015160ff16908601526080808201516001600160a01b03169086015260a0808201519086015260c0908101519085015260e09093019290850190600101612bc6565b602080825282518282018190526000919060409081850190868401855b82811015612b2e578151805164ffffffffff1685528601516001600160a01b0316868501529284019290850190600101612c61565b600060208284031215612ca857600080fd5b813567ffffffffffffffff811115612cbf57600080fd5b82016101c08185031215612cd257600080fd5b9392505050565b60008060208385031215612cec57600080fd5b823567ffffffffffffffff80821115612d0457600080fd5b818501915085601f830112612d1857600080fd5b813581811115612d2757600080fd5b8660208260061b8501011115612d3c57600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612d8c57612d8c612d64565b5060010190565b6040808252810183905260008460608301825b86811015612dd4576001600160a01b03612dbf84612a0d565b16825260209283019290910190600101612da6565b5080925050508215156020830152949350505050565b81810381811115610c3957610c39612d64565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b600082612e3857612e38612e13565b500690565b60008235603e19833603018112612e5357600080fd5b9190910192915050565b8082028115828204841417610c3957610c39612d64565b600060208284031215612e8657600080fd5b8151612cd28161291f565b6001600160a01b039384168152919092166020820152604081019190915260600190565b80820180821115610c3957610c39612d64565b6000808335601e19843603018112612edf57600080fd5b83018035915067ffffffffffffffff821115612efa57600080fd5b602001915060e08102360382131561291857600080fd5b803564ffffffffff811681146116cd57600080fd5b803560ff811681146116cd57600080fd5b600060e08284031215612f4957600080fd5b60405160e0810181811067ffffffffffffffff82111715612f7a57634e487b7160e01b600052604160045260246000fd5b604052612f8683612f11565b8152612f9460208401612f11565b6020820152604083013560028110612fab57600080fd5b6040820152612fbc60608401612f26565b6060820152612fcd60808401612a0d565b608082015260a083013560a082015260c083013560c08201528091505092915050565b64ffffffffff81811683821601908082111561300e5761300e612d64565b5092915050565b60006020828403121561302757600080fd5b610c3682612f11565b60006020828403121561304257600080fd5b8135612cd28161291f565b60006020828403121561125857600080fd5b6001600160d01b0381811683821601908082111561300e5761300e612d64565b60005b8381101561309a578181015183820152602001613082565b50506000910152565b60208152600082518060208401526130c281604085016020870161307f565b601f01601f19169190910160400192915050565b82815260408101612cd26020830184612a55565b6000808335601e1984360301811261310157600080fd5b83018035915067ffffffffffffffff82111561311c57600080fd5b6020019150600581901b360382131561291857600080fd5b838152604060208201819052810182905260006001600160fb1b0383111561315b57600080fd5b8260051b8085606085013791909101606001949350505050565b60008251612e5381846020870161307f565b60006040828403121561319957600080fd5b6040516040810181811067ffffffffffffffff821117156131ca57634e487b7160e01b600052604160045260246000fd5b6040526131d683612f11565b815260208301356001600160d01b03811681146131f257600080fd5b60208201529392505050565b60006001600160d01b038381168061321857613218612e13565b92169190910692915050565b60006001600160d01b038381168061323e5761323e612e13565b92169190910492915050565b60008261325957613259612e13565b50049056fea2646970667358221220c5878210c79db0170ae37a0826f03cdb2ed083f28652c746a0f966faa645e5f664736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106101d85760003560e01c806382d6848c11610102578063cfc242f611610095578063e74b981b11610064578063e74b981b1461064b578063f2fde38b1461066b578063f42df1321461068b578063f597573f1461069e57600080fd5b8063cfc242f6146105d3578063d3549ebd146105e9578063db4f160b14610616578063dbdff2c11461063657600080fd5b8063ac68a748116100d1578063ac68a74814610551578063ba23ec8e14610571578063c46e63f414610586578063cc307795146105a657600080fd5b806382d6848c146104775780638da5cb5b1461048a57806395fa9135146104a8578063a17be154146104c857600080fd5b80635708b5021161017a578063689869121161014957806368986912146104005780636b1426a4146104155780636f30d7b514610442578063715018a61461046257600080fd5b80635708b502146102fc5780635a195d19146103125780635d4bc0ce1461035257806365d697f7146103eb57600080fd5b80633b6cb153116101b65780633b6cb153146102555780633c051a921461028057806346904840146102ae5780634d2c53cd146102e657600080fd5b80631e9f1a82146101dd57806331fe74a9146101ff57806339a2eb2a14610235575b600080fd5b3480156101e957600080fd5b506101fd6101f836600461292d565b6106be565b005b34801561020b57600080fd5b5061021f61021a366004612984565b61077a565b60405161022c919061299d565b60405180910390f35b34801561024157600080fd5b506101fd610250366004612984565b6107fa565b34801561026157600080fd5b5061026a60fa81565b60405164ffffffffff909116815260200161022c565b34801561028c57600080fd5b506102a061029b3660046129eb565b610bf4565b60405190815260200161022c565b3480156102ba57600080fd5b506007546102ce906001600160a01b031681565b6040516001600160a01b03909116815260200161022c565b3480156102f257600080fd5b506102a060035481565b34801561030857600080fd5b506102a061271081565b34801561031e57600080fd5b5061034261032d366004612a24565b60066020526000908152604090205460ff1681565b604051901515815260200161022c565b34801561035e57600080fd5b506103d861036d366004612984565b600460205260009081526040902080546001909101546001600160a01b0382169160ff600160a01b8204811692600160a81b83049091169164ffffffffff600160b01b8204811692600160d81b909204811691908116906001600160d01b03600160281b9091041687565b60405161022c9796959493929190612a69565b3480156103f757600080fd5b506102a0601481565b34801561040c57600080fd5b506102a0600581565b34801561042157600080fd5b50610435610430366004612984565b610c3f565b60405161022c9190612ac2565b34801561044e57600080fd5b506101fd61045d366004612b3b565b610ce6565b34801561046e57600080fd5b506101fd610d47565b6101fd610485366004612984565b610d5b565b34801561049657600080fd5b506000546001600160a01b03166102ce565b3480156104b457600080fd5b506102a06104c3366004612984565b610eaf565b3480156104d457600080fd5b506105246104e3366004612b7d565b60056020908152600092835260408084209091529082529020546001600160d01b03811690600160d01b810464ffffffffff1690600160f81b900460ff1683565b604080516001600160d01b03909416845264ffffffffff909216602084015215159082015260600161022c565b34801561055d57600080fd5b506101fd61056c366004612984565b610eeb565b34801561057d57600080fd5b506102a0611242565b34801561059257600080fd5b506102a06105a1366004612984565b61125f565b3480156105b257600080fd5b506105c66105c1366004612984565b611274565b60405161022c9190612ba9565b3480156105df57600080fd5b5061026a61138881565b3480156105f557600080fd5b50610609610604366004612984565b611373565b60405161022c9190612c44565b34801561062257600080fd5b506102a0610631366004612c96565b6113f8565b34801561064257600080fd5b506102a06116c3565b34801561065757600080fd5b506101fd610666366004612a24565b6116d2565b34801561067757600080fd5b506101fd610686366004612a24565b6116e3565b6101fd610699366004612cd9565b611759565b3480156106aa57600080fd5b506002546102ce906001600160a01b031681565b6106c6611c54565b8160005b818110156107385782600660008787858181106106e9576106e9612d4e565b90506020020160208101906106fe9190612a24565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558061073081612d7a565b9150506106ca565b507fcb2fef16ee9f3ea43e174daf88ffcdc8beee4ad884c7570093d998d71058698784848460405161076c93929190612d93565b60405180910390a150505050565b61078261289a565b600082815260046020526040808220815160a081019092529091600290910190600590835b828210156107ef57604080518082019091528483015464ffffffffff81168252600160281b90046001600160d01b0316602080830191909152908252600190920191016107a7565b505050509050919050565b6000818152600460205260409020610813816003611cae565b80546001600160a01b031633811461083f5761083f61083a6000546001600160a01b031690565b611cfb565b600782018054600082610853600184612dea565b8154811061086357610863612d4e565b906000526020600020906003020160000160059054906101000a900464ffffffffff1664ffffffffff169050600085600801805480602002602001604051908101604052809291908181526020016000905b82821015610902576000848152602090819020604080518082019091529084015464ffffffffff81168252600160281b90046001600160a01b0316818301528252600190920191016108b5565b505082519293506000915083905061091b600184612dea565b8151811061092b5761092b612d4e565b60200260200101516000015164ffffffffff16905060008267ffffffffffffffff81111561095b5761095b612dfd565b604051908082528060200260200182016040528015610984578160200160208202803683370190505b50905060005b838110156109e6578481815181106109a4576109a4612d4e565b60200260200101516000015164ffffffffff168282815181106109c9576109c9612d4e565b6020908102919091010152806109de81612d7a565b91505061098a565b5060008667ffffffffffffffff811115610a0257610a02612dfd565b604051908082528060200260200182016040528015610a2b578160200160208202803683370190505b50905060005b87811015610aa457888181548110610a4b57610a4b612d4e565b906000526020600020906003020160000160059054906101000a900464ffffffffff1664ffffffffff16828281518110610a8757610a87612d4e565b602090810291909101015280610a9c81612d7a565b915050610a31565b5060005b86811015610bda576000610abd600086610bf4565b90508b600901604051806080016040528089610ae28589611d2490919063ffffffff16565b81518110610af257610af2612d4e565b6020026020010151602001516001600160a01b03168152602001600015158152602001610b2a610b23866001611dd4565b8790611d24565b60ff908116825264ffffffffff9485166020928301528354600181018555600094855293829020835194018054928401516040850151606090950151909616600160b01b0264ffffffffff60b01b1994909216600160a81b029390931665ffffffffffff60a81b19951515600160a01b026001600160a81b03199093166001600160a01b039095169490941791909117939093169190911791909117905580610bd281612d7a565b915050610aa8565b50610be78a8c6004611de0565b5050505050505050505050565b60008183610c006116c3565b17604051602001610c1391815260200190565b6040516020818303038152906040528051906020012060001c610c369190612e29565b90505b92915050565b606060046000838152602001908152602001600020600901805480602002602001604051908101604052809291908181526020016000905b828210156107ef57600084815260209081902060408051608081018252918501546001600160a01b038116835260ff600160a01b82048116151584860152600160a81b8204169183019190915264ffffffffff600160b01b909104166060820152825260019092019101610c77565b610cee611e47565b8060005b81811015610d3857610d26848483818110610d0f57610d0f612d4e565b9050602002810190610d219190612e3d565b611ea0565b80610d3081612d7a565b915050610cf2565b5050610d4360018055565b5050565b610d4f611c54565b610d596000612056565b565b610d63611e47565b6000818152600460205260409020610d7c816001611cae565b8054610d90906001600160a01b0316611cfb565b60078101805460005b81811015610e93576000838281548110610db557610db5612d4e565b600091825260208220600390910201805490925060ff600160501b9091041690816001811115610de757610de7612a3f565b03610e165781546001830154610e1191600160601b90046001600160a01b031690339030906120a6565b610e7e565b6001816001811115610e2a57610e2a612a3f565b03610e655781546002830154610e11916001600160a01b03600160601b8204169133913091610e609164ffffffffff1690612e5d565b612192565b604051632f89717760e11b815260040160405180910390fd5b50508080610e8b90612d7a565b915050610d99565b50610ea083856002611de0565b505050610eac60018055565b50565b600081610eba6116c3565b17604051602001610ecd91815260200190565b60408051601f19818403018152919052805160209091012092915050565b610ef3611e47565b600081815260046020819052604090912090610f10908290611cae565b80546001600160a01b0316338114610f3757610f3761083a6000546001600160a01b031690565b600082600801805480602002602001604051908101604052809291908181526020016000905b82821015610faa576000848152602090819020604080518082019091529084015464ffffffffff81168252600160281b90046001600160a01b031681830152825260019092019101610f5d565b5050825192935060009150839050610fc3600184612dea565b81518110610fd357610fd3612d4e565b602090810291909101015151600186015464ffffffffff9091169150600160281b90046001600160d01b0316600061100d83611388612e5d565b60025460405163095ea7b360e01b8152306004820152602481018590529192506001600160a01b03169063095ea7b3906044016020604051808303816000875af115801561105f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110839190612e74565b6110ca5760405162461bcd60e51b81526020600482015260136024820152721554d11508185c1c1c9bdd994819985a5b1959606a1b60448201526064015b60405180910390fd5b6110d48183612dea565b6002546007546040516323b872dd60e01b81529294506001600160a01b03918216926323b872dd9261110f9230929116908690600401612e91565b6020604051808303816000875af115801561112e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111529190612e74565b506002546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061118790309033908790600401612e91565b6020604051808303816000875af11580156111a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ca9190612e74565b5060018701805465010000000000600160f81b03191690556111ee87896005611de0565b7fa1f87f32d0f17fab0242ca800d736293de8988c14b27747e218cf13d5c249f538861121a8484612eb5565b6040805192835260208301919091520160405180910390a150505050505050610eac60018055565b60405160009080602081848060185afa61125857fe5b5051919050565b60008161126a6116c3565b610c399190612e29565b606060046000838152602001908152602001600020600701805480602002602001604051908101604052809291908181526020016000905b828210156107ef5760008481526020908190206040805160e08101825260038602909201805464ffffffffff8082168552600160281b82041694840194909452919290830190600160501b900460ff16600181111561130d5761130d612a3f565b600181111561131e5761131e612a3f565b81528154600160581b810460ff16602080840191909152600160601b9091046001600160a01b0316604083015260018084015460608401526002909301546080909201919091529183529290920191016112ac565b606060046000838152602001908152602001600020600801805480602002602001604051908101604052809291908181526020016000905b828210156107ef576000848152602090819020604080518082019091529084015464ffffffffff81168252600160281b90046001600160a01b0316818301528252600190920191016113ab565b6000806114086060840184612ec8565b9150508015806114185750601481115b156114365760405163ab13062d60e01b815260040160405180910390fd5b60008281526004602052604081209080805b848110156115cb57600061145f6060890189612ec8565b8381811061146f5761146f612d4e565b905060e002018036038101906114859190612f37565b90508260ff16816060015160ff1610156114b257604051632f89717760e11b815260040160405180910390fd5b6114bb81612374565b80516114c79085612ff0565b64ffffffffff8082166020808501918252606085015160078a018054600181810183556000928352939091208751600390920201805494518616600160281b0269ffffffffffffffffffff199095169190951617929092178084556040860151949850919650849391839160ff60501b1990911690600160501b90849081111561155357611553612a3f565b02179055506060820151815460808401516001600160a01b0316600160601b026bffffffffffffffffffffffff60ff909316600160581b02929092166affffffffffffffffffffff9091161717815560a0820151600182015560c09091015160029091015550806115c381612d7a565b915050611448565b5060006115de6040880160208901613015565b90508064ffffffffff168364ffffffffff161180611603575060fa64ffffffffff8416115b50611611868860800161245b565b83546001600160a01b0319163317845561162e6020880188613030565b8454600165ffffffffff0160a81b0316600160a81b911515919091026001600160d81b031617600160d81b64ffffffffff8316021784556116756060880160408901613015565b8460010160006101000a81548164ffffffffff021916908364ffffffffff1602179055506116a584876001611de0565b6003546116b3906001612eb5565b6003819055979650505050505050565b60006116cd611242565b919050565b6116da611c54565b610eac81612649565b6116eb611c54565b6001600160a01b0381166117505760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016110c1565b610eac81612056565b611761611e47565b600254604051636eb1769f60e11b8152336004820152306024820152829160009182916001600160a01b03169063dd62ed3e90604401602060405180830381865afa1580156117b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d8919061304d565b905060005b83811015611bc357368686838181106117f8576117f8612d4e565b90506040020190506005816020013510611825576040516363df817160e01b815260040160405180910390fd5b80356000818152600460205260409020611840816002611cae565b60008160020184602001356005811061185b5761185b612d4e565b604080518082018252919092015464ffffffffff808216808452600160281b9092046001600160d01b0316602080850191909152600088815260058252858120338252909152938420549294506118b992600160d01b900416612ff0565b600184015490915064ffffffffff90811690821611156118ec5760405163d085f16160e01b815260040160405180910390fd5b60008481526005602090815260408083203384528252909120805464ffffffffff60d01b1916600160d01b64ffffffffff851602179055820151611930818a61305f565b985087896001600160d01b03161115611985576040805180820182526014815273696e73756666696369656e742062616c616e636560601b6020820152905162461bcd60e51b81526110c191906004016130a3565b60088401546000908082036119af5784516119a89064ffffffffff1660016126c4565b91506119f0565b8451600887016119c08360016126c4565b815481106119d0576119d0612d4e565b6000918252602090912001546119ed919064ffffffffff16612ff0565b91505b8554600160a81b900460ff1615611a3457855464ffffffffff600160d81b909104811690831610611a34576040516334b3fb3b60e01b815260040160405180910390fd5b6040805180820190915264ffffffffff838116825233602080840191825260088a018054600180820183556000928352929091209451940180549251949093166001600160c81b031990921691909117600160281b6001600160a01b03909416840217909155870180548592600591611ab8918591046001600160d01b031661305f565b82546101009290920a6001600160d01b038181021990931691831602179091556000898152600560209081526040808320338452909152812080548794509092611b049185911661305f565b82546101009290920a6001600160d01b038181021990931691831602179091558651604080518b815233602082015264ffffffffff9092169082015290851660608201527fc25cd4cec0cbfb9bc40ad8f59ac733efcddf6ed3b7519369c9b9ceb2ee784601915060800160405180910390a18554611b9190600160d81b900464ffffffffff1660016126c4565b8264ffffffffff1610611ba857611ba887876126d0565b50505050505050508080611bbb90612d7a565b9150506117dd565b506002546040516323b872dd60e01b81523360048201523060248201526001600160d01b03841660448201526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015611c23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c479190612e74565b50505050610d4360018055565b6000546001600160a01b03163314610d595760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016110c1565b806005811115611cc057611cc0612a3f565b8254600160a01b900460ff166005811115611cdd57611cdd612a3f565b14610d43576040516307a92f1960e51b815260040160405180910390fd5b336001600160a01b03821614610eac576040516348f5c3ed60e01b815260040160405180910390fd5b60008251600003611d3757506000610c39565b82516000905b80821015611d89576000611d5183836126fd565b905084868281518110611d6657611d66612d4e565b60200260200101511115611d7c57809150611d83565b8060010192505b50611d3d565b600082118015611dbb57508385611da1600185612dea565b81518110611db157611db1612d4e565b6020026020010151145b15611dcc5750600019019050610c39565b509050610c39565b6000610c368284612eb5565b82548190849060ff60a01b1916600160a01b836005811115611e0457611e04612a3f565b02179055507fc1191e7178b58ad510709587719f39ec315fa79e81ee7ba5c5ef3c894e94a6518282604051611e3a9291906130d6565b60405180910390a1505050565b600260015403611e995760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016110c1565b6002600155565b8035600081815260046020819052604090912080549091600160a01b90910460ff1690816005811115611ed557611ed5612a3f565b14611ee557611ee5826005611cae565b60098201366000611ef960208801886130ea565b845491935091508160005b8181101561200f576000858583818110611f2057611f20612d4e565b905060200201359050838110611f49576040516363df817160e01b815260040160405180910390fd5b6000878281548110611f5d57611f5d612d4e565b60009182526020909120018054909150600160a01b900460ff1615611f955760405163611ab18960e11b815260040160405180910390fd5b8054611fa9906001600160a01b0316611cfb565b805460ff60a01b1916600160a01b1780825560078b018054600092600160a81b900460ff16908110611fdd57611fdd612d4e565b90600052602060002090600302019050611ff981336001612718565b505050808061200790612d7a565b915050611f04565b507f0d0ab4a45afc0276ae825be9eeb4552011b19aad5c92b4bb782f3ca0356fedc588858560405161204393929190613134565b60405180910390a1505050505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b836001600160a01b03163b6000036120d1576040516309ee12d560e01b815260040160405180910390fd5b6000846001600160a01b03168484846040516024016120f293929190612e91565b60408051601f198184030181529181526020820180516001600160e01b03166323b872dd60e01b179052516121279190613175565b6000604051808303816000865af19150503d8060008114612164576040519150601f19603f3d011682016040523d82523d6000602084013e612169565b606091505b505090508061218b57604051631c1eb8a160e31b815260040160405180910390fd5b5050505050565b836001600160a01b03163b6000036121bd576040516309ee12d560e01b815260040160405180910390fd5b6040516370a0823160e01b81526001600160a01b038481166004830152600091908616906370a0823190602401602060405180830381865afa158015612207573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222b919061304d565b905080821115612277576040805180820182526014815273696e73756666696369656e742062616c616e636560601b6020820152905162461bcd60e51b81526110c191906004016130a3565b600080866001600160a01b031686868660405160240161229993929190612e91565b60408051601f198184030181529181526020820180516001600160e01b03166323b872dd60e01b179052516122ce9190613175565b6000604051808303816000865af19150503d806000811461230b576040519150601f19603f3d011682016040523d82523d6000602084013e612310565b606091505b5091509150816123335760405163e560521360e01b815260040160405180910390fd5b80511561236b578080602001905181019061234e9190612e74565b61236b5760405163e560521360e01b815260040160405180910390fd5b50505050505050565b60008160400151600181111561238c5761238c612a3f565b036123cf578060c0015160011415806123b15750806000015164ffffffffff16600114155b15610eac57604051632f89717760e11b815260040160405180910390fd5b6001816040015160018111156123e7576123e7612a3f565b036124295760808101516001600160a01b031660009081526006602052604090205460ff1661242957604051631eb3268560e31b815260040160405180910390fd5b60c081015115806123b15750805164ffffffffff16610eac57604051632f89717760e11b815260040160405180910390fd5b60005b600581101561264457600082826005811061247b5761247b612d4e565b6040020180360381019061248f9190613187565b805160208201519192509060008490036124e3578164ffffffffff1660011415806124c157506001600160d01b038116155b156124de57604051625cba9760e51b815260040160405180910390fd5b6125cf565b6000856124f18660016126c4565b6005811061250157612501612d4e565b604002018036038101906125159190613187565b602081015181519192509061253164ffffffffff8616856131fe565b6001600160d01b031615158061255557508064ffffffffff168564ffffffffff1611155b806125725750816001600160d01b0316846001600160d01b031611155b806125ae575061258964ffffffffff821683613224565b6001600160d01b03166125a364ffffffffff871686613224565b6001600160d01b0316115b156125cb57604051625cba9760e51b815260040160405180910390fd5b5050505b6000868152600460205260409020839060020185600581106125f3576125f3612d4e565b8251910180546020909301516001600160d01b0316600160281b026001600160f81b031990931664ffffffffff909216919091179190911790555082915061263c905081612d7a565b91505061245e565b505050565b6001600160a01b03811661267057604051630ed1b8b360e31b815260040160405180910390fd5b600780546001600160a01b0319166001600160a01b0383169081179091556040519081527f7a7b5a0a132f9e0581eb8527f66eae9ee89c2a3e79d4ac7e41a1f1f4d48a7fc29060200160405180910390a150565b6000610c368284612dea565b6126dc81836003611de0565b805464ffffffffff60b01b1916600160b01b4264ffffffffff160217905550565b600061270c600284841861324a565b610c3690848416612eb5565b8254600160501b810460ff1690600160601b90046001600160a01b0316600082600181111561274957612749612a3f565b036127635761275e81308688600101546120a6565b61218b565b61218b81858588600201546127789190612e5d565b826001600160a01b03163b6000036127a3576040516309ee12d560e01b815260040160405180910390fd5b6040516001600160a01b03838116602483015260448201839052600091829186169060640160408051601f198184030181529181526020820180516001600160e01b031663a9059cbb60e01b179052516127fd9190613175565b6000604051808303816000865af19150503d806000811461283a576040519150601f19603f3d011682016040523d82523d6000602084013e61283f565b606091505b5091509150816128625760405163f1568f9560e01b815260040160405180910390fd5b80511561218b578080602001905181019061287d9190612e74565b61218b5760405163f1568f9560e01b815260040160405180910390fd5b6040518060a001604052806005905b60408051808201909152600080825260208201528152602001906001900390816128a95790505090565b60008083601f8401126128e557600080fd5b50813567ffffffffffffffff8111156128fd57600080fd5b6020830191508360208260051b850101111561291857600080fd5b9250929050565b8015158114610eac57600080fd5b60008060006040848603121561294257600080fd5b833567ffffffffffffffff81111561295957600080fd5b612965868287016128d3565b90945092505060208401356129798161291f565b809150509250925092565b60006020828403121561299657600080fd5b5035919050565b6101408101818360005b60058110156129e2578151805164ffffffffff1684526020908101516001600160d01b031681850152604090930192909101906001016129a7565b50505092915050565b600080604083850312156129fe57600080fd5b50508035926020909101359150565b80356001600160a01b03811681146116cd57600080fd5b600060208284031215612a3657600080fd5b610c3682612a0d565b634e487b7160e01b600052602160045260246000fd5b60068110612a6557612a65612a3f565b9052565b6001600160a01b038816815260e08101612a866020830189612a55565b951515604082015264ffffffffff94851660608201529284166080840152921660a08201526001600160d01b0390911660c09091015292915050565b602080825282518282018190526000919060409081850190868401855b82811015612b2e57815180516001600160a01b03168552868101511515878601528581015160ff168686015260609081015164ffffffffff169085015260809093019290850190600101612adf565b5091979650505050505050565b60008060208385031215612b4e57600080fd5b823567ffffffffffffffff811115612b6557600080fd5b612b71858286016128d3565b90969095509350505050565b60008060408385031215612b9057600080fd5b82359150612ba060208401612a0d565b90509250929050565b602080825282518282018190526000919060409081850190868401855b82811015612b2e578151805164ffffffffff90811686528782015116878601528581015160028110612bfa57612bfa612a3f565b8587015260608181015160ff16908601526080808201516001600160a01b03169086015260a0808201519086015260c0908101519085015260e09093019290850190600101612bc6565b602080825282518282018190526000919060409081850190868401855b82811015612b2e578151805164ffffffffff1685528601516001600160a01b0316868501529284019290850190600101612c61565b600060208284031215612ca857600080fd5b813567ffffffffffffffff811115612cbf57600080fd5b82016101c08185031215612cd257600080fd5b9392505050565b60008060208385031215612cec57600080fd5b823567ffffffffffffffff80821115612d0457600080fd5b818501915085601f830112612d1857600080fd5b813581811115612d2757600080fd5b8660208260061b8501011115612d3c57600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612d8c57612d8c612d64565b5060010190565b6040808252810183905260008460608301825b86811015612dd4576001600160a01b03612dbf84612a0d565b16825260209283019290910190600101612da6565b5080925050508215156020830152949350505050565b81810381811115610c3957610c39612d64565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b600082612e3857612e38612e13565b500690565b60008235603e19833603018112612e5357600080fd5b9190910192915050565b8082028115828204841417610c3957610c39612d64565b600060208284031215612e8657600080fd5b8151612cd28161291f565b6001600160a01b039384168152919092166020820152604081019190915260600190565b80820180821115610c3957610c39612d64565b6000808335601e19843603018112612edf57600080fd5b83018035915067ffffffffffffffff821115612efa57600080fd5b602001915060e08102360382131561291857600080fd5b803564ffffffffff811681146116cd57600080fd5b803560ff811681146116cd57600080fd5b600060e08284031215612f4957600080fd5b60405160e0810181811067ffffffffffffffff82111715612f7a57634e487b7160e01b600052604160045260246000fd5b604052612f8683612f11565b8152612f9460208401612f11565b6020820152604083013560028110612fab57600080fd5b6040820152612fbc60608401612f26565b6060820152612fcd60808401612a0d565b608082015260a083013560a082015260c083013560c08201528091505092915050565b64ffffffffff81811683821601908082111561300e5761300e612d64565b5092915050565b60006020828403121561302757600080fd5b610c3682612f11565b60006020828403121561304257600080fd5b8135612cd28161291f565b60006020828403121561125857600080fd5b6001600160d01b0381811683821601908082111561300e5761300e612d64565b60005b8381101561309a578181015183820152602001613082565b50506000910152565b60208152600082518060208401526130c281604085016020870161307f565b601f01601f19169190910160400192915050565b82815260408101612cd26020830184612a55565b6000808335601e1984360301811261310157600080fd5b83018035915067ffffffffffffffff82111561311c57600080fd5b6020019150600581901b360382131561291857600080fd5b838152604060208201819052810182905260006001600160fb1b0383111561315b57600080fd5b8260051b8085606085013791909101606001949350505050565b60008251612e5381846020870161307f565b60006040828403121561319957600080fd5b6040516040810181811067ffffffffffffffff821117156131ca57634e487b7160e01b600052604160045260246000fd5b6040526131d683612f11565b815260208301356001600160d01b03811681146131f257600080fd5b60208201529392505050565b60006001600160d01b038381168061321857613218612e13565b92169190910692915050565b60006001600160d01b038381168061323e5761323e612e13565b92169190910492915050565b60008261325957613259612e13565b50049056fea2646970667358221220c5878210c79db0170ae37a0826f03cdb2ed083f28652c746a0f966faa645e5f664736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimFees(uint256)": {
        "params": {
          "raffleId": "The id of the raffle."
        }
      },
      "claimPrizes((uint256,uint256[])[])": {
        "params": {
          "claimPrizesCalldata": "The calldata for claiming prizes."
        }
      },
      "constructor": {
        "params": {
          "_feeRecipient": "The recipient of the fees",
          "_usdtInterface": "The USDT address"
        }
      },
      "createRaffle((bool,uint40,uint40,(uint40,uint40,uint8,uint8,address,uint256,uint256)[],(uint40,uint208)[5]))": {
        "params": {
          "params": "The parameters of the raffle."
        },
        "returns": {
          "raffleId": "The id of the newly created raffle."
        }
      },
      "depositPrizes(uint256)": {
        "params": {
          "raffleId": "The id of the raffle."
        }
      },
      "enterRaffles((uint256,uint256)[])": {
        "params": {
          "entries": "The entries to be made."
        }
      },
      "getEntries(uint256)": {
        "params": {
          "raffleId": "The id of the raffle."
        },
        "returns": {
          "entries": "The entries entered for the raffle."
        }
      },
      "getNextRandomNumber(uint256)": {
        "params": {
          "nextIndex": "The nextIndex to interate the RNG value by"
        },
        "returns": {
          "_0": "The randon number with an additional index iteration. This shold be used for multiple values in the same block"
        }
      },
      "getNextRandomRange(uint256,uint256)": {
        "params": {
          "max": "The maximum number the random number should be inclusive",
          "nextIndex": "The nextIndex to interate the RNG value by"
        },
        "returns": {
          "_0": "Random number between 0 & max"
        }
      },
      "getPricingOptions(uint256)": {
        "params": {
          "raffleId": "The id of the raffle."
        },
        "returns": {
          "pricingOptions": "The pricing options for the raffle."
        }
      },
      "getPrizes(uint256)": {
        "params": {
          "raffleId": "The id of the raffle."
        },
        "returns": {
          "prizes": "The prizes to be distributed."
        }
      },
      "getRandomBytes()": {
        "details": "Read here for how it works: https://docs.skale.network/tools/skale-specific/random-number-generator"
      },
      "getRandomNumber()": {
        "returns": {
          "_0": "The randon number"
        }
      },
      "getRandomRange(uint256)": {
        "params": {
          "max": "The maximum number the random number should be inclusive"
        },
        "returns": {
          "_0": "Random number between 0 & max"
        }
      },
      "getWinners(uint256)": {
        "params": {
          "raffleId": "The id of the raffle."
        },
        "returns": {
          "winners": "The winners of the raffle."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateCurrenciesStatus(address[],bool)": {
        "details": "Only callable by owner.",
        "params": {
          "currencies": "Currency addresses (address(0) for ETH)",
          "isAllowed": "Whether the currencies should be allowed for trading"
        }
      }
    },
    "stateVariables": {
      "raffles": {
        "details": "The key is the raffle ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "MAXIMUM_NUMBER_OF_PRIZES_PER_RAFFLE()": {
        "notice": "The maximum number of prizes per raffle.         Each individual ERC-721 counts as one prize.         Each ETH/ERC-20 with winnersCount > 1 counts as one prize."
      },
      "MAXIMUM_NUMBER_OF_WINNERS_PER_RAFFLE()": {
        "notice": "The maximum number of winners per raffle."
      },
      "ONE_HUNDRED_PERCENT_BP()": {
        "notice": "100% in basis points."
      },
      "PRICING_OPTIONS_PER_RAFFLE()": {
        "notice": "The number of pricing options per raffle."
      },
      "claimFees(uint256)": {
        "notice": "Claims the fees collected for a raffle."
      },
      "claimPrizes((uint256,uint256[])[])": {
        "notice": "Claims the prizes for a winner. A winner can claim multiple prizes         from multiple raffles in a single transaction."
      },
      "createRaffle((bool,uint40,uint40,(uint40,uint40,uint8,uint8,address,uint256,uint256)[],(uint40,uint208)[5]))": {
        "notice": "Creates a new raffle."
      },
      "depositPrizes(uint256)": {
        "notice": "Deposits prizes for a raffle."
      },
      "enterRaffles((uint256,uint256)[])": {
        "notice": "Enters a raffle or multiple raffles."
      },
      "feeRecipient()": {
        "notice": "The fee recipient."
      },
      "getEntries(uint256)": {
        "notice": "Gets the entries for a raffle."
      },
      "getPricingOptions(uint256)": {
        "notice": "Gets the pricing options for a raffle."
      },
      "getPrizes(uint256)": {
        "notice": "Gets the prizes for a raffle."
      },
      "getWinners(uint256)": {
        "notice": "Gets the winners for a raffle."
      },
      "isCurrencyAllowed(address)": {
        "notice": "It checks whether the currency is allowed."
      },
      "raffles(uint256)": {
        "notice": "The raffles created."
      },
      "rafflesCount()": {
        "notice": "The number of raffles created."
      },
      "updateCurrenciesStatus(address[],bool)": {
        "notice": "This function allows the owner to update currency statuses."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 94,
        "contract": "contracts/LasmRaffle.sol:LasmRaffle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 210,
        "contract": "contracts/LasmRaffle.sol:LasmRaffle",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1176,
        "contract": "contracts/LasmRaffle.sol:LasmRaffle",
        "label": "USDTInterface",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)3362"
      },
      {
        "astId": 1183,
        "contract": "contracts/LasmRaffle.sol:LasmRaffle",
        "label": "rafflesCount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1189,
        "contract": "contracts/LasmRaffle.sol:LasmRaffle",
        "label": "raffles",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Raffle)3069_storage)"
      },
      {
        "astId": 1196,
        "contract": "contracts/LasmRaffle.sol:LasmRaffle",
        "label": "rafflesParticipantsStats",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(ParticipantStats)3077_storage))"
      },
      {
        "astId": 1201,
        "contract": "contracts/LasmRaffle.sol:LasmRaffle",
        "label": "isCurrencyAllowed",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1212,
        "contract": "contracts/LasmRaffle.sol:LasmRaffle",
        "label": "feeRecipient",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Entry)3008_storage)dyn_storage": {
        "base": "t_struct(Entry)3008_storage",
        "encoding": "dynamic_array",
        "label": "struct ILasmRaffle.Entry[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PricingOption)3002_storage)5_storage": {
        "base": "t_struct(PricingOption)3002_storage",
        "encoding": "inplace",
        "label": "struct ILasmRaffle.PricingOption[5]",
        "numberOfBytes": "160"
      },
      "t_array(t_struct(Prize)3035_storage)dyn_storage": {
        "base": "t_struct(Prize)3035_storage",
        "encoding": "dynamic_array",
        "label": "struct ILasmRaffle.Prize[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Winner)3018_storage)dyn_storage": {
        "base": "t_struct(Winner)3018_storage",
        "encoding": "dynamic_array",
        "label": "struct ILasmRaffle.Winner[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)3362": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(RaffleStatus)2993": {
        "encoding": "inplace",
        "label": "enum ILasmRaffle.RaffleStatus",
        "numberOfBytes": "1"
      },
      "t_enum(TokenType)2996": {
        "encoding": "inplace",
        "label": "enum ILasmRaffle.TokenType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(ParticipantStats)3077_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ILasmRaffle.ParticipantStats)",
        "numberOfBytes": "32",
        "value": "t_struct(ParticipantStats)3077_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(ParticipantStats)3077_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct ILasmRaffle.ParticipantStats))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(ParticipantStats)3077_storage)"
      },
      "t_mapping(t_uint256,t_struct(Raffle)3069_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ILasmRaffle.Raffle)",
        "numberOfBytes": "32",
        "value": "t_struct(Raffle)3069_storage"
      },
      "t_struct(Entry)3008_storage": {
        "encoding": "inplace",
        "label": "struct ILasmRaffle.Entry",
        "members": [
          {
            "astId": 3005,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "currentEntryIndex",
            "offset": 0,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 3007,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "participant",
            "offset": 5,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ParticipantStats)3077_storage": {
        "encoding": "inplace",
        "label": "struct ILasmRaffle.ParticipantStats",
        "members": [
          {
            "astId": 3072,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "amountPaid",
            "offset": 0,
            "slot": "0",
            "type": "t_uint208"
          },
          {
            "astId": 3074,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "entriesCount",
            "offset": 26,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 3076,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "refunded",
            "offset": 31,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PricingOption)3002_storage": {
        "encoding": "inplace",
        "label": "struct ILasmRaffle.PricingOption",
        "members": [
          {
            "astId": 2999,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "entriesCount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 3001,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "price",
            "offset": 5,
            "slot": "0",
            "type": "t_uint208"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Prize)3035_storage": {
        "encoding": "inplace",
        "label": "struct ILasmRaffle.Prize",
        "members": [
          {
            "astId": 3021,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "winnersCount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 3023,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "cumulativeWinnersCount",
            "offset": 5,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 3026,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "prizeType",
            "offset": 10,
            "slot": "0",
            "type": "t_enum(TokenType)2996"
          },
          {
            "astId": 3028,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "prizeTier",
            "offset": 11,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3030,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "prizeAddress",
            "offset": 12,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3032,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "prizeId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3034,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "prizeAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Raffle)3069_storage": {
        "encoding": "inplace",
        "label": "struct ILasmRaffle.Raffle",
        "members": [
          {
            "astId": 3038,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3041,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "status",
            "offset": 20,
            "slot": "0",
            "type": "t_enum(RaffleStatus)2993"
          },
          {
            "astId": 3043,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "isMinimumEntriesFixed",
            "offset": 21,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3045,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "drawnAt",
            "offset": 22,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 3047,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "minimumEntries",
            "offset": 27,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 3049,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "maximumEntriesPerParticipant",
            "offset": 0,
            "slot": "1",
            "type": "t_uint40"
          },
          {
            "astId": 3051,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "claimableFees",
            "offset": 5,
            "slot": "1",
            "type": "t_uint208"
          },
          {
            "astId": 3056,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "pricingOptions",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_struct(PricingOption)3002_storage)5_storage"
          },
          {
            "astId": 3060,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "prizes",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_struct(Prize)3035_storage)dyn_storage"
          },
          {
            "astId": 3064,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "entries",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_struct(Entry)3008_storage)dyn_storage"
          },
          {
            "astId": 3068,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "winners",
            "offset": 0,
            "slot": "9",
            "type": "t_array(t_struct(Winner)3018_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(Winner)3018_storage": {
        "encoding": "inplace",
        "label": "struct ILasmRaffle.Winner",
        "members": [
          {
            "astId": 3011,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "participant",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3013,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "claimed",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3015,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "prizeIndex",
            "offset": 21,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3017,
            "contract": "contracts/LasmRaffle.sol:LasmRaffle",
            "label": "entryIndex",
            "offset": 22,
            "slot": "0",
            "type": "t_uint40"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint208": {
        "encoding": "inplace",
        "label": "uint208",
        "numberOfBytes": "26"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}